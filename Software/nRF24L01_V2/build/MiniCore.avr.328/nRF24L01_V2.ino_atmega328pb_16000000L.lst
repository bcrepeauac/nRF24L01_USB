
C:\Users\bcrepeau\AppData\Local\Temp\arduino\sketches\CFCAD6CC42B680C2C8C9D81799D9C970/nRF24L01_V2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:65
       0:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__ctors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:70
      10:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__vector_16>
../../../../crt1/gcrt1.S:83
      44:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:91
      64:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__bad_interrupt>

000000b4 <__trampolines_end>:
__trampolines_start():
      b4:	52 46       	sbci	r21, 0x62	; 98
      b6:	32 34       	cpi	r19, 0x42	; 66
      b8:	2f 65       	ori	r18, 0x5F	; 95
      ba:	78 61       	ori	r23, 0x18	; 24
      bc:	6d 70       	andi	r22, 0x0D	; 13
      be:	6c 65       	ori	r22, 0x5C	; 92
      c0:	73 2f       	mov	r23, r19
      c2:	47 65       	ori	r20, 0x57	; 87
      c4:	74 74       	andi	r23, 0x44	; 68
      c6:	69 6e       	ori	r22, 0xE9	; 233
      c8:	67 53       	subi	r22, 0x37	; 55
      ca:	74 61       	ori	r23, 0x14	; 20
      cc:	72 74       	andi	r23, 0x42	; 66
      ce:	65 64       	ori	r22, 0x45	; 69
	...

000000d1 <setup::__c>:
      d1:	72 61 64 69 6f 20 68 61 72 64 77 61 72 65 20 69     radio hardware i
      e1:	73 20 6e 6f 74 20 72 65 73 70 6f 6e 64 69 6e 67     s not responding
      f1:	21 21 00                                            !!.

000000f4 <txData()::__c>:
      f4:	50 61 63 6b 65 74 20 74 72 61 6e 73 6d 69 73 73     Packet transmiss
     104:	69 6f 6e 20 66 61 69 6c 65 64 2e 00                 ion failed..

00000110 <child_pipe>:
     110:	0a 0b 0c 0d 0e 0f                                   ......

00000116 <child_pipe_enable>:
     116:	00 01 02 03 04 05                                   ......

0000011c <_ZZN4RF2418printPrettyDetailsEvE3__c__21_>:
	...

0000011d <_ZZN4RF2418printPrettyDetailsEvE3__c__20_>:
	...

0000011e <_ZZN4RF2418printPrettyDetailsEvE3__c__19_>:
     11e:	70 69 70 65 20 25 75 20 28 25 53 29 20 62 6f 75     pipe %u (%S) bou
     12e:	6e 64 00                                            nd.

00000131 <_ZZN4RF2418printPrettyDetailsEvE3__c__18_>:
     131:	54 58 20 61 64 64 72 65 73 73 09 00                 TX address..

0000013d <_ZZN4RF2418printPrettyDetailsEvE3__c__17_>:
     13d:	50 72 69 6d 61 72 79 20 4d 6f 64 65 09 09 3d 20     Primary Mode..= 
     14d:	25 63 58 0d 0a 00                                   %cX...

00000153 <_ZZN4RF2418printPrettyDetailsEvE3__c__16_>:
     153:	41 75 74 6f 20 41 63 6b 6e 6f 77 6c 65 64 67 6d     Auto Acknowledgm
     163:	65 6e 74 09 3d 20 30 62 25 63 25 63 25 63 25 63     ent.= 0b%c%c%c%c
     173:	25 63 25 63 0d 0a 00                                %c%c...

0000017a <_ZZN4RF2418printPrettyDetailsEvE3__c__15_>:
     17a:	41 75 74 6f 20 41 63 6b 6e 6f 77 6c 65 64 67 6d     Auto Acknowledgm
     18a:	65 6e 74 09 25 53 0d 0a 00                          ent.%S...

00000193 <_ZZN4RF2418printPrettyDetailsEvE3__c__14_>:
     193:	44 79 6e 61 6d 69 63 20 50 61 79 6c 6f 61 64 73     Dynamic Payloads
     1a3:	09 25 53 0d 0a 00                                   .%S...

000001a9 <_ZZN4RF2418printPrettyDetailsEvE3__c__13_>:
     1a9:	43 75 73 74 6f 6d 20 41 43 4b 20 50 61 79 6c 6f     Custom ACK Paylo
     1b9:	61 64 09 25 53 0d 0a 00                             ad.%S...

000001c1 <_ZZN4RF2418printPrettyDetailsEvE3__c__12_>:
     1c1:	4d 75 6c 74 69 63 61 73 74 09 09 25 53 0d 0a 00     Multicast..%S...

000001d1 <_ZZN4RF2418printPrettyDetailsEvE3__c__11_>:
     1d1:	52 65 74 72 79 20 61 74 74 65 6d 70 74 73 20 6d     Retry attempts m
     1e1:	61 64 65 20 66 6f 72 0a 20 20 20 20 6c 61 73 74     ade for.    last
     1f1:	20 74 72 61 6e 73 6d 69 73 73 69 6f 6e 09 3d 20      transmission.= 
     201:	25 64 0d 0a 00                                      %d...

00000206 <_ZZN4RF2418printPrettyDetailsEvE3__c__10_>:
     206:	50 61 63 6b 65 74 73 20 6c 6f 73 74 20 6f 6e 0a     Packets lost on.
     216:	20 20 20 20 63 75 72 72 65 6e 74 20 63 68 61 6e         current chan
     226:	6e 65 6c 09 3d 20 25 64 0d 0a 00                    nel.= %d...

00000231 <RF24::printPrettyDetails()::__c>:
     231:	41 75 74 6f 20 52 65 74 72 79 20 41 74 74 65 6d     Auto Retry Attem
     241:	70 74 73 09 3d 20 25 64 20 6d 61 78 69 6d 75 6d     pts.= %d maximum
     251:	0d 0a 00                                            ...

00000254 <RF24::printPrettyDetails()::__c>:
     254:	41 75 74 6f 20 52 65 74 72 79 20 44 65 6c 61 79     Auto Retry Delay
     264:	09 3d 20 25 64 20 6d 69 63 72 6f 73 65 63 6f 6e     .= %d microsecon
     274:	64 73 0d 0a 00                                      ds...

00000279 <RF24::printPrettyDetails()::__c>:
     279:	53 74 61 74 69 63 20 50 61 79 6c 6f 61 64 20 4c     Static Payload L
     289:	65 6e 67 74 68 09 3d 20 25 64 20 62 79 74 65 73     ength.= %d bytes
     299:	0d 0a 00                                            ...

0000029c <RF24::printPrettyDetails()::__c>:
     29c:	41 64 64 72 65 73 73 20 4c 65 6e 67 74 68 09 09     Address Length..
     2ac:	3d 20 25 64 20 62 79 74 65 73 0d 0a 00              = %d bytes...

000002b9 <RF24::printPrettyDetails()::__c>:
     2b9:	43 52 43 20 4c 65 6e 67 74 68 09 09 25 53 0d 0a     CRC Length..%S..
	...

000002ca <RF24::printPrettyDetails()::__c>:
     2ca:	52 46 20 4c 6f 77 20 4e 6f 69 73 65 20 41 6d 70     RF Low Noise Amp
     2da:	6c 69 66 69 65 72 09 25 53 0d 0a 00                 lifier.%S...

000002e6 <RF24::printPrettyDetails()::__c>:
     2e6:	52 46 20 50 6f 77 65 72 20 41 6d 70 6c 69 66 69     RF Power Amplifi
     2f6:	65 72 09 25 53 0d 0a 00                             er.%S...

000002fe <RF24::printPrettyDetails()::__c>:
     2fe:	52 46 20 44 61 74 61 20 52 61 74 65 09 09 25 53     RF Data Rate..%S
     30e:	0d 0a 00                                            ...

00000311 <RF24::printPrettyDetails()::__c>:
     311:	4d 6f 64 65 6c 09 09 09 3d 20 25 53 0d 0a 00        Model...= %S...

00000320 <RF24::printPrettyDetails()::__c>:
     320:	43 68 61 6e 6e 65 6c 09 09 09 3d 20 25 75 20 28     Channel...= %u (
     330:	7e 20 25 75 20 4d 48 7a 29 0d 0a 00                 ~ %u MHz)...

0000033c <RF24::printPrettyDetails()::__c>:
     33c:	53 50 49 20 46 72 65 71 75 65 6e 63 79 09 09 3d     SPI Frequency..=
     34c:	20 25 64 20 4d 68 7a 0a 00                           %d Mhz..

00000355 <rf24_feature_e_str_P>:
     355:	c7 03 77 03 6d 03 5f 03 66 03                       ..w.m._.f.

0000035f <rf24_feature_e_str_closed>:
     35f:	63 6c 6f 73 65 64 00                                closed.

00000366 <rf24_feature_e_str_open>:
     366:	20 6f 70 65 6e 20 00                                 open .

0000036d <rf24_feature_e_str_allowed>:
     36d:	3d 20 41 6c 6c 6f 77 65 64 00                       = Allowed.

00000377 <rf24_feature_e_str_on>:
     377:	3d 20 45 6e 61 62 6c 65 64 00                       = Enabled.

00000381 <rf24_pa_dbm_e_str_P>:
     381:	a5 03 9c 03 92 03 89 03                             ........

00000389 <rf24_pa_dbm_e_str_3>:
     389:	3d 20 50 41 5f 4d 41 58 00                          = PA_MAX.

00000392 <rf24_pa_dbm_e_str_2>:
     392:	3d 20 50 41 5f 48 49 47 48 00                       = PA_HIGH.

0000039c <rf24_pa_dbm_e_str_1>:
     39c:	3d 20 50 41 5f 4c 4f 57 00                          = PA_LOW.

000003a5 <rf24_pa_dbm_e_str_0>:
     3a5:	3d 20 50 41 5f 4d 49 4e 00                          = PA_MIN.

000003ae <rf24_crclength_e_str_P>:
     3ae:	c7 03 be 03 b4 03                                   ......

000003b4 <rf24_crclength_e_str_2>:
     3b4:	3d 20 31 36 20 62 69 74 73 00                       = 16 bits.

000003be <rf24_crclength_e_str_1>:
     3be:	3d 20 38 20 62 69 74 73 00                          = 8 bits.

000003c7 <rf24_crclength_e_str_0>:
     3c7:	3d 20 44 69 73 61 62 6c 65 64 00                    = Disabled.

000003d2 <rf24_model_e_str_P>:
     3d2:	e0 03 d6 03                                         ....

000003d6 <rf24_model_e_str_1>:
     3d6:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

000003e0 <rf24_model_e_str_0>:
     3e0:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

000003e9 <rf24_datarate_e_str_P>:
     3e9:	03 04 fa 03 ef 03                                   ......

000003ef <rf24_datarate_e_str_2>:
     3ef:	3d 20 32 35 30 20 4b 42 50 53 00                    = 250 KBPS.

000003fa <rf24_datarate_e_str_1>:
     3fa:	3d 20 32 20 4d 42 50 53 00                          = 2 MBPS.

00000403 <rf24_datarate_e_str_0>:
     403:	3d 20 31 20 4d 42 50 53 00                          = 1 MBPS.

0000040c <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
     40c:	0d 0a 00                                            ...

0000040f <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
     40f:	25 30 32 78 00                                      %02x.

00000414 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
     414:	20 30 78 00                                          0x.

00000418 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
     418:	25 53 09 3d 00                                      %S.=.

0000041d <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
     41d:	0d 0a 00                                            ...

00000420 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
     420:	20 30 78 25 30 32 78 00                              0x%02x.

00000428 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
     428:	25 53 09 3d 00                                      %S.=.

0000042d <digital_pin_to_timer_PGM>:
     42d:	0a 0d 0e 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

00000448 <digital_pin_to_bit_mask_PGM>:
     448:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     458:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

00000463 <digital_pin_to_port_PGM>:
     463:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     473:	03 03 03 03 02 02 03 05 05 05 05                    ...........

0000047e <port_to_input_PGM>:
     47e:	00 00 00 00 23 00 26 00 29 00 2c 00                 ....#.&.).,.

0000048a <port_to_output_PGM>:
     48a:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

00000496 <port_to_mode_PGM>:
     496:	00 00 00 00 24 00 27 00 2a 00 2d 00                 ....$.'.*.-.

000004a2 <__ctors_start>:
__ctors_start():
     4a2:	8c 03       	fmulsu	r16, r20
     4a4:	9e 0f       	add	r25, r30

000004a6 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     4a6:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     4a8:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     4aa:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
     4ac:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
     4ae:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
     4b0:	cd bf       	out	0x3d, r28	; 61

000004b2 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     4b2:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     4b4:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     4b6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     4b8:	e0 ea       	ldi	r30, 0xA0	; 160
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     4ba:	ff e2       	ldi	r31, 0x2F	; 47
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     4be:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     4c0:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     4c2:	a0 37       	cpi	r26, 0x70	; 112
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     4c4:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     4c6:	d9 f7       	brne	.-10     	; 0x4be <__do_copy_data+0xc>

000004c8 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     4c8:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     4ca:	a0 e7       	ldi	r26, 0x70	; 112
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     4cc:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <.do_clear_bss_start>

000004d0 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     4d0:	1d 92       	st	X+, r1

000004d2 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     4d2:	a7 3d       	cpi	r26, 0xD7	; 215
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     4d4:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <.do_clear_bss_loop>

000004d8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     4d8:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     4da:	c3 e5       	ldi	r28, 0x53	; 83
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     4dc:	d2 e0       	ldi	r29, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     4e0:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     4e2:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     4e4:	0e 94 29 13 	call	0x2652	; 0x2652 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     4e8:	c1 35       	cpi	r28, 0x51	; 81
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     4ea:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     4ec:	c9 f7       	brne	.-14     	; 0x4e0 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     4ee:	0e 94 03 11 	call	0x2206	; 0x2206 <main>
../../../../crt1/gcrt1.S:315
     4f2:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <_exit>

000004f6 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     4f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004fa <printf_begin()>:
_Z12printf_beginv():
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/printf.h:36
#endif // defined (ARDUINO_ARCH_AVR) || defined (__ARDUINO_X86__) || defined (ARDUINO_ARCH_MBED) || defined (ARDUINO_ARCH_MEGAAVR)

void printf_begin(void)
{
#if defined(ARDUINO_ARCH_AVR) || defined(ARDUINO_ARCH_MEGAAVR)
    fdevopen(&serial_putc, 0);
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	8d e3       	ldi	r24, 0x3D	; 61
     500:	96 e0       	ldi	r25, 0x06	; 6
     502:	0c 94 86 14 	jmp	0x290c	; 0x290c <fdevopen>

00000506 <processInt(unsigned char, unsigned char, unsigned char)>:
_Z10processInthhh():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:62
#define FAIL Serial.println("FAIL")

unsigned char processInt(unsigned char x, unsigned char y, unsigned char z){
  // Converts three consecutive decimal values into a single char
  // IE 1, 2, 3 -> 123
  if (x < 0x30 || x > 0x39 ){
     506:	90 ed       	ldi	r25, 0xD0	; 208
     508:	98 0f       	add	r25, r24
     50a:	9a 30       	cpi	r25, 0x0A	; 10
     50c:	98 f4       	brcc	.+38     	; 0x534 <processInt(unsigned char, unsigned char, unsigned char)+0x2e>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:67
    //0xFF indicates input is out of range
    return 0xFF;
  }
  //Serial.println("X ok");
  if (y < 0x30 || y > 0x39 ){
     50e:	90 ed       	ldi	r25, 0xD0	; 208
     510:	96 0f       	add	r25, r22
     512:	9a 30       	cpi	r25, 0x0A	; 10
     514:	78 f4       	brcc	.+30     	; 0x534 <processInt(unsigned char, unsigned char, unsigned char)+0x2e>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:72
    //0xFF indicates input is out of range
    return 0xFF;
  }
  //Serial.println("Y ok");
  if (z < 0x30 || z > 0x39 ){
     516:	90 ed       	ldi	r25, 0xD0	; 208
     518:	94 0f       	add	r25, r20
     51a:	9a 30       	cpi	r25, 0x0A	; 10
     51c:	58 f4       	brcc	.+22     	; 0x534 <processInt(unsigned char, unsigned char, unsigned char)+0x2e>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:78
    //0xFF indicates input is out of range
    return 0xFF;
  }
  //Serial.println("Z ok");
  //Serial.println((x-0x30)*100 + (y - 0x30)*10 + (z - 0x30));
  return (x-0x30)*100 + (y - 0x30)*10 + (z - 0x30);
     51e:	40 5d       	subi	r20, 0xD0	; 208
     520:	9a e0       	ldi	r25, 0x0A	; 10
     522:	69 9f       	mul	r22, r25
     524:	40 0d       	add	r20, r0
     526:	11 24       	eor	r1, r1
     528:	94 e6       	ldi	r25, 0x64	; 100
     52a:	89 9f       	mul	r24, r25
     52c:	40 0d       	add	r20, r0
     52e:	11 24       	eor	r1, r1
     530:	84 2f       	mov	r24, r20
     532:	08 95       	ret
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:64
unsigned char processInt(unsigned char x, unsigned char y, unsigned char z){
  // Converts three consecutive decimal values into a single char
  // IE 1, 2, 3 -> 123
  if (x < 0x30 || x > 0x39 ){
    //0xFF indicates input is out of range
    return 0xFF;
     534:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:79
    return 0xFF;
  }
  //Serial.println("Z ok");
  //Serial.println((x-0x30)*100 + (y - 0x30)*10 + (z - 0x30));
  return (x-0x30)*100 + (y - 0x30)*10 + (z - 0x30);
}
     536:	08 95       	ret

00000538 <processHex(unsigned char, unsigned char)>:
_Z10processHexhh():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:85

unsigned char processHex(unsigned char msb, unsigned char lsb){
  // Converts a pair of hex characters into the corresponding value
  // IE A, 5 -> 0xA5

  globalErrorFlag = false;
     538:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <globalErrorFlag>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:90
  //Serial.print("msb: ");
  //Serial.println(msb, HEX);
  //Serial.print("lsb: ");
  //Serial.println(lsb, HEX);
  if (msb < 0x30 || msb > 0x46 || lsb < 0x30 || lsb > 0x46){
     53c:	90 ed       	ldi	r25, 0xD0	; 208
     53e:	98 0f       	add	r25, r24
     540:	97 31       	cpi	r25, 0x17	; 23
     542:	88 f4       	brcc	.+34     	; 0x566 <processHex(unsigned char, unsigned char)+0x2e>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:90 (discriminator 1)
     544:	20 ed       	ldi	r18, 0xD0	; 208
     546:	26 0f       	add	r18, r22
     548:	27 31       	cpi	r18, 0x17	; 23
     54a:	68 f4       	brcc	.+26     	; 0x566 <processHex(unsigned char, unsigned char)+0x2e>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:94
    return 0xFF;  // If the char is less than 0 or more than F, return with an error
    globalErrorFlag = true;
  }
  if ( msb <= 0x39 ){
     54c:	8a 33       	cpi	r24, 0x3A	; 58
     54e:	10 f0       	brcs	.+4      	; 0x554 <processHex(unsigned char, unsigned char)+0x1c>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:98
    msb = (msb - 0x30); // Turns msb into plain hex
  }
  else{
    msb = (msb - 0x37);
     550:	99 ec       	ldi	r25, 0xC9	; 201
     552:	98 0f       	add	r25, r24
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:100
  }
  if ( lsb <= 0x39 ){
     554:	6a 33       	cpi	r22, 0x3A	; 58
     556:	10 f0       	brcs	.+4      	; 0x55c <processHex(unsigned char, unsigned char)+0x24>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:104
    lsb = (lsb - 0x30); // Turns lsb into plain hex
  }
  else{
    lsb = (lsb - 0x37);
     558:	29 ec       	ldi	r18, 0xC9	; 201
     55a:	26 0f       	add	r18, r22
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:106
  }
  return (msb*0x10)+lsb;
     55c:	89 2f       	mov	r24, r25
     55e:	82 95       	swap	r24
     560:	80 7f       	andi	r24, 0xF0	; 240
     562:	82 0f       	add	r24, r18
     564:	08 95       	ret
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:91
  //Serial.print("msb: ");
  //Serial.println(msb, HEX);
  //Serial.print("lsb: ");
  //Serial.println(lsb, HEX);
  if (msb < 0x30 || msb > 0x46 || lsb < 0x30 || lsb > 0x46){
    return 0xFF;  // If the char is less than 0 or more than F, return with an error
     566:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:108
  else{
    lsb = (lsb - 0x37);
  }
  return (msb*0x10)+lsb;

}
     568:	08 95       	ret

0000056a <txData()>:
_Z6txDatav():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:254
      }
    }
  }
}

void txData(void){
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:256
  // Transmits the data in data buffer over the radio
  char packets = index / MAXPAYLOAD;
     576:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <index>
     57a:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <index+0x1>
     57e:	ec 01       	movw	r28, r24
     580:	97 fd       	sbrc	r25, 7
     582:	6f 96       	adiw	r28, 0x1f	; 31
     584:	25 e0       	ldi	r18, 0x05	; 5
     586:	d5 95       	asr	r29
     588:	c7 95       	ror	r28
     58a:	2a 95       	dec	r18
     58c:	e1 f7       	brne	.-8      	; 0x586 <txData()+0x1c>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:257
  char last_packet_size = index % MAXPAYLOAD;
     58e:	60 e2       	ldi	r22, 0x20	; 32
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__divmodhi4>
     596:	f8 2e       	mov	r15, r24
     598:	e8 2e       	mov	r14, r24
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:260
  bool report = true;
  // Switch to TX mode
  radio.stopListening();
     59a:	84 e0       	ldi	r24, 0x04	; 4
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	0e 94 55 09 	call	0x12aa	; 0x12aa <RF24::stopListening()>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:262
  // Transmit data
  for ( int i=0; i < packets; i++){
     5a2:	10 e0       	ldi	r17, 0x00	; 0
     5a4:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:258

void txData(void){
  // Transmits the data in data buffer over the radio
  char packets = index / MAXPAYLOAD;
  char last_packet_size = index % MAXPAYLOAD;
  bool report = true;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:262
  // Switch to TX mode
  radio.stopListening();
  // Transmit data
  for ( int i=0; i < packets; i++){
     5a8:	0c 2e       	mov	r0, r28
     5aa:	00 0c       	add	r0, r0
     5ac:	dd 0b       	sbc	r29, r29
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:262 (discriminator 2)
     5ae:	0c 17       	cp	r16, r28
     5b0:	1d 07       	cpc	r17, r29
     5b2:	94 f4       	brge	.+36     	; 0x5d8 <txData()+0x6e>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:264
    //Serial.println(F("Printing in loop"));
    report = report && radio.write(data+(MAXPAYLOAD*i), MAXPAYLOAD);  // Transmit the full packets
     5b4:	88 23       	and	r24, r24
     5b6:	69 f0       	breq	.+26     	; 0x5d2 <txData()+0x68>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:264 (discriminator 1)
     5b8:	b8 01       	movw	r22, r16
     5ba:	95 e0       	ldi	r25, 0x05	; 5
     5bc:	66 0f       	add	r22, r22
     5be:	77 1f       	adc	r23, r23
     5c0:	9a 95       	dec	r25
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <txData()+0x52>
     5c4:	6f 57       	subi	r22, 0x7F	; 127
     5c6:	7e 4f       	sbci	r23, 0xFE	; 254
     5c8:	40 e2       	ldi	r20, 0x20	; 32
     5ca:	84 e0       	ldi	r24, 0x04	; 4
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 e7 09 	call	0x13ce	; 0x13ce <RF24::write(void const*, unsigned char)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:262 (discriminator 6)
  char last_packet_size = index % MAXPAYLOAD;
  bool report = true;
  // Switch to TX mode
  radio.stopListening();
  // Transmit data
  for ( int i=0; i < packets; i++){
     5d2:	0f 5f       	subi	r16, 0xFF	; 255
     5d4:	1f 4f       	sbci	r17, 0xFF	; 255
     5d6:	eb cf       	rjmp	.-42     	; 0x5ae <txData()+0x44>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:267
    //Serial.println(F("Printing in loop"));
    report = report && radio.write(data+(MAXPAYLOAD*i), MAXPAYLOAD);  // Transmit the full packets
  }
  // Finally transmit partial packet, if it exists
  if ( last_packet_size != 0){
     5d8:	ee 20       	and	r14, r14
     5da:	71 f1       	breq	.+92     	; 0x638 <txData()+0xce>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:270
    //radio.setPayloadSize(last_packet_size);  // Temporarily reduce the packet size
    //Serial.println(F("Printing remainder"));
    report = report && radio.write(data+(MAXPAYLOAD*packets), last_packet_size);
     5dc:	81 11       	cpse	r24, r1
     5de:	1f c0       	rjmp	.+62     	; 0x61e <txData()+0xb4>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:276
    //radio.setPayloadSize(MAXPAYLOAD); // Reset to the max
  }
  // Check if packets sent correctly
  if (!report){
    // An error occurred and the host uC should be notified
    digitalWrite(ERROR_LED, HIGH);
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	85 e0       	ldi	r24, 0x05	; 5
     5e4:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:277
    Serial.println(F("Packet transmission failed."));
     5e8:	64 ef       	ldi	r22, 0xF4	; 244
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	87 e2       	ldi	r24, 0x27	; 39
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	0e 94 3e 10 	call	0x207c	; 0x207c <Print::println(__FlashStringHelper const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:278
    printf_begin();
     5f4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <printf_begin()>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:279
    radio.printPrettyDetails(); // (larger) function that prints human readable data
     5f8:	84 e0       	ldi	r24, 0x04	; 4
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 77 0b 	call	0x16ee	; 0x16ee <RF24::printPrettyDetails()>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:287
    digitalWrite(ERROR_LED, LOW); // Clear the error flag on successful transmission
  }
  

  // Switch back to RX mode
  radio.startListening();
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	0e 94 a9 0a 	call	0x1552	; 0x1552 <RF24::startListening()>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:289
  // Reset index
  index = 0;
     608:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <index+0x1>
     60c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <index>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:290
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	08 95       	ret
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:270 (discriminator 1)
  }
  // Finally transmit partial packet, if it exists
  if ( last_packet_size != 0){
    //radio.setPayloadSize(last_packet_size);  // Temporarily reduce the packet size
    //Serial.println(F("Printing remainder"));
    report = report && radio.write(data+(MAXPAYLOAD*packets), last_packet_size);
     61e:	be 01       	movw	r22, r28
     620:	85 e0       	ldi	r24, 0x05	; 5
     622:	66 0f       	add	r22, r22
     624:	77 1f       	adc	r23, r23
     626:	8a 95       	dec	r24
     628:	e1 f7       	brne	.-8      	; 0x622 <txData()+0xb8>
     62a:	6f 57       	subi	r22, 0x7F	; 127
     62c:	7e 4f       	sbci	r23, 0xFE	; 254
     62e:	4f 2d       	mov	r20, r15
     630:	84 e0       	ldi	r24, 0x04	; 4
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	0e 94 e7 09 	call	0x13ce	; 0x13ce <RF24::write(void const*, unsigned char)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:274
    //radio.setPayloadSize(MAXPAYLOAD); // Reset to the max
  }
  // Check if packets sent correctly
  if (!report){
     638:	88 23       	and	r24, r24
     63a:	91 f2       	breq	.-92     	; 0x5e0 <txData()+0x76>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:282
    Serial.println(F("Packet transmission failed."));
    printf_begin();
    radio.printPrettyDetails(); // (larger) function that prints human readable data
  }
  else{
    digitalWrite(ERROR_LED, LOW); // Clear the error flag on successful transmission
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
     644:	dd cf       	rjmp	.-70     	; 0x600 <txData()+0x96>

00000646 <setup>:
setup():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:294
  index = 0;
}

void setup() {

  pinMode(STATUS_LED, OUTPUT);
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	86 e0       	ldi	r24, 0x06	; 6
     64a:	0e 94 5f 12 	call	0x24be	; 0x24be <pinMode>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:295
  digitalWrite(STATUS_LED, HIGH);
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	86 e0       	ldi	r24, 0x06	; 6
     652:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:296
  pinMode(ERROR_LED, OUTPUT);
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	85 e0       	ldi	r24, 0x05	; 5
     65a:	0e 94 5f 12 	call	0x24be	; 0x24be <pinMode>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:297
  digitalWrite(ERROR_LED, LOW);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	85 e0       	ldi	r24, 0x05	; 5
     662:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:298
  pinMode(CE, OUTPUT);
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	87 e0       	ldi	r24, 0x07	; 7
     66a:	0e 94 5f 12 	call	0x24be	; 0x24be <pinMode>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:299
  pinMode(CSN, OUTPUT);
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	88 e0       	ldi	r24, 0x08	; 8
     672:	0e 94 5f 12 	call	0x24be	; 0x24be <pinMode>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:300
  digitalWrite(CE, LOW);
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	87 e0       	ldi	r24, 0x07	; 7
     67a:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:301
  delay(1);
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 99 11 	call	0x2332	; 0x2332 <delay>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:302
  digitalWrite(CE, HIGH);
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	87 e0       	ldi	r24, 0x07	; 7
     68e:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
_ZN14HardwareSerial5beginEm():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     692:	26 e0       	ldi	r18, 0x06	; 6
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	52 ec       	ldi	r21, 0xC2	; 194
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	87 e2       	ldi	r24, 0x27	; 39
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:310
  while (!Serial) {
    // some boards need to wait to ensure access to serial over USB
  }

  // initialize the transceiver on the SPI bus
  if (!radio.begin()) {
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <RF24::begin()>
     6ac:	81 11       	cpse	r24, r1
     6ae:	0b c0       	rjmp	.+22     	; 0x6c6 <setup+0x80>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:311
    Serial.println(F("radio hardware is not responding!!"));
     6b0:	61 ed       	ldi	r22, 0xD1	; 209
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	87 e2       	ldi	r24, 0x27	; 39
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	0e 94 3e 10 	call	0x207c	; 0x207c <Print::println(__FlashStringHelper const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:312
    digitalWrite(ERROR_LED, HIGH);
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	85 e0       	ldi	r24, 0x05	; 5
     6c0:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
     6c4:	ff cf       	rjmp	.-2      	; 0x6c4 <setup+0x7e>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:317
    while (1) {}  // hold in infinite loop
  }
  
  // print example's introductory prompt
  Serial.println(F("RF24/examples/GettingStarted"));
     6c6:	64 eb       	ldi	r22, 0xB4	; 180
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	87 e2       	ldi	r24, 0x27	; 39
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	0e 94 3e 10 	call	0x207c	; 0x207c <Print::println(__FlashStringHelper const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:335
  //Serial.println(F("*** PRESS 'T' to begin transmitting to the other node"));

  // Set the PA Level low to try preventing power supply related problems
  // because these examples are likely run with nodes in close proximity to
  // each other.
  radio.setPALevel(RF24_PA_LOW);  // RF24_PA_MAX is default.
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <RF24::setPALevel(unsigned char, bool)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:339

  // save on transmission time by setting the radio to only transmit the
  // number of bytes we need to transmit a float
  radio.setPayloadSize(MAXPAYLOAD);  // float datatype occupies 4 bytes
     6de:	60 e2       	ldi	r22, 0x20	; 32
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 0b 09 	call	0x1216	; 0x1216 <RF24::setPayloadSize(unsigned char)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:342

  // set the TX address of the RX node into the TX pipe
  radio.openWritingPipe((uint8_t*)tx_address);  // always uses pipe 0
     6e8:	6c e0       	ldi	r22, 0x0C	; 12
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	84 e0       	ldi	r24, 0x04	; 4
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <RF24::openWritingPipe(unsigned char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:345

  // set the RX address of the TX node into a RX pipe
  radio.openReadingPipe(1, (uint8_t*)rx_address);  // using pipe 1
     6f4:	46 e0       	ldi	r20, 0x06	; 6
     6f6:	51 e0       	ldi	r21, 0x01	; 1
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	0e 94 3d 0a 	call	0x147a	; 0x147a <RF24::openReadingPipe(unsigned char, unsigned char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:346
  radio.openReadingPipe(0, (uint8_t*)tx_address);
     702:	4c e0       	ldi	r20, 0x0C	; 12
     704:	51 e0       	ldi	r21, 0x01	; 1
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	84 e0       	ldi	r24, 0x04	; 4
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 3d 0a 	call	0x147a	; 0x147a <RF24::openReadingPipe(unsigned char, unsigned char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:349

  // additional setup specific to the node's role
  radio.startListening();  // put radio in RX mode
     710:	84 e0       	ldi	r24, 0x04	; 4
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <RF24::startListening()>

00000718 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>:
_GLOBAL__sub_I__Z11serial_putccP6__file():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:452
  static unsigned long hb_timer = 0;
  if (millis() - hb_timer >= 2000){
    hb_timer = millis();
    digitalWrite(STATUS_LED, !digitalRead(STATUS_LED)); // Toggle status pin
  }
}  // loop
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:33
#define ERROR_LED PD5
#define STATUS_LED PD6 


// instantiate an object for the nRF24L01 transceiver
RF24 radio(CE, CSN);  // using pin 7 for the CE pin, and pin 8 for the CSN pin
     71c:	00 e8       	ldi	r16, 0x80	; 128
     71e:	16 e9       	ldi	r17, 0x96	; 150
     720:	28 e9       	ldi	r18, 0x98	; 152
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	48 e0       	ldi	r20, 0x08	; 8
     726:	67 e0       	ldi	r22, 0x07	; 7
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <RF24::RF24(unsigned char, unsigned char, unsigned long)>
_GLOBAL__sub_I__Z11serial_putccP6__file():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:452
  static unsigned long hb_timer = 0;
  if (millis() - hb_timer >= 2000){
    hb_timer = millis();
    digitalWrite(STATUS_LED, !digitalRead(STATUS_LED)); // Toggle status pin
  }
}  // loop
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <parseCommand(char*)>:
_Z12parseCommandPc():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:110
  }
  return (msb*0x10)+lsb;

}

void parseCommand(char * data){
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	00 d0       	rcall	.+0      	; 0x74c <parseCommand(char*)+0x16>
     74c:	00 d0       	rcall	.+0      	; 0x74e <parseCommand(char*)+0x18>
     74e:	00 d0       	rcall	.+0      	; 0x750 <parseCommand(char*)+0x1a>
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	8c 01       	movw	r16, r24
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:115
  //  Compares the data buffer to accepted commands, calling the appropriate helper functions
  // Needs a pointer to the data buffer for serial data
  // First character is an A if we made it here
  // TODO: refactor to better handle the first character after the control sequence
  data[0] = 'A';
     756:	81 e4       	ldi	r24, 0x41	; 65
     758:	f8 01       	movw	r30, r16
     75a:	80 83       	st	Z, r24
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:117
  int index = 1;
  Serial.println("CMD");
     75c:	62 e1       	ldi	r22, 0x12	; 18
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	87 e2       	ldi	r24, 0x27	; 39
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Print::println(char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:116
  //  Compares the data buffer to accepted commands, calling the appropriate helper functions
  // Needs a pointer to the data buffer for serial data
  // First character is an A if we made it here
  // TODO: refactor to better handle the first character after the control sequence
  data[0] = 'A';
  int index = 1;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	6e 01       	movw	r12, r28
     76e:	f6 e0       	ldi	r31, 0x06	; 6
     770:	cf 0e       	add	r12, r31
     772:	d1 1c       	adc	r13, r1
     774:	78 01       	movw	r14, r16
     776:	e8 0e       	add	r14, r24
     778:	f9 1e       	adc	r15, r25
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:120
  Serial.println("CMD");
  while (true){
    //loop until the exit command is received:
    while (Serial.available()){
     77a:	87 e2       	ldi	r24, 0x27	; 39
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <HardwareSerial::available()>
     782:	89 2b       	or	r24, r25
     784:	d1 f3       	breq	.-12     	; 0x77a <parseCommand(char*)+0x44>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:122
      //While data is available
      char c = Serial.read();  //process the incoming char
     786:	87 e2       	ldi	r24, 0x27	; 39
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <HardwareSerial::read()>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:123
      data[index] = c;
     78e:	f7 01       	movw	r30, r14
     790:	81 93       	st	Z+, r24
     792:	7f 01       	movw	r14, r30
     794:	e0 1b       	sub	r30, r16
     796:	f1 0b       	sbc	r31, r17
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:125
      index ++;
      if ( c == TERMCHAR ){
     798:	8a 30       	cpi	r24, 0x0A	; 10
     79a:	79 f7       	brne	.-34     	; 0x77a <parseCommand(char*)+0x44>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:126
        data[index] = 0;  // Replace termchar with a null terminator
     79c:	e0 0f       	add	r30, r16
     79e:	f1 1f       	adc	r31, r17
     7a0:	10 82       	st	Z, r1
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:127
        if ( strncmp(data, "AT+CH ", 6) == 0 ){
     7a2:	46 e0       	ldi	r20, 0x06	; 6
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	66 e1       	ldi	r22, 0x16	; 22
     7a8:	71 e0       	ldi	r23, 0x01	; 1
     7aa:	c8 01       	movw	r24, r16
     7ac:	0e 94 78 14 	call	0x28f0	; 0x28f0 <strncmp>
     7b0:	89 2b       	or	r24, r25
     7b2:	11 f5       	brne	.+68     	; 0x7f8 <parseCommand(char*)+0xc2>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:135

          // A T + C H _ x y z
          // 0 1 2 3 4 5 6 7 8
          //             ^
          char *p = data+6; // Pointer to where the channel number starts
          unsigned char chan = processInt(p[0], p[1], p[2]);
     7b4:	f8 01       	movw	r30, r16
     7b6:	40 85       	ldd	r20, Z+8	; 0x08
     7b8:	67 81       	ldd	r22, Z+7	; 0x07
     7ba:	86 81       	ldd	r24, Z+6	; 0x06
     7bc:	0e 94 83 02 	call	0x506	; 0x506 <processInt(unsigned char, unsigned char, unsigned char)>
     7c0:	f8 2e       	mov	r15, r24
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:136
          if (chan > 125){
     7c2:	fd e7       	ldi	r31, 0x7D	; 125
     7c4:	f8 17       	cp	r31, r24
     7c6:	50 f4       	brcc	.+20     	; 0x7dc <parseCommand(char*)+0xa6>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:138
            //Report failure if not a valid number or if the requested channel is more than 125
            FAIL; 
     7c8:	6d e1       	ldi	r22, 0x1D	; 29
     7ca:	71 e0       	ldi	r23, 0x01	; 1
     7cc:	87 e2       	ldi	r24, 0x27	; 39
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Print::println(char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:139
            digitalWrite(ERROR_LED, HIGH);
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	85 e0       	ldi	r24, 0x05	; 5
     7d8:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:141
          }
          radio.setChannel(chan);
     7dc:	6f 2d       	mov	r22, r15
     7de:	84 e0       	ldi	r24, 0x04	; 4
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	0e 94 00 09 	call	0x1200	; 0x1200 <RF24::setChannel(unsigned char)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:233
          radio.closeReadingPipe(1); // Close the reading pipe before changing the address
          radio.openWritingPipe((uint8_t*)tx_address); //Re-open the writing channel with new address
          radio.openReadingPipe(1, (uint8_t*)rx_address);  //Reopen with the old address
          radio.openReadingPipe(0, (uint8_t*)tx_address);
          radio.startListening();  // Start listening again
          OK;
     7e6:	62 e2       	ldi	r22, 0x22	; 34
     7e8:	71 e0       	ldi	r23, 0x01	; 1
     7ea:	87 e2       	ldi	r24, 0x27	; 39
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Print::println(char const*)>
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	be cf       	rjmp	.-132    	; 0x774 <parseCommand(char*)+0x3e>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:144
            digitalWrite(ERROR_LED, HIGH);
          }
          radio.setChannel(chan);
          OK;                    
        }
        else if ( strncmp(data, "AT+ADD ", 7) == 0){
     7f8:	47 e0       	ldi	r20, 0x07	; 7
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	65 e2       	ldi	r22, 0x25	; 37
     7fe:	71 e0       	ldi	r23, 0x01	; 1
     800:	c8 01       	movw	r24, r16
     802:	0e 94 78 14 	call	0x28f0	; 0x28f0 <strncmp>
     806:	89 2b       	or	r24, r25
     808:	09 f0       	breq	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80a:	72 c0       	rjmp	.+228    	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:153
          // A T + A D D _ [1][2][3][4][5][6][7][8][9][A]
          // 0 1 2 3 4 5 6  7  8  9  A  B  C  D  E  F  10 
          //                ^
          char address_p[6];
          //Order of bits are reversed since register wants LSB first
          address_p[4] = processHex(p[0], p[1]); // First byte of the address
     80c:	f8 01       	movw	r30, r16
     80e:	60 85       	ldd	r22, Z+8	; 0x08
     810:	87 81       	ldd	r24, Z+7	; 0x07
     812:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     816:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:154
          address_p[3] = processHex(p[2], p[3]); // Second byte of the address
     818:	f8 01       	movw	r30, r16
     81a:	62 85       	ldd	r22, Z+10	; 0x0a
     81c:	81 85       	ldd	r24, Z+9	; 0x09
     81e:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     822:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:155
          address_p[2] = processHex(p[4], p[5]); // Third byte of the address
     824:	f8 01       	movw	r30, r16
     826:	64 85       	ldd	r22, Z+12	; 0x0c
     828:	83 85       	ldd	r24, Z+11	; 0x0b
     82a:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     82e:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:156
          address_p[1] = processHex(p[6], p[7]); // Fourth byte of the address
     830:	f8 01       	movw	r30, r16
     832:	66 85       	ldd	r22, Z+14	; 0x0e
     834:	85 85       	ldd	r24, Z+13	; 0x0d
     836:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     83a:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:157
          address_p[0] = processHex(p[8], p[9]); // Fifth byte of the address
     83c:	f8 01       	movw	r30, r16
     83e:	60 89       	ldd	r22, Z+16	; 0x10
     840:	87 85       	ldd	r24, Z+15	; 0x0f
     842:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     846:	89 83       	std	Y+1, r24	; 0x01
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:158
          address_p[5] = 0x00; // Null terminate the string
     848:	1e 82       	std	Y+6, r1	; 0x06
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:159
          Serial.print("New Address: ");
     84a:	6d e2       	ldi	r22, 0x2D	; 45
     84c:	71 e0       	ldi	r23, 0x01	; 1
     84e:	87 e2       	ldi	r24, 0x27	; 39
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	0e 94 2b 10 	call	0x2056	; 0x2056 <Print::print(char const*)>
     856:	ce 01       	movw	r24, r28
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	7c 01       	movw	r14, r24
     85c:	5c 01       	movw	r10, r24
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:161 (discriminator 2)
          for (int i=0; i < 5; i++){
            Serial.print(address_p[i], HEX);
     85e:	f7 01       	movw	r30, r14
     860:	61 91       	ld	r22, Z+
     862:	7f 01       	movw	r14, r30
     864:	06 2e       	mov	r0, r22
     866:	00 0c       	add	r0, r0
     868:	77 0b       	sbc	r23, r23
     86a:	40 e1       	ldi	r20, 0x10	; 16
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	87 e2       	ldi	r24, 0x27	; 39
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <Print::print(int, int)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:160 (discriminator 2)
          address_p[2] = processHex(p[4], p[5]); // Third byte of the address
          address_p[1] = processHex(p[6], p[7]); // Fourth byte of the address
          address_p[0] = processHex(p[8], p[9]); // Fifth byte of the address
          address_p[5] = 0x00; // Null terminate the string
          Serial.print("New Address: ");
          for (int i=0; i < 5; i++){
     876:	ec 14       	cp	r14, r12
     878:	fd 04       	cpc	r15, r13
     87a:	89 f7       	brne	.-30     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:163
            Serial.print(address_p[i], HEX);
          }
          Serial.println();
     87c:	87 e2       	ldi	r24, 0x27	; 39
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	0e 94 3a 10 	call	0x2074	; 0x2074 <Print::println()>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:164
          if (globalErrorFlag){
     884:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <globalErrorFlag>
     888:	88 23       	and	r24, r24
     88a:	51 f0       	breq	.+20     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:166
            //If an error occured during the processing of the hex, don't change the address
            FAIL;
     88c:	6d e1       	ldi	r22, 0x1D	; 29
     88e:	71 e0       	ldi	r23, 0x01	; 1
     890:	87 e2       	ldi	r24, 0x27	; 39
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Print::println(char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:167
            digitalWrite(ERROR_LED, HIGH);
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	85 e0       	ldi	r24, 0x05	; 5
     89c:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:170
          }
          //If the processing is successful, copy the string into the global address
          strcpy(rx_address, address_p);
     8a0:	b5 01       	movw	r22, r10
     8a2:	86 e0       	ldi	r24, 0x06	; 6
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 71 14 	call	0x28e2	; 0x28e2 <strcpy>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:171
          strcpy(tx_address, address_p);
     8aa:	b5 01       	movw	r22, r10
     8ac:	8c e0       	ldi	r24, 0x0C	; 12
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <strcpy>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:172
          radio.closeReadingPipe(1); // Close the reading pipe before changing the address
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	84 e0       	ldi	r24, 0x04	; 4
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	0e 94 87 0a 	call	0x150e	; 0x150e <RF24::closeReadingPipe(unsigned char)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:173
          radio.openReadingPipe(1, (uint8_t*)rx_address);  //Reopen with the new address
     8be:	46 e0       	ldi	r20, 0x06	; 6
     8c0:	51 e0       	ldi	r21, 0x01	; 1
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	0e 94 3d 0a 	call	0x147a	; 0x147a <RF24::openReadingPipe(unsigned char, unsigned char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:174
          radio.openReadingPipe(0, (uint8_t*)tx_address);
     8cc:	4c e0       	ldi	r20, 0x0C	; 12
     8ce:	51 e0       	ldi	r21, 0x01	; 1
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	0e 94 3d 0a 	call	0x147a	; 0x147a <RF24::openReadingPipe(unsigned char, unsigned char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:175
          radio.openWritingPipe((uint8_t*)tx_address); //Changes the TX Address
     8da:	6c e0       	ldi	r22, 0x0C	; 12
     8dc:	71 e0       	ldi	r23, 0x01	; 1
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <RF24::openWritingPipe(unsigned char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:232
          strcpy(tx_address, address_p);
          radio.closeReadingPipe(1); // Close the reading pipe before changing the address
          radio.openWritingPipe((uint8_t*)tx_address); //Re-open the writing channel with new address
          radio.openReadingPipe(1, (uint8_t*)rx_address);  //Reopen with the old address
          radio.openReadingPipe(0, (uint8_t*)tx_address);
          radio.startListening();  // Start listening again
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	0e 94 a9 0a 	call	0x1552	; 0x1552 <RF24::startListening()>
     8ee:	7b cf       	rjmp	.-266    	; 0x7e6 <parseCommand(char*)+0xb0>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:179
          radio.openReadingPipe(0, (uint8_t*)tx_address);
          radio.openWritingPipe((uint8_t*)tx_address); //Changes the TX Address
          radio.startListening();  // Start listening again
          OK;
        }
        else if ( strncmp(data, "AT+RADD ", 8) == 0){
     8f0:	48 e0       	ldi	r20, 0x08	; 8
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	6b e3       	ldi	r22, 0x3B	; 59
     8f6:	71 e0       	ldi	r23, 0x01	; 1
     8f8:	c8 01       	movw	r24, r16
     8fa:	0e 94 78 14 	call	0x28f0	; 0x28f0 <strncmp>
     8fe:	89 2b       	or	r24, r25
     900:	09 f0       	breq	.+2      	; 0x904 <__stack+0x5>
     902:	41 c0       	rjmp	.+130    	; 0x986 <__stack+0x87>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:188
          // A T + R A D D _ [1][2][3][4][5][6][7][8][9][A]
          // 0 1 2 3 4 5 6 7  8  9  A  B  C  D  E  F  10 11
          //                  ^
          char address_p[6];
          //Order of bits are reversed since register wants LSB first
          address_p[4] = processHex(p[0], p[1]); // First byte of the address
     904:	f8 01       	movw	r30, r16
     906:	61 85       	ldd	r22, Z+9	; 0x09
     908:	80 85       	ldd	r24, Z+8	; 0x08
     90a:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     90e:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:189
          address_p[3] = processHex(p[2], p[3]); // Second byte of the address
     910:	f8 01       	movw	r30, r16
     912:	63 85       	ldd	r22, Z+11	; 0x0b
     914:	82 85       	ldd	r24, Z+10	; 0x0a
     916:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     91a:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:190
          address_p[2] = processHex(p[4], p[5]); // Third byte of the address
     91c:	f8 01       	movw	r30, r16
     91e:	65 85       	ldd	r22, Z+13	; 0x0d
     920:	84 85       	ldd	r24, Z+12	; 0x0c
     922:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     926:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:191
          address_p[1] = processHex(p[6], p[7]); // Fourth byte of the address
     928:	f8 01       	movw	r30, r16
     92a:	67 85       	ldd	r22, Z+15	; 0x0f
     92c:	86 85       	ldd	r24, Z+14	; 0x0e
     92e:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     932:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:192
          address_p[0] = processHex(p[8], p[9]); // Fifth byte of the address
     934:	f8 01       	movw	r30, r16
     936:	61 89       	ldd	r22, Z+17	; 0x11
     938:	80 89       	ldd	r24, Z+16	; 0x10
     93a:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     93e:	89 83       	std	Y+1, r24	; 0x01
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:193
          address_p[5] = 0x00; // Null terminate the string
     940:	1e 82       	std	Y+6, r1	; 0x06
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:194
          if (globalErrorFlag){
     942:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <globalErrorFlag>
     946:	88 23       	and	r24, r24
     948:	51 f0       	breq	.+20     	; 0x95e <__stack+0x5f>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:196
            //If an error occured during the processing of the hex, don't change the address
            FAIL;
     94a:	6d e1       	ldi	r22, 0x1D	; 29
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	87 e2       	ldi	r24, 0x27	; 39
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Print::println(char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:197
            digitalWrite(ERROR_LED, HIGH);
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	85 e0       	ldi	r24, 0x05	; 5
     95a:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:200
          }
          //If the processing is successful, copy the string into the global address
          strcpy(rx_address, address_p);
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	86 e0       	ldi	r24, 0x06	; 6
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	0e 94 71 14 	call	0x28e2	; 0x28e2 <strcpy>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:201
          radio.closeReadingPipe(1); // Close the reading pipe before changing the address
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0e 94 87 0a 	call	0x150e	; 0x150e <RF24::closeReadingPipe(unsigned char)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:202
          radio.openReadingPipe(1, (uint8_t*)rx_address);  //Reopen with the new address
     976:	46 e0       	ldi	r20, 0x06	; 6
     978:	51 e0       	ldi	r21, 0x01	; 1
     97a:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:231
          //If the processing is successful, copy the string into the global address
          strcpy(tx_address, address_p);
          radio.closeReadingPipe(1); // Close the reading pipe before changing the address
          radio.openWritingPipe((uint8_t*)tx_address); //Re-open the writing channel with new address
          radio.openReadingPipe(1, (uint8_t*)rx_address);  //Reopen with the old address
          radio.openReadingPipe(0, (uint8_t*)tx_address);
     97c:	84 e0       	ldi	r24, 0x04	; 4
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0e 94 3d 0a 	call	0x147a	; 0x147a <RF24::openReadingPipe(unsigned char, unsigned char const*)>
     984:	b0 cf       	rjmp	.-160    	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:206
          radio.closeReadingPipe(1); // Close the reading pipe before changing the address
          radio.openReadingPipe(1, (uint8_t*)rx_address);  //Reopen with the new address
          radio.startListening();  // Start listening again
          OK;
        }
        else if ( strncmp(data, "AT+TADD ", 8) == 0){
     986:	48 e0       	ldi	r20, 0x08	; 8
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	64 e4       	ldi	r22, 0x44	; 68
     98c:	71 e0       	ldi	r23, 0x01	; 1
     98e:	c8 01       	movw	r24, r16
     990:	0e 94 78 14 	call	0x28f0	; 0x28f0 <strncmp>
     994:	89 2b       	or	r24, r25
     996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x9b>
     998:	4a c0       	rjmp	.+148    	; 0xa2e <__stack+0x12f>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:215
          // A T + T A D D _ [1][2][3][4][5][6][7][8][9][A]
          // 0 1 2 3 4 5 6 7  8  9  A  B  C  D  E  F  10 11
          //                  ^
          char address_p[6];
          //Order of bits are reversed since register wants LSB first
          address_p[4] = processHex(p[0], p[1]); // First byte of the address
     99a:	f8 01       	movw	r30, r16
     99c:	61 85       	ldd	r22, Z+9	; 0x09
     99e:	80 85       	ldd	r24, Z+8	; 0x08
     9a0:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     9a4:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:216
          address_p[3] = processHex(p[2], p[3]); // Second byte of the address
     9a6:	f8 01       	movw	r30, r16
     9a8:	63 85       	ldd	r22, Z+11	; 0x0b
     9aa:	82 85       	ldd	r24, Z+10	; 0x0a
     9ac:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     9b0:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:217
          address_p[2] = processHex(p[4], p[5]); // Third byte of the address
     9b2:	f8 01       	movw	r30, r16
     9b4:	65 85       	ldd	r22, Z+13	; 0x0d
     9b6:	84 85       	ldd	r24, Z+12	; 0x0c
     9b8:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     9bc:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:218
          address_p[1] = processHex(p[6], p[7]); // Fourth byte of the address
     9be:	f8 01       	movw	r30, r16
     9c0:	67 85       	ldd	r22, Z+15	; 0x0f
     9c2:	86 85       	ldd	r24, Z+14	; 0x0e
     9c4:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     9c8:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:219
          address_p[0] = processHex(p[8], p[9]); // Fifth byte of the address
     9ca:	f8 01       	movw	r30, r16
     9cc:	61 89       	ldd	r22, Z+17	; 0x11
     9ce:	80 89       	ldd	r24, Z+16	; 0x10
     9d0:	0e 94 9c 02 	call	0x538	; 0x538 <processHex(unsigned char, unsigned char)>
     9d4:	89 83       	std	Y+1, r24	; 0x01
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:220
          address_p[5] = 0x00; // Null terminate the string
     9d6:	1e 82       	std	Y+6, r1	; 0x06
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:221
          if (globalErrorFlag){
     9d8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <globalErrorFlag>
     9dc:	88 23       	and	r24, r24
     9de:	51 f0       	breq	.+20     	; 0x9f4 <__stack+0xf5>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:223
            //If an error occured during the processing of the hex, don't change the address
            FAIL;
     9e0:	6d e1       	ldi	r22, 0x1D	; 29
     9e2:	71 e0       	ldi	r23, 0x01	; 1
     9e4:	87 e2       	ldi	r24, 0x27	; 39
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Print::println(char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:224
            digitalWrite(ERROR_LED, HIGH);
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	85 e0       	ldi	r24, 0x05	; 5
     9f0:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:227
          }
          //If the processing is successful, copy the string into the global address
          strcpy(tx_address, address_p);
     9f4:	be 01       	movw	r22, r28
     9f6:	6f 5f       	subi	r22, 0xFF	; 255
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	8c e0       	ldi	r24, 0x0C	; 12
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 71 14 	call	0x28e2	; 0x28e2 <strcpy>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:228
          radio.closeReadingPipe(1); // Close the reading pipe before changing the address
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e 94 87 0a 	call	0x150e	; 0x150e <RF24::closeReadingPipe(unsigned char)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:229
          radio.openWritingPipe((uint8_t*)tx_address); //Re-open the writing channel with new address
     a0c:	6c e0       	ldi	r22, 0x0C	; 12
     a0e:	71 e0       	ldi	r23, 0x01	; 1
     a10:	84 e0       	ldi	r24, 0x04	; 4
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	0e 94 0b 0a 	call	0x1416	; 0x1416 <RF24::openWritingPipe(unsigned char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:230
          radio.openReadingPipe(1, (uint8_t*)rx_address);  //Reopen with the old address
     a18:	46 e0       	ldi	r20, 0x06	; 6
     a1a:	51 e0       	ldi	r21, 0x01	; 1
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	0e 94 3d 0a 	call	0x147a	; 0x147a <RF24::openReadingPipe(unsigned char, unsigned char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:231
          radio.openReadingPipe(0, (uint8_t*)tx_address);
     a26:	4c e0       	ldi	r20, 0x0C	; 12
     a28:	51 e0       	ldi	r21, 0x01	; 1
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	a7 cf       	rjmp	.-178    	; 0x97c <__stack+0x7d>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:235
          radio.startListening();  // Start listening again
          OK;
        }
        else if ( strncmp(data, "AT+STATUS", 9) == 0){
     a2e:	49 e0       	ldi	r20, 0x09	; 9
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	6d e4       	ldi	r22, 0x4D	; 77
     a34:	71 e0       	ldi	r23, 0x01	; 1
     a36:	c8 01       	movw	r24, r16
     a38:	0e 94 78 14 	call	0x28f0	; 0x28f0 <strncmp>
     a3c:	89 2b       	or	r24, r25
     a3e:	39 f4       	brne	.+14     	; 0xa4e <__stack+0x14f>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:236
          printf_begin();
     a40:	0e 94 7d 02 	call	0x4fa	; 0x4fa <printf_begin()>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:237
          radio.printPrettyDetails(); // Prints relevant information about the radio
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	0e 94 77 0b 	call	0x16ee	; 0x16ee <RF24::printPrettyDetails()>
     a4c:	d2 ce       	rjmp	.-604    	; 0x7f2 <parseCommand(char*)+0xbc>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:239
        }
        else if ( strncmp(data, "AT0", 3) == 0 ){
     a4e:	43 e0       	ldi	r20, 0x03	; 3
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	67 e5       	ldi	r22, 0x57	; 87
     a54:	71 e0       	ldi	r23, 0x01	; 1
     a56:	c8 01       	movw	r24, r16
     a58:	0e 94 78 14 	call	0x28f0	; 0x28f0 <strncmp>
     a5c:	89 2b       	or	r24, r25
     a5e:	09 f0       	breq	.+2      	; 0xa62 <__stack+0x163>
     a60:	c8 ce       	rjmp	.-624    	; 0x7f2 <parseCommand(char*)+0xbc>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:240
          OK;
     a62:	62 e2       	ldi	r22, 0x22	; 34
     a64:	71 e0       	ldi	r23, 0x01	; 1
     a66:	87 e2       	ldi	r24, 0x27	; 39
     a68:	92 e0       	ldi	r25, 0x02	; 2
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:252
        //Reset the index to 0 to receive next message
        index = 0;
      }
    }
  }
}
     a6a:	26 96       	adiw	r28, 0x06	; 6
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:240
        else if ( strncmp(data, "AT+STATUS", 9) == 0){
          printf_begin();
          radio.printPrettyDetails(); // Prints relevant information about the radio
        }
        else if ( strncmp(data, "AT0", 3) == 0 ){
          OK;
     a8a:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <Print::println(char const*)>

00000a8e <loop>:
loop():
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:363

  

}  // setup

void loop() {
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	1f 92       	push	r1
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:370

  static unsigned long cmd_time;  //Stopwatch variable
  static unsigned long serial_time; // Time of last char received by serial port

  uint8_t pipe;
  if (radio.available(&pipe)) {              // is there a payload? get the pipe number that recieved it
     aa4:	be 01       	movw	r22, r28
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	84 e0       	ldi	r24, 0x04	; 4
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <RF24::available(unsigned char*)>
     ab2:	88 23       	and	r24, r24
     ab4:	b9 f0       	breq	.+46     	; 0xae4 <loop+0x56>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:372
    //Serial.print(F("Received "));
    uint8_t bytes = radio.getPayloadSize();  // get the size of the payload
     ab6:	84 e0       	ldi	r24, 0x04	; 4
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 27 09 	call	0x124e	; 0x124e <RF24::getPayloadSize()>
     abe:	18 2f       	mov	r17, r24
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:373
    radio.read(&payload, bytes);             // fetch payload from FIFO
     ac0:	48 2f       	mov	r20, r24
     ac2:	61 ee       	ldi	r22, 0xE1	; 225
     ac4:	71 e0       	ldi	r23, 0x01	; 1
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 fe 09 	call	0x13fc	; 0x13fc <RF24::read(void*, unsigned char)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:374
    payload[bytes+1] = '\0';
     ace:	e1 2f       	mov	r30, r17
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	ef 51       	subi	r30, 0x1F	; 31
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	11 82       	std	Z+1, r1	; 0x01
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:379
    //Serial.print(bytes);  // print the size of the payload
    //Serial.print(F(" bytes on pipe "));
    //Serial.print(pipe);  // print the pipe number
    //Serial.print(F(": "));
    Serial.print(payload);  // print the payload's value
     ad8:	61 ee       	ldi	r22, 0xE1	; 225
     ada:	71 e0       	ldi	r23, 0x01	; 1
     adc:	87 e2       	ldi	r24, 0x27	; 39
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 2b 10 	call	0x2056	; 0x2056 <Print::print(char const*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:383
  }


  if (Serial.available()) {
     ae4:	87 e2       	ldi	r24, 0x27	; 39
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <HardwareSerial::available()>
     aec:	89 2b       	or	r24, r25
     aee:	09 f4       	brne	.+2      	; 0xaf2 <loop+0x64>
     af0:	78 c0       	rjmp	.+240    	; 0xbe2 <loop+0x154>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:384
    serial_time = millis();  //update the last time a char was received
     af2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <millis>
     af6:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <loop::serial_time>
     afa:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <loop::serial_time+0x1>
     afe:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <loop::serial_time+0x2>
     b02:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <loop::serial_time+0x3>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:390

    // variable to keep track of how many command characters have been received
    static int command_count = 0;
    static bool command_mode = false;

    char c = Serial.read();
     b06:	87 e2       	ldi	r24, 0x27	; 39
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <HardwareSerial::read()>
     b0e:	18 2f       	mov	r17, r24
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:391
    data[index] = c;
     b10:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <index>
     b14:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <index+0x1>
     b18:	fc 01       	movw	r30, r24
     b1a:	ef 57       	subi	r30, 0x7F	; 127
     b1c:	fe 4f       	sbci	r31, 0xFE	; 254
     b1e:	10 83       	st	Z, r17
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:392
    index++; // Move pointer to next location
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <index+0x1>
     b26:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <index>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:394

    if (command_mode){
     b2a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <loop::command_mode>
     b2e:	88 23       	and	r24, r24
     b30:	79 f1       	breq	.+94     	; 0xb90 <loop+0x102>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:395
      if (millis() - cmd_time >= 1000 ){ // At least one second has elapsed 
     b32:	0e 94 68 11 	call	0x22d0	; 0x22d0 <millis>
     b36:	c0 90 7b 01 	lds	r12, 0x017B	; 0x80017b <loop::cmd_time>
     b3a:	d0 90 7c 01 	lds	r13, 0x017C	; 0x80017c <loop::cmd_time+0x1>
     b3e:	e0 90 7d 01 	lds	r14, 0x017D	; 0x80017d <loop::cmd_time+0x2>
     b42:	f0 90 7e 01 	lds	r15, 0x017E	; 0x80017e <loop::cmd_time+0x3>
     b46:	6c 19       	sub	r22, r12
     b48:	7d 09       	sbc	r23, r13
     b4a:	8e 09       	sbc	r24, r14
     b4c:	9f 09       	sbc	r25, r15
     b4e:	68 3e       	cpi	r22, 0xE8	; 232
     b50:	73 40       	sbci	r23, 0x03	; 3
     b52:	81 05       	cpc	r24, r1
     b54:	91 05       	cpc	r25, r1
     b56:	88 f0       	brcs	.+34     	; 0xb7a <loop+0xec>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:398
      //since the command escape sequence was received
        // Run function to process the AT Commands        
        if ( c == 'A'){  // If the next char isn't an A it is probably not meant to be a command message
     b58:	11 34       	cpi	r17, 0x41	; 65
     b5a:	79 f4       	brne	.+30     	; 0xb7a <loop+0xec>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:400
          //Serial.println("Entering Command Mode");
          parseCommand(data);
     b5c:	81 e8       	ldi	r24, 0x81	; 129
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 9b 03 	call	0x736	; 0x736 <parseCommand(char*)>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:401
          index = 0;
     b64:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <index+0x1>
     b68:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <index>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:402
          memset(data, '\0', sizeof(data)); //Clear the array of any stale data
     b6c:	e1 e8       	ldi	r30, 0x81	; 129
     b6e:	f1 e0       	ldi	r31, 0x01	; 1
     b70:	80 e6       	ldi	r24, 0x60	; 96
     b72:	df 01       	movw	r26, r30
     b74:	1d 92       	st	X+, r1
     b76:	8a 95       	dec	r24
     b78:	e9 f7       	brne	.-6      	; 0xb74 <loop+0xe6>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:406
          // Purge any data from the buffer since it will be used by the command parsing function
        }          
      }
      command_mode = false; //reset command flag
     b7a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <loop::command_mode>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:411
      command_count = 0;  // reset command count
    }


    if ( c == CMDCHAR ){
     b7e:	1b 32       	cpi	r17, 0x2B	; 43
     b80:	41 f5       	brne	.+80     	; 0xbd2 <loop+0x144>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:413
      // If we get the CMDCHAR 3 times in a row, enter control mode
      command_count++;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <loop::command_count+0x1>
     b8a:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <loop::command_count>
     b8e:	1a c0       	rjmp	.+52     	; 0xbc4 <loop+0x136>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:411
      command_mode = false; //reset command flag
      command_count = 0;  // reset command count
    }


    if ( c == CMDCHAR ){
     b90:	1b 32       	cpi	r17, 0x2B	; 43
     b92:	f9 f4       	brne	.+62     	; 0xbd2 <loop+0x144>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:413
      // If we get the CMDCHAR 3 times in a row, enter control mode
      command_count++;
     b94:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <loop::command_count>
     b98:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <loop::command_count+0x1>
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <loop::command_count+0x1>
     ba2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <loop::command_count>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:417
      //Serial.print("Got command ");
      //Serial.print(command_count, DEC);
      //Serial.println(" times.");
      if (command_count == 3){
     ba6:	03 97       	sbiw	r24, 0x03	; 3
     ba8:	69 f4       	brne	.+26     	; 0xbc4 <loop+0x136>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:419
        // listen for AT Commands
        cmd_time = millis();  //Keep track of the current time
     baa:	0e 94 68 11 	call	0x22d0	; 0x22d0 <millis>
     bae:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <loop::cmd_time>
     bb2:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <loop::cmd_time+0x1>
     bb6:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <loop::cmd_time+0x2>
     bba:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <loop::cmd_time+0x3>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:421

        command_mode = true;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <loop::command_mode>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:430 (discriminator 1)
    else{
      //
      command_count = 0;
    }
    
    if ( c == TERMCHAR || index >= MAXPAYLOAD){  
     bc4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <index>
     bc8:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <index+0x1>
     bcc:	80 97       	sbiw	r24, 0x20	; 32
     bce:	3c f4       	brge	.+14     	; 0xbde <loop+0x150>
     bd0:	08 c0       	rjmp	.+16     	; 0xbe2 <loop+0x154>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:427
        
      }
    }    
    else{
      //
      command_count = 0;
     bd2:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <loop::command_count+0x1>
     bd6:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <loop::command_count>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:430
    }
    
    if ( c == TERMCHAR || index >= MAXPAYLOAD){  
     bda:	1a 30       	cpi	r17, 0x0A	; 10
     bdc:	99 f7       	brne	.-26     	; 0xbc4 <loop+0x136>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:433
      // If the end of sequence char is received or of a full packet is available
      // Packetize data if needed
      txData();
     bde:	0e 94 b5 02 	call	0x56a	; 0x56a <txData()>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:441
    else{
      
    }
  }

  if (index != 0){
     be2:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <index>
     be6:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <index+0x1>
     bea:	89 2b       	or	r24, r25
     bec:	a9 f0       	breq	.+42     	; 0xc18 <loop+0x18a>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:443
    //If there is data in the queue
    if (millis() - serial_time > TIMEOUT ){
     bee:	0e 94 68 11 	call	0x22d0	; 0x22d0 <millis>
     bf2:	00 91 77 01 	lds	r16, 0x0177	; 0x800177 <loop::serial_time>
     bf6:	10 91 78 01 	lds	r17, 0x0178	; 0x800178 <loop::serial_time+0x1>
     bfa:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <loop::serial_time+0x2>
     bfe:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <loop::serial_time+0x3>
     c02:	60 1b       	sub	r22, r16
     c04:	71 0b       	sbc	r23, r17
     c06:	82 0b       	sbc	r24, r18
     c08:	93 0b       	sbc	r25, r19
     c0a:	65 3f       	cpi	r22, 0xF5	; 245
     c0c:	71 40       	sbci	r23, 0x01	; 1
     c0e:	81 05       	cpc	r24, r1
     c10:	91 05       	cpc	r25, r1
     c12:	10 f0       	brcs	.+4      	; 0xc18 <loop+0x18a>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:444
      txData(); // Transmit whatever is in the buffer if the timeout expires
     c14:	0e 94 b5 02 	call	0x56a	; 0x56a <txData()>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:448
    }
  }
  static unsigned long hb_timer = 0;
  if (millis() - hb_timer >= 2000){
     c18:	0e 94 68 11 	call	0x22d0	; 0x22d0 <millis>
     c1c:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <__data_end>
     c20:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <__data_end+0x1>
     c24:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <__data_end+0x2>
     c28:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <__data_end+0x3>
     c2c:	60 1b       	sub	r22, r16
     c2e:	71 0b       	sbc	r23, r17
     c30:	82 0b       	sbc	r24, r18
     c32:	93 0b       	sbc	r25, r19
     c34:	60 3d       	cpi	r22, 0xD0	; 208
     c36:	77 40       	sbci	r23, 0x07	; 7
     c38:	81 05       	cpc	r24, r1
     c3a:	91 05       	cpc	r25, r1
     c3c:	a0 f0       	brcs	.+40     	; 0xc66 <loop+0x1d8>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:449
    hb_timer = millis();
     c3e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <millis>
     c42:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <__data_end>
     c46:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <__data_end+0x1>
     c4a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end+0x2>
     c4e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x3>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:450
    digitalWrite(STATUS_LED, !digitalRead(STATUS_LED)); // Toggle status pin
     c52:	86 e0       	ldi	r24, 0x06	; 6
     c54:	0e 94 c9 12 	call	0x2592	; 0x2592 <digitalRead>
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	89 2b       	or	r24, r25
     c5c:	09 f0       	breq	.+2      	; 0xc60 <loop+0x1d2>
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\Documents\Arduino\nRF24L01_V2/nRF24L01_V2.ino:452
  }
}  // loop
     c66:	0f 90       	pop	r0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	08 95       	ret

00000c7a <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/printf.h:23
#define __PRINTF_H__

#if defined(ARDUINO_ARCH_AVR) || defined(__ARDUINO_X86__) || defined(ARDUINO_ARCH_MEGAAVR)

int serial_putc(char c, FILE*)
{
     c7a:	cf 93       	push	r28
     c7c:	c8 2f       	mov	r28, r24
_ZN14HardwareSerial5writeEi():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     c7e:	68 2f       	mov	r22, r24
     c80:	87 e2       	ldi	r24, 0x27	; 39
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/printf.h:26
    Serial.write(c);
    return c;
}
     c88:	8c 2f       	mov	r24, r28
     c8a:	cc 0f       	add	r28, r28
     c8c:	99 0b       	sbc	r25, r25
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
     c92:	cf 93       	push	r28
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:28
  uint8_t sreg = SREG;
     c94:	cf b7       	in	r28, 0x3f	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     c96:	f8 94       	cli
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:30
  if (!initialized) {
     c98:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <SPIClass::initialized>
     c9c:	81 11       	cpse	r24, r1
     c9e:	27 c0       	rjmp	.+78     	; 0xcee <SPIClass::begin()+0x5c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     ca0:	ed e6       	ldi	r30, 0x6D	; 109
     ca2:	f4 e0       	ldi	r31, 0x04	; 4
     ca4:	84 91       	lpm	r24, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
     ca6:	e2 e5       	ldi	r30, 0x52	; 82
     ca8:	f4 e0       	ldi	r31, 0x04	; 4
     caa:	94 91       	lpm	r25, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
     cac:	e8 2f       	mov	r30, r24
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	ea 56       	subi	r30, 0x6A	; 106
     cb6:	fb 4f       	sbci	r31, 0xFB	; 251
     cb8:	a5 91       	lpm	r26, Z+
     cba:	b4 91       	lpm	r27, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     cbc:	ec 91       	ld	r30, X
     cbe:	e9 23       	and	r30, r25
     cc0:	21 f4       	brne	.+8      	; 0xcca <SPIClass::begin()+0x38>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:39
      digitalWrite(SS, HIGH);
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	8a e0       	ldi	r24, 0x0A	; 10
     cc6:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	8a e0       	ldi	r24, 0x0A	; 10
     cce:	0e 94 5f 12 	call	0x24be	; 0x24be <pinMode>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     cd2:	8c b5       	in	r24, 0x2c	; 44
     cd4:	80 61       	ori	r24, 0x10	; 16
     cd6:	8c bd       	out	0x2c, r24	; 44
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:51
    SPCR |= _BV(SPE);
     cd8:	8c b5       	in	r24, 0x2c	; 44
     cda:	80 64       	ori	r24, 0x40	; 64
     cdc:	8c bd       	out	0x2c, r24	; 44
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	8d e0       	ldi	r24, 0x0D	; 13
     ce2:	0e 94 5f 12 	call	0x24be	; 0x24be <pinMode>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	8b e0       	ldi	r24, 0x0B	; 11
     cea:	0e 94 5f 12 	call	0x24be	; 0x24be <pinMode>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:62
  }
  initialized++; // reference count
     cee:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <SPIClass::initialized>
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <SPIClass::initialized>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:63
  SREG = sreg;
     cf8:	cf bf       	out	0x3f, r28	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\libraries\SPI\src/SPI.cpp:64
}
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1964
/****************************************************************************/

void RF24::disableCRC(void)
{
    config_reg = static_cast<uint8_t>(config_reg & ~_BV(EN_CRC));
    write_register(NRF_CONFIG, config_reg);
     cfe:	8e bd       	out	0x2e, r24	; 46
     d00:	00 00       	nop
     d02:	0d b4       	in	r0, 0x2d	; 45
     d04:	07 fe       	sbrs	r0, 7
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <SPIClass::transfer(unsigned char)+0x4>
     d08:	8e b5       	in	r24, 0x2e	; 46
     d0a:	08 95       	ret

00000d0c <RF24::csn(bool)>:
_ZN4RF243csnEb():
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	ec 01       	movw	r28, r24
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	0e 94 9b 12 	call	0x2536	; 0x2536 <digitalWrite>
     d18:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d1a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <delayMicroseconds>

00000d24 <RF24::ce(bool)>:
_ZN4RF242ceEb():
     d24:	fc 01       	movw	r30, r24
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	89 13       	cpse	r24, r25
     d2c:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <digitalWrite>
     d30:	08 95       	ret

00000d32 <RF24::beginTransaction()>:
_ZN4RF2416beginTransactionEv():
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	fc 01       	movw	r30, r24
     d38:	04 81       	ldd	r16, Z+4	; 0x04
     d3a:	15 81       	ldd	r17, Z+5	; 0x05
     d3c:	26 81       	ldd	r18, Z+6	; 0x06
     d3e:	37 81       	ldd	r19, Z+7	; 0x07
_ZN11SPISettings17init_AlwaysInlineEmhh():
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	52 e1       	ldi	r21, 0x12	; 18
     d44:	6a e7       	ldi	r22, 0x7A	; 122
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	04 17       	cp	r16, r20
     d4c:	15 07       	cpc	r17, r21
     d4e:	26 07       	cpc	r18, r22
     d50:	37 07       	cpc	r19, r23
     d52:	40 f4       	brcc	.+16     	; 0xd64 <RF24::beginTransaction()+0x32>
     d54:	76 95       	lsr	r23
     d56:	67 95       	ror	r22
     d58:	57 95       	ror	r21
     d5a:	47 95       	ror	r20
     d5c:	9f 5f       	subi	r25, 0xFF	; 255
     d5e:	96 30       	cpi	r25, 0x06	; 6
     d60:	a1 f7       	brne	.-24     	; 0xd4a <RF24::beginTransaction()+0x18>
     d62:	97 e0       	ldi	r25, 0x07	; 7
     d64:	39 2f       	mov	r19, r25
     d66:	30 6a       	ori	r19, 0xA0	; 160
     d68:	36 95       	lsr	r19
     d6a:	90 95       	com	r25
     d6c:	91 70       	andi	r25, 0x01	; 1
_ZN8SPIClass16beginTransactionE11SPISettings():
     d6e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <SPIClass::interruptMode>
     d72:	88 23       	and	r24, r24
     d74:	81 f0       	breq	.+32     	; 0xd96 <RF24::beginTransaction()+0x64>
     d76:	8f b7       	in	r24, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <SPIClass::interruptMode>
     d7e:	21 30       	cpi	r18, 0x01	; 1
     d80:	91 f4       	brne	.+36     	; 0xda6 <RF24::beginTransaction()+0x74>
     d82:	2d b3       	in	r18, 0x1d	; 29
     d84:	20 93 22 02 	sts	0x0222, r18	; 0x800222 <SPIClass::interruptSave>
     d88:	4d b3       	in	r20, 0x1d	; 29
     d8a:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <SPIClass::interruptMask>
     d8e:	20 95       	com	r18
     d90:	24 23       	and	r18, r20
     d92:	2d bb       	out	0x1d, r18	; 29
     d94:	8f bf       	out	0x3f, r24	; 63
     d96:	3c bd       	out	0x2c, r19	; 44
     d98:	9d bd       	out	0x2d, r25	; 45
_ZN4RF2416beginTransactionEv():
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	cf 01       	movw	r24, r30
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <RF24::csn(bool)>
_ZN8SPIClass16beginTransactionE11SPISettings():
     da6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <SPIClass::interruptSave>
     daa:	f5 cf       	rjmp	.-22     	; 0xd96 <RF24::beginTransaction()+0x64>

00000dac <RF24::endTransaction()>:
_ZN4RF2414endTransactionEv():
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	0e 94 86 06 	call	0xd0c	; 0xd0c <RF24::csn(bool)>
_ZN8SPIClass14endTransactionEv():
     db2:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <SPIClass::interruptMode>
     db6:	88 23       	and	r24, r24
     db8:	61 f0       	breq	.+24     	; 0xdd2 <RF24::endTransaction()+0x26>
     dba:	9f b7       	in	r25, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <SPIClass::interruptMode>
     dc2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <SPIClass::interruptSave>
     dc6:	21 30       	cpi	r18, 0x01	; 1
     dc8:	19 f4       	brne	.+6      	; 0xdd0 <RF24::endTransaction()+0x24>
     dca:	8d bb       	out	0x1d, r24	; 29
     dcc:	9f bf       	out	0x3f, r25	; 63
     dce:	08 95       	ret
     dd0:	8f bf       	out	0x3f, r24	; 63
_ZN4RF2414endTransactionEv():
     dd2:	08 95       	ret

00000dd4 <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>:
_ZN4RF2414write_registerEhhb():
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	ec 01       	movw	r28, r24
     ddc:	16 2f       	mov	r17, r22
     dde:	0e 94 99 06 	call	0xd32	; 0xd32 <RF24::beginTransaction()>
     de2:	81 2f       	mov	r24, r17
     de4:	80 62       	ori	r24, 0x20	; 32
     de6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     dea:	88 87       	std	Y+8, r24	; 0x08
     dec:	ce 01       	movw	r24, r28
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0c 94 d6 06 	jmp	0xdac	; 0xdac <RF24::endTransaction()>

00000df8 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>:
_ZN4RF2413read_registerEhPhh():
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	8c 01       	movw	r16, r24
     e08:	c6 2f       	mov	r28, r22
     e0a:	d4 2e       	mov	r13, r20
     e0c:	e5 2e       	mov	r14, r21
     e0e:	f2 2e       	mov	r15, r18
     e10:	0e 94 99 06 	call	0xd32	; 0xd32 <RF24::beginTransaction()>
     e14:	8c 2f       	mov	r24, r28
     e16:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     e1a:	f8 01       	movw	r30, r16
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	cd 2d       	mov	r28, r13
     e20:	de 2d       	mov	r29, r14
     e22:	fa 94       	dec	r15
     e24:	ff ef       	ldi	r31, 0xFF	; 255
     e26:	ff 16       	cp	r15, r31
     e28:	29 f0       	breq	.+10     	; 0xe34 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x3c>
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     e30:	89 93       	st	Y+, r24
     e32:	f7 cf       	rjmp	.-18     	; 0xe22 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x2a>
     e34:	c8 01       	movw	r24, r16
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	0c 94 d6 06 	jmp	0xdac	; 0xdac <RF24::endTransaction()>

00000e48 <RF24::read_register(unsigned char)>:
_ZN4RF2413read_registerEh():
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	ec 01       	movw	r28, r24
     e50:	16 2f       	mov	r17, r22
     e52:	0e 94 99 06 	call	0xd32	; 0xd32 <RF24::beginTransaction()>
     e56:	81 2f       	mov	r24, r17
     e58:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     e5c:	88 87       	std	Y+8, r24	; 0x08
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     e64:	18 2f       	mov	r17, r24
     e66:	ce 01       	movw	r24, r28
     e68:	0e 94 d6 06 	call	0xdac	; 0xdac <RF24::endTransaction()>
     e6c:	81 2f       	mov	r24, r17
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	08 95       	ret

00000e76 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>:
_ZN4RF2414write_registerEhPKhh():
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	8c 01       	movw	r16, r24
     e86:	c6 2f       	mov	r28, r22
     e88:	d4 2e       	mov	r13, r20
     e8a:	e5 2e       	mov	r14, r21
     e8c:	f2 2e       	mov	r15, r18
     e8e:	0e 94 99 06 	call	0xd32	; 0xd32 <RF24::beginTransaction()>
     e92:	8c 2f       	mov	r24, r28
     e94:	80 62       	ori	r24, 0x20	; 32
     e96:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     e9a:	f8 01       	movw	r30, r16
     e9c:	80 87       	std	Z+8, r24	; 0x08
     e9e:	cd 2d       	mov	r28, r13
     ea0:	de 2d       	mov	r29, r14
     ea2:	fa 94       	dec	r15
     ea4:	ff ef       	ldi	r31, 0xFF	; 255
     ea6:	ff 16       	cp	r15, r31
     ea8:	21 f0       	breq	.+8      	; 0xeb2 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)+0x3c>
     eaa:	89 91       	ld	r24, Y+
     eac:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     eb0:	f8 cf       	rjmp	.-16     	; 0xea2 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)+0x2c>
     eb2:	c8 01       	movw	r24, r16
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	0c 94 d6 06 	jmp	0xdac	; 0xdac <RF24::endTransaction()>

00000ec6 <RF24::write_register(unsigned char, unsigned char, bool)>:
_ZN4RF2414write_registerEhhb():
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	22 23       	and	r18, r18
     ed0:	31 f0       	breq	.+12     	; 0xede <RF24::write_register(unsigned char, unsigned char, bool)+0x18>
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>
     ede:	04 2f       	mov	r16, r20
     ee0:	16 2f       	mov	r17, r22
     ee2:	ec 01       	movw	r28, r24
     ee4:	0e 94 99 06 	call	0xd32	; 0xd32 <RF24::beginTransaction()>
     ee8:	81 2f       	mov	r24, r17
     eea:	80 62       	ori	r24, 0x20	; 32
     eec:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     ef0:	88 87       	std	Y+8, r24	; 0x08
     ef2:	80 2f       	mov	r24, r16
     ef4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     ef8:	ce 01       	movw	r24, r28
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	0c 94 d6 06 	jmp	0xdac	; 0xdac <RF24::endTransaction()>

00000f06 <RF24::write_payload(void const*, unsigned char, unsigned char)>:
_ZN4RF2413write_payloadEPKvhh():
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	8c 01       	movw	r16, r24
     f18:	6b 01       	movw	r12, r22
     f1a:	f2 2e       	mov	r15, r18
     f1c:	fc 01       	movw	r30, r24
     f1e:	84 89       	ldd	r24, Z+20	; 0x14
     f20:	81 11       	cpse	r24, r1
     f22:	17 c0       	rjmp	.+46     	; 0xf52 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x4c>
     f24:	c1 85       	ldd	r28, Z+9	; 0x09
     f26:	dc 2f       	mov	r29, r28
     f28:	4c 17       	cp	r20, r28
     f2a:	08 f4       	brcc	.+2      	; 0xf2e <RF24::write_payload(void const*, unsigned char, unsigned char)+0x28>
     f2c:	d4 2f       	mov	r29, r20
     f2e:	cd 1b       	sub	r28, r29
     f30:	c8 01       	movw	r24, r16
     f32:	0e 94 99 06 	call	0xd32	; 0xd32 <RF24::beginTransaction()>
     f36:	8f 2d       	mov	r24, r15
     f38:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     f3c:	f8 01       	movw	r30, r16
     f3e:	80 87       	std	Z+8, r24	; 0x08
     f40:	76 01       	movw	r14, r12
     f42:	d1 50       	subi	r29, 0x01	; 1
     f44:	70 f0       	brcs	.+28     	; 0xf62 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x5c>
     f46:	f7 01       	movw	r30, r14
     f48:	81 91       	ld	r24, Z+
     f4a:	7f 01       	movw	r14, r30
     f4c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     f50:	f8 cf       	rjmp	.-16     	; 0xf42 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x3c>
     f52:	c1 e0       	ldi	r28, 0x01	; 1
     f54:	41 11       	cpse	r20, r1
     f56:	c0 e0       	ldi	r28, 0x00	; 0
     f58:	d4 2f       	mov	r29, r20
     f5a:	41 32       	cpi	r20, 0x21	; 33
     f5c:	48 f3       	brcs	.-46     	; 0xf30 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x2a>
     f5e:	d0 e2       	ldi	r29, 0x20	; 32
     f60:	e7 cf       	rjmp	.-50     	; 0xf30 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x2a>
     f62:	c1 50       	subi	r28, 0x01	; 1
     f64:	20 f0       	brcs	.+8      	; 0xf6e <RF24::write_payload(void const*, unsigned char, unsigned char)+0x68>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     f6c:	fa cf       	rjmp	.-12     	; 0xf62 <RF24::write_payload(void const*, unsigned char, unsigned char)+0x5c>
     f6e:	c8 01       	movw	r24, r16
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	df 90       	pop	r13
     f7e:	cf 90       	pop	r12
     f80:	0c 94 d6 06 	jmp	0xdac	; 0xdac <RF24::endTransaction()>

00000f84 <RF24::read_payload(void*, unsigned char)>:
_ZN4RF2412read_payloadEPvh():
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	8c 01       	movw	r16, r24
     f96:	6b 01       	movw	r12, r22
     f98:	fc 01       	movw	r30, r24
     f9a:	84 89       	ldd	r24, Z+20	; 0x14
     f9c:	81 11       	cpse	r24, r1
     f9e:	18 c0       	rjmp	.+48     	; 0xfd0 <RF24::read_payload(void*, unsigned char)+0x4c>
     fa0:	c1 85       	ldd	r28, Z+9	; 0x09
     fa2:	dc 2f       	mov	r29, r28
     fa4:	4c 17       	cp	r20, r28
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <RF24::read_payload(void*, unsigned char)+0x26>
     fa8:	d4 2f       	mov	r29, r20
     faa:	cd 1b       	sub	r28, r29
     fac:	c8 01       	movw	r24, r16
     fae:	0e 94 99 06 	call	0xd32	; 0xd32 <RF24::beginTransaction()>
     fb2:	81 e6       	ldi	r24, 0x61	; 97
     fb4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     fb8:	f8 01       	movw	r30, r16
     fba:	80 87       	std	Z+8, r24	; 0x08
     fbc:	76 01       	movw	r14, r12
     fbe:	d1 50       	subi	r29, 0x01	; 1
     fc0:	68 f0       	brcs	.+26     	; 0xfdc <RF24::read_payload(void*, unsigned char)+0x58>
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     fc8:	f7 01       	movw	r30, r14
     fca:	81 93       	st	Z+, r24
     fcc:	7f 01       	movw	r14, r30
     fce:	f7 cf       	rjmp	.-18     	; 0xfbe <RF24::read_payload(void*, unsigned char)+0x3a>
     fd0:	d4 2f       	mov	r29, r20
     fd2:	41 32       	cpi	r20, 0x21	; 33
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <RF24::read_payload(void*, unsigned char)+0x54>
     fd6:	d0 e2       	ldi	r29, 0x20	; 32
     fd8:	c0 e0       	ldi	r28, 0x00	; 0
     fda:	e8 cf       	rjmp	.-48     	; 0xfac <RF24::read_payload(void*, unsigned char)+0x28>
     fdc:	c1 50       	subi	r28, 0x01	; 1
     fde:	20 f0       	brcs	.+8      	; 0xfe8 <RF24::read_payload(void*, unsigned char)+0x64>
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
     fe6:	fa cf       	rjmp	.-12     	; 0xfdc <RF24::read_payload(void*, unsigned char)+0x58>
     fe8:	c8 01       	movw	r24, r16
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	0c 94 d6 06 	jmp	0xdac	; 0xdac <RF24::endTransaction()>

00000ffe <RF24::flush_rx()>:
_ZN4RF248flush_rxEv():
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	ec 01       	movw	r28, r24
_ZN4RF2414write_registerEhhb():
    1004:	62 ee       	ldi	r22, 0xE2	; 226
    1006:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>
_ZN4RF248flush_rxEv():
    100a:	88 85       	ldd	r24, Y+8	; 0x08
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	08 95       	ret

00001012 <RF24::flush_tx()>:
_ZN4RF248flush_txEv():
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
_ZN4RF2414write_registerEhhb():
    1018:	61 ee       	ldi	r22, 0xE1	; 225
    101a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>
_ZN4RF248flush_txEv():
    101e:	88 85       	ldd	r24, Y+8	; 0x08
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <RF24::get_status()>:
_ZN4RF2410get_statusEv():
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
_ZN4RF2414write_registerEhhb():
    102c:	6f ef       	ldi	r22, 0xFF	; 255
    102e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <RF24::write_register(unsigned char, unsigned char, bool) [clone .part.1]>
_ZN4RF2410get_statusEv():
    1032:	88 85       	ldd	r24, Y+8	; 0x08
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <RF24::print_byte_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2419print_byte_registerEPKchh():
    103a:	cf 92       	push	r12
    103c:	df 92       	push	r13
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	6c 01       	movw	r12, r24
    104a:	c4 2f       	mov	r28, r20
    104c:	d2 2f       	mov	r29, r18
    104e:	7f 93       	push	r23
    1050:	6f 93       	push	r22
    1052:	88 e2       	ldi	r24, 0x28	; 40
    1054:	94 e0       	ldi	r25, 0x04	; 4
    1056:	9f 93       	push	r25
    1058:	8f 93       	push	r24
    105a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    105e:	dc 0f       	add	r29, r28
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	00 e2       	ldi	r16, 0x20	; 32
    106a:	14 e0       	ldi	r17, 0x04	; 4
    106c:	cd 17       	cp	r28, r29
    106e:	99 f0       	breq	.+38     	; 0x1096 <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x5c>
    1070:	ff 24       	eor	r15, r15
    1072:	f3 94       	inc	r15
    1074:	fc 0e       	add	r15, r28
    1076:	6c 2f       	mov	r22, r28
    1078:	c6 01       	movw	r24, r12
    107a:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    107e:	1f 92       	push	r1
    1080:	8f 93       	push	r24
    1082:	1f 93       	push	r17
    1084:	0f 93       	push	r16
    1086:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 2d       	mov	r28, r15
    1094:	eb cf       	rjmp	.-42     	; 0x106c <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x32>
    1096:	8d e1       	ldi	r24, 0x1D	; 29
    1098:	94 e0       	ldi	r25, 0x04	; 4
    109a:	9f 93       	push	r25
    109c:	8f 93       	push	r24
    109e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	ff 90       	pop	r15
    10b0:	df 90       	pop	r13
    10b2:	cf 90       	pop	r12
    10b4:	08 95       	ret

000010b6 <RF24::print_address_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2422print_address_registerEPKchh():
    10b6:	8f 92       	push	r8
    10b8:	9f 92       	push	r9
    10ba:	af 92       	push	r10
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	8c 01       	movw	r16, r24
    10d0:	c4 2f       	mov	r28, r20
    10d2:	92 2e       	mov	r9, r18
    10d4:	7f 93       	push	r23
    10d6:	6f 93       	push	r22
    10d8:	88 e1       	ldi	r24, 0x18	; 24
    10da:	94 e0       	ldi	r25, 0x04	; 4
    10dc:	9f 93       	push	r25
    10de:	8f 93       	push	r24
    10e0:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    10e4:	9c 0e       	add	r9, r28
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	84 e1       	ldi	r24, 0x14	; 20
    10f0:	e8 2e       	mov	r14, r24
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	f8 2e       	mov	r15, r24
    10f6:	9f e0       	ldi	r25, 0x0F	; 15
    10f8:	c9 2e       	mov	r12, r25
    10fa:	94 e0       	ldi	r25, 0x04	; 4
    10fc:	d9 2e       	mov	r13, r25
    10fe:	9c 16       	cp	r9, r28
    1100:	a1 f1       	breq	.+104    	; 0x116a <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xb4>
    1102:	f8 01       	movw	r30, r16
    1104:	83 89       	ldd	r24, Z+19	; 0x13
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 18 11 	call	0x2230	; 0x2230 <operator new[](unsigned int)>
    110c:	5c 01       	movw	r10, r24
    110e:	88 24       	eor	r8, r8
    1110:	83 94       	inc	r8
    1112:	8c 0e       	add	r8, r28
    1114:	6c 2f       	mov	r22, r28
    1116:	6f 71       	andi	r22, 0x1F	; 31
    1118:	f8 01       	movw	r30, r16
    111a:	23 89       	ldd	r18, Z+19	; 0x13
    111c:	ac 01       	movw	r20, r24
    111e:	c8 01       	movw	r24, r16
    1120:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <RF24::read_register(unsigned char, unsigned char*, unsigned char)>
    1124:	ff 92       	push	r15
    1126:	ef 92       	push	r14
    1128:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    112c:	f8 01       	movw	r30, r16
    112e:	c3 89       	ldd	r28, Z+19	; 0x13
    1130:	ca 0d       	add	r28, r10
    1132:	db 2d       	mov	r29, r11
    1134:	d1 1d       	adc	r29, r1
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	21 97       	sbiw	r28, 0x01	; 1
    113c:	ca 15       	cp	r28, r10
    113e:	db 05       	cpc	r29, r11
    1140:	60 f0       	brcs	.+24     	; 0x115a <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xa4>
    1142:	88 81       	ld	r24, Y
    1144:	1f 92       	push	r1
    1146:	8f 93       	push	r24
    1148:	df 92       	push	r13
    114a:	cf 92       	push	r12
    114c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	f0 cf       	rjmp	.-32     	; 0x113a <RF24::print_address_register(char const*, unsigned char, unsigned char)+0x84>
    115a:	a1 14       	cp	r10, r1
    115c:	b1 04       	cpc	r11, r1
    115e:	19 f0       	breq	.+6      	; 0x1166 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xb0>
    1160:	c5 01       	movw	r24, r10
    1162:	0e 94 1c 11 	call	0x2238	; 0x2238 <operator delete[](void*)>
    1166:	c8 2d       	mov	r28, r8
    1168:	ca cf       	rjmp	.-108    	; 0x10fe <RF24::print_address_register(char const*, unsigned char, unsigned char)+0x48>
    116a:	8c e0       	ldi	r24, 0x0C	; 12
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	9f 93       	push	r25
    1170:	8f 93       	push	r24
    1172:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	bf 90       	pop	r11
    118c:	af 90       	pop	r10
    118e:	9f 90       	pop	r9
    1190:	8f 90       	pop	r8
    1192:	08 95       	ret

00001194 <RF24::_init_obj()>:
_ZN4RF249_init_objEv():
    1194:	fc 01       	movw	r30, r24
    1196:	86 e2       	ldi	r24, 0x26	; 38
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	80 83       	st	Z, r24
    119e:	12 86       	std	Z+10, r1	; 0x0a
    11a0:	84 81       	ldd	r24, Z+4	; 0x04
    11a2:	95 81       	ldd	r25, Z+5	; 0x05
    11a4:	a6 81       	ldd	r26, Z+6	; 0x06
    11a6:	b7 81       	ldd	r27, Z+7	; 0x07
    11a8:	89 3b       	cpi	r24, 0xB9	; 185
    11aa:	98 48       	sbci	r25, 0x88	; 136
    11ac:	a1 05       	cpc	r26, r1
    11ae:	b1 05       	cpc	r27, r1
    11b0:	40 f4       	brcc	.+16     	; 0x11c2 <RF24::_init_obj()+0x2e>
    11b2:	80 e8       	ldi	r24, 0x80	; 128
    11b4:	96 e9       	ldi	r25, 0x96	; 150
    11b6:	a8 e9       	ldi	r26, 0x98	; 152
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	84 83       	std	Z+4, r24	; 0x04
    11bc:	95 83       	std	Z+5, r25	; 0x05
    11be:	a6 83       	std	Z+6, r26	; 0x06
    11c0:	b7 83       	std	Z+7, r27	; 0x07
    11c2:	08 95       	ret

000011c4 <RF24::RF24(unsigned char, unsigned char, unsigned long)>:
_ZN4RF24C2Ehhm():
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	fc 01       	movw	r30, r24
    11ca:	62 83       	std	Z+2, r22	; 0x02
    11cc:	43 83       	std	Z+3, r20	; 0x03
    11ce:	04 83       	std	Z+4, r16	; 0x04
    11d0:	15 83       	std	Z+5, r17	; 0x05
    11d2:	26 83       	std	Z+6, r18	; 0x06
    11d4:	37 83       	std	Z+7, r19	; 0x07
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	81 87       	std	Z+9, r24	; 0x09
    11da:	10 8a       	std	Z+16, r1	; 0x10
    11dc:	11 8a       	std	Z+17, r1	; 0x11
    11de:	85 e0       	ldi	r24, 0x05	; 5
    11e0:	83 8b       	std	Z+19, r24	; 0x13
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	84 8b       	std	Z+20, r24	; 0x14
    11e6:	85 e0       	ldi	r24, 0x05	; 5
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	82 8f       	std	Z+26, r24	; 0x1a
    11f0:	93 8f       	std	Z+27, r25	; 0x1b
    11f2:	a4 8f       	std	Z+28, r26	; 0x1c
    11f4:	b5 8f       	std	Z+29, r27	; 0x1d
    11f6:	cf 01       	movw	r24, r30
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <RF24::_init_obj()>

00001200 <RF24::setChannel(unsigned char)>:
_ZN4RF2410setChannelEh():
    1200:	46 2f       	mov	r20, r22
    1202:	6d 37       	cpi	r22, 0x7D	; 125
    1204:	08 f0       	brcs	.+2      	; 0x1208 <RF24::setChannel(unsigned char)+0x8>
    1206:	4d e7       	ldi	r20, 0x7D	; 125
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	65 e0       	ldi	r22, 0x05	; 5
    120c:	0c 94 63 07 	jmp	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>

00001210 <RF24::getChannel()>:
_ZN4RF2410getChannelEv():
    1210:	65 e0       	ldi	r22, 0x05	; 5
    1212:	0c 94 24 07 	jmp	0xe48	; 0xe48 <RF24::read_register(unsigned char)>

00001216 <RF24::setPayloadSize(unsigned char)>:
_ZN4RF2414setPayloadSizeEh():
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	8c 01       	movw	r16, r24
    121e:	66 23       	and	r22, r22
    1220:	a1 f0       	breq	.+40     	; 0x124a <RF24::setPayloadSize(unsigned char)+0x34>
    1222:	61 32       	cpi	r22, 0x21	; 33
    1224:	08 f0       	brcs	.+2      	; 0x1228 <RF24::setPayloadSize(unsigned char)+0x12>
    1226:	60 e2       	ldi	r22, 0x20	; 32
    1228:	f8 01       	movw	r30, r16
    122a:	61 87       	std	Z+9, r22	; 0x09
    122c:	c1 e1       	ldi	r28, 0x11	; 17
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	f8 01       	movw	r30, r16
    1232:	41 85       	ldd	r20, Z+9	; 0x09
    1234:	6c 2f       	mov	r22, r28
    1236:	c8 01       	movw	r24, r16
    1238:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    123c:	cf 5f       	subi	r28, 0xFF	; 255
    123e:	c7 31       	cpi	r28, 0x17	; 23
    1240:	b1 f7       	brne	.-20     	; 0x122e <RF24::setPayloadSize(unsigned char)+0x18>
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	08 95       	ret
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	ed cf       	rjmp	.-38     	; 0x1228 <RF24::setPayloadSize(unsigned char)+0x12>

0000124e <RF24::getPayloadSize()>:
_ZN4RF2414getPayloadSizeEv():
    124e:	fc 01       	movw	r30, r24
    1250:	81 85       	ldd	r24, Z+9	; 0x09
    1252:	08 95       	ret

00001254 <RF24::isValid()>:
_ZN4RF247isValidEv():
    1254:	fc 01       	movw	r30, r24
    1256:	82 81       	ldd	r24, Z+2	; 0x02
    1258:	8f 3f       	cpi	r24, 0xFF	; 255
    125a:	21 f0       	breq	.+8      	; 0x1264 <RF24::isValid()+0x10>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	9f 3f       	cpi	r25, 0xFF	; 255
    1262:	09 f4       	brne	.+2      	; 0x1266 <RF24::isValid()+0x12>
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	08 95       	ret

00001268 <RF24::_init_pins()>:
_ZN4RF2410_init_pinsEv():
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	ec 01       	movw	r28, r24
    1270:	0e 94 2a 09 	call	0x1254	; 0x1254 <RF24::isValid()>
    1274:	18 2f       	mov	r17, r24
    1276:	88 23       	and	r24, r24
    1278:	99 f0       	breq	.+38     	; 0x12a0 <RF24::_init_pins()+0x38>
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	89 17       	cp	r24, r25
    1280:	39 f0       	breq	.+14     	; 0x1290 <RF24::_init_pins()+0x28>
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	0e 94 5f 12 	call	0x24be	; 0x24be <pinMode>
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	0e 94 5f 12 	call	0x24be	; 0x24be <pinMode>
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	ce 01       	movw	r24, r28
    1294:	0e 94 92 06 	call	0xd24	; 0xd24 <RF24::ce(bool)>
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	ce 01       	movw	r24, r28
    129c:	0e 94 86 06 	call	0xd0c	; 0xd0c <RF24::csn(bool)>
    12a0:	81 2f       	mov	r24, r17
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	08 95       	ret

000012aa <RF24::stopListening()>:
_ZN4RF2413stopListeningEv():
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	ec 01       	movw	r28, r24
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	0e 94 92 06 	call	0xd24	; 0xd24 <RF24::ce(bool)>
    12b6:	8e 89       	ldd	r24, Y+22	; 0x16
    12b8:	9f 89       	ldd	r25, Y+23	; 0x17
    12ba:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <delayMicroseconds>
    12be:	8a 89       	ldd	r24, Y+18	; 0x12
    12c0:	88 23       	and	r24, r24
    12c2:	19 f0       	breq	.+6      	; 0x12ca <RF24::stopListening()+0x20>
    12c4:	ce 01       	movw	r24, r28
    12c6:	0e 94 09 08 	call	0x1012	; 0x1012 <RF24::flush_tx()>
    12ca:	4f 85       	ldd	r20, Y+15	; 0x0f
    12cc:	4e 7f       	andi	r20, 0xFE	; 254
    12ce:	4f 87       	std	Y+15, r20	; 0x0f
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	ce 01       	movw	r24, r28
    12d6:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    12da:	62 e0       	ldi	r22, 0x02	; 2
    12dc:	ce 01       	movw	r24, r28
    12de:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    12e2:	e6 e1       	ldi	r30, 0x16	; 22
    12e4:	f1 e0       	ldi	r31, 0x01	; 1
    12e6:	e4 91       	lpm	r30, Z
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <RF24::stopListening()+0x46>
    12ee:	44 0f       	add	r20, r20
    12f0:	ea 95       	dec	r30
    12f2:	ea f7       	brpl	.-6      	; 0x12ee <RF24::stopListening()+0x44>
    12f4:	48 2b       	or	r20, r24
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	ce 01       	movw	r24, r28
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	0c 94 63 07 	jmp	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>

00001304 <RF24::powerUp()>:
_ZN4RF247powerUpEv():
    1304:	fc 01       	movw	r30, r24
    1306:	47 85       	ldd	r20, Z+15	; 0x0f
    1308:	41 fd       	sbrc	r20, 1
    130a:	0a c0       	rjmp	.+20     	; 0x1320 <RF24::powerUp()+0x1c>
    130c:	42 60       	ori	r20, 0x02	; 2
    130e:	47 87       	std	Z+15, r20	; 0x0f
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    1318:	88 e8       	ldi	r24, 0x88	; 136
    131a:	93 e1       	ldi	r25, 0x13	; 19
    131c:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <delayMicroseconds>
    1320:	08 95       	ret

00001322 <RF24::startFastWrite(void const*, unsigned char, bool, bool)>:
_ZN4RF2414startFastWriteEPKvhbb():
    1322:	0f 93       	push	r16
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	ec 01       	movw	r28, r24
    132a:	21 11       	cpse	r18, r1
    132c:	0d c0       	rjmp	.+26     	; 0x1348 <RF24::startFastWrite(void const*, unsigned char, bool, bool)+0x26>
    132e:	20 ea       	ldi	r18, 0xA0	; 160
    1330:	ce 01       	movw	r24, r28
    1332:	0e 94 83 07 	call	0xf06	; 0xf06 <RF24::write_payload(void const*, unsigned char, unsigned char)>
    1336:	00 23       	and	r16, r16
    1338:	49 f0       	breq	.+18     	; 0x134c <RF24::startFastWrite(void const*, unsigned char, bool, bool)+0x2a>
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	ce 01       	movw	r24, r28
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	0f 91       	pop	r16
    1344:	0c 94 92 06 	jmp	0xd24	; 0xd24 <RF24::ce(bool)>
    1348:	20 eb       	ldi	r18, 0xB0	; 176
    134a:	f2 cf       	rjmp	.-28     	; 0x1330 <RF24::startFastWrite(void const*, unsigned char, bool, bool)+0xe>
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <RF24::write(void const*, unsigned char, bool)>:
_ZN4RF245writeEPKvhb():
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	ec 01       	movw	r28, r24
    1364:	01 e0       	ldi	r16, 0x01	; 1
    1366:	0e 94 91 09 	call	0x1322	; 0x1322 <RF24::startFastWrite(void const*, unsigned char, bool, bool)>
    136a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <millis>
    136e:	6b 01       	movw	r12, r22
    1370:	7c 01       	movw	r14, r24
    1372:	ce 01       	movw	r24, r28
    1374:	0e 94 13 08 	call	0x1026	; 0x1026 <RF24::get_status()>
    1378:	80 73       	andi	r24, 0x30	; 48
    137a:	b1 f4       	brne	.+44     	; 0x13a8 <RF24::write(void const*, unsigned char, bool)+0x54>
    137c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <millis>
    1380:	6c 19       	sub	r22, r12
    1382:	7d 09       	sbc	r23, r13
    1384:	8e 09       	sbc	r24, r14
    1386:	9f 09       	sbc	r25, r15
    1388:	60 36       	cpi	r22, 0x60	; 96
    138a:	71 05       	cpc	r23, r1
    138c:	81 05       	cpc	r24, r1
    138e:	91 05       	cpc	r25, r1
    1390:	80 f3       	brcs	.-32     	; 0x1372 <RF24::write(void const*, unsigned char, bool)+0x1e>
_ZN4RF249errNotifyEv():
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	8d 8b       	std	Y+21, r24	; 0x15
_ZN4RF245writeEPKvhb():
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	08 95       	ret
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	ce 01       	movw	r24, r28
    13ac:	0e 94 92 06 	call	0xd24	; 0xd24 <RF24::ce(bool)>
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	40 e7       	ldi	r20, 0x70	; 112
    13b4:	67 e0       	ldi	r22, 0x07	; 7
    13b6:	ce 01       	movw	r24, r28
    13b8:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    13bc:	88 85       	ldd	r24, Y+8	; 0x08
    13be:	84 ff       	sbrs	r24, 4
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <RF24::write(void const*, unsigned char, bool)+0x76>
    13c2:	ce 01       	movw	r24, r28
    13c4:	0e 94 09 08 	call	0x1012	; 0x1012 <RF24::flush_tx()>
    13c8:	e6 cf       	rjmp	.-52     	; 0x1396 <RF24::write(void const*, unsigned char, bool)+0x42>
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	e5 cf       	rjmp	.-54     	; 0x1398 <RF24::write(void const*, unsigned char, bool)+0x44>

000013ce <RF24::write(void const*, unsigned char)>:
_ZN4RF245writeEPKvh():
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <RF24::write(void const*, unsigned char, bool)>

000013d4 <RF24::available(unsigned char*)>:
_ZN4RF249availableEPh():
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	eb 01       	movw	r28, r22
    13da:	0e 94 13 08 	call	0x1026	; 0x1026 <RF24::get_status()>
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	95 95       	asr	r25
    13e2:	87 95       	ror	r24
    13e4:	87 70       	andi	r24, 0x07	; 7
    13e6:	86 30       	cpi	r24, 0x06	; 6
    13e8:	28 f4       	brcc	.+10     	; 0x13f4 <RF24::available(unsigned char*)+0x20>
    13ea:	20 97       	sbiw	r28, 0x00	; 0
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <RF24::available(unsigned char*)+0x1c>
    13ee:	88 83       	st	Y, r24
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <RF24::available(unsigned char*)+0x22>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <RF24::read(void*, unsigned char)>:
_ZN4RF244readEPvh():
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	ec 01       	movw	r28, r24
    1402:	0e 94 c2 07 	call	0xf84	; 0xf84 <RF24::read_payload(void*, unsigned char)>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	40 e4       	ldi	r20, 0x40	; 64
    140a:	67 e0       	ldi	r22, 0x07	; 7
    140c:	ce 01       	movw	r24, r28
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	0c 94 63 07 	jmp	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>

00001416 <RF24::openWritingPipe(unsigned char const*)>:
_ZN4RF2415openWritingPipeEPKh():
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	ec 01       	movw	r28, r24
    1420:	8b 01       	movw	r16, r22
    1422:	2b 89       	ldd	r18, Y+19	; 0x13
    1424:	ab 01       	movw	r20, r22
    1426:	6a e0       	ldi	r22, 0x0A	; 10
    1428:	0e 94 3b 07 	call	0xe76	; 0xe76 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>
    142c:	2b 89       	ldd	r18, Y+19	; 0x13
    142e:	a8 01       	movw	r20, r16
    1430:	60 e1       	ldi	r22, 0x10	; 16
    1432:	ce 01       	movw	r24, r28
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>

00001440 <RF24::setAddressWidth(unsigned char)>:
_ZN4RF2415setAddressWidthEh():
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	8c 01       	movw	r16, r24
    1448:	ce ef       	ldi	r28, 0xFE	; 254
    144a:	c6 0f       	add	r28, r22
    144c:	69 f0       	breq	.+26     	; 0x1468 <RF24::setAddressWidth(unsigned char)+0x28>
    144e:	c3 70       	andi	r28, 0x03	; 3
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	4c 2f       	mov	r20, r28
    1454:	63 e0       	ldi	r22, 0x03	; 3
    1456:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    145a:	ce 5f       	subi	r28, 0xFE	; 254
    145c:	f8 01       	movw	r30, r16
    145e:	c3 8b       	std	Z+19, r28	; 0x13
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	63 e0       	ldi	r22, 0x03	; 3
    146e:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	f8 01       	movw	r30, r16
    1476:	83 8b       	std	Z+19, r24	; 0x13
    1478:	f3 cf       	rjmp	.-26     	; 0x1460 <RF24::setAddressWidth(unsigned char)+0x20>

0000147a <RF24::openReadingPipe(unsigned char, unsigned char const*)>:
_ZN4RF2415openReadingPipeEhPKh():
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	8c 01       	movw	r16, r24
    1486:	c6 2f       	mov	r28, r22
    1488:	7a 01       	movw	r14, r20
    148a:	61 11       	cpse	r22, r1
    148c:	2f c0       	rjmp	.+94     	; 0x14ec <RF24::openReadingPipe(unsigned char, unsigned char const*)+0x72>
    148e:	fc 01       	movw	r30, r24
    1490:	43 89       	ldd	r20, Z+19	; 0x13
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	b7 01       	movw	r22, r14
    1496:	0a 96       	adiw	r24, 0x0a	; 10
    1498:	0e 94 68 14 	call	0x28d0	; 0x28d0 <memcpy>
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	f8 01       	movw	r30, r16
    14a0:	81 8b       	std	Z+17, r24	; 0x11
    14a2:	ec 2f       	mov	r30, r28
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	e0 5f       	subi	r30, 0xF0	; 240
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	64 91       	lpm	r22, Z
    14ac:	f8 01       	movw	r30, r16
    14ae:	23 89       	ldd	r18, Z+19	; 0x13
    14b0:	a7 01       	movw	r20, r14
    14b2:	c8 01       	movw	r24, r16
    14b4:	0e 94 3b 07 	call	0xe76	; 0xe76 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>
    14b8:	62 e0       	ldi	r22, 0x02	; 2
    14ba:	c8 01       	movw	r24, r16
    14bc:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    14c0:	ec 2f       	mov	r30, r28
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	ea 5e       	subi	r30, 0xEA	; 234
    14c6:	fe 4f       	sbci	r31, 0xFE	; 254
    14c8:	e4 91       	lpm	r30, Z
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <RF24::openReadingPipe(unsigned char, unsigned char const*)+0x58>
    14d0:	44 0f       	add	r20, r20
    14d2:	ea 95       	dec	r30
    14d4:	ea f7       	brpl	.-6      	; 0x14d0 <RF24::openReadingPipe(unsigned char, unsigned char const*)+0x56>
    14d6:	48 2b       	or	r20, r24
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	62 e0       	ldi	r22, 0x02	; 2
    14dc:	c8 01       	movw	r24, r16
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	0c 94 63 07 	jmp	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    14ec:	66 30       	cpi	r22, 0x06	; 6
    14ee:	48 f4       	brcc	.+18     	; 0x1502 <RF24::openReadingPipe(unsigned char, unsigned char const*)+0x88>
    14f0:	e6 2f       	mov	r30, r22
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	e0 5f       	subi	r30, 0xF0	; 240
    14f6:	fe 4f       	sbci	r31, 0xFE	; 254
    14f8:	61 30       	cpi	r22, 0x01	; 1
    14fa:	99 f2       	breq	.-90     	; 0x14a2 <RF24::openReadingPipe(unsigned char, unsigned char const*)+0x28>
    14fc:	64 91       	lpm	r22, Z
    14fe:	21 e0       	ldi	r18, 0x01	; 1
    1500:	d7 cf       	rjmp	.-82     	; 0x14b0 <RF24::openReadingPipe(unsigned char, unsigned char const*)+0x36>
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	08 95       	ret

0000150e <RF24::closeReadingPipe(unsigned char)>:
_ZN4RF2416closeReadingPipeEh():
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	ec 01       	movw	r28, r24
    1516:	16 2f       	mov	r17, r22
    1518:	62 e0       	ldi	r22, 0x02	; 2
    151a:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    151e:	e1 2f       	mov	r30, r17
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	ea 5e       	subi	r30, 0xEA	; 234
    1524:	fe 4f       	sbci	r31, 0xFE	; 254
    1526:	e4 91       	lpm	r30, Z
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <RF24::closeReadingPipe(unsigned char)+0x22>
    152e:	22 0f       	add	r18, r18
    1530:	ea 95       	dec	r30
    1532:	ea f7       	brpl	.-6      	; 0x152e <RF24::closeReadingPipe(unsigned char)+0x20>
    1534:	20 95       	com	r18
    1536:	42 2f       	mov	r20, r18
    1538:	48 23       	and	r20, r24
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	62 e0       	ldi	r22, 0x02	; 2
    153e:	ce 01       	movw	r24, r28
    1540:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    1544:	11 11       	cpse	r17, r1
    1546:	01 c0       	rjmp	.+2      	; 0x154a <RF24::closeReadingPipe(unsigned char)+0x3c>
    1548:	19 8a       	std	Y+17, r1	; 0x11
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	08 95       	ret

00001552 <RF24::startListening()>:
_ZN4RF2414startListeningEv():
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	ec 01       	movw	r28, r24
    1558:	0e 94 82 09 	call	0x1304	; 0x1304 <RF24::powerUp()>
    155c:	4f 85       	ldd	r20, Y+15	; 0x0f
    155e:	41 60       	ori	r20, 0x01	; 1
    1560:	4f 87       	std	Y+15, r20	; 0x0f
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	ce 01       	movw	r24, r28
    1568:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	40 e7       	ldi	r20, 0x70	; 112
    1570:	67 e0       	ldi	r22, 0x07	; 7
    1572:	ce 01       	movw	r24, r28
    1574:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	ce 01       	movw	r24, r28
    157c:	0e 94 92 06 	call	0xd24	; 0xd24 <RF24::ce(bool)>
    1580:	89 89       	ldd	r24, Y+17	; 0x11
    1582:	88 23       	and	r24, r24
    1584:	51 f0       	breq	.+20     	; 0x159a <RF24::startListening()+0x48>
    1586:	ae 01       	movw	r20, r28
    1588:	46 5f       	subi	r20, 0xF6	; 246
    158a:	5f 4f       	sbci	r21, 0xFF	; 255
    158c:	2b 89       	ldd	r18, Y+19	; 0x13
    158e:	6a e0       	ldi	r22, 0x0A	; 10
    1590:	ce 01       	movw	r24, r28
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <RF24::write_register(unsigned char, unsigned char const*, unsigned char)>
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	ce 01       	movw	r24, r28
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	0c 94 87 0a 	jmp	0x150e	; 0x150e <RF24::closeReadingPipe(unsigned char)>

000015a6 <RF24::toggle_features()>:
_ZN4RF2415toggle_featuresEv():
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	ec 01       	movw	r28, r24
    15ac:	0e 94 99 06 	call	0xd32	; 0xd32 <RF24::beginTransaction()>
    15b0:	80 e5       	ldi	r24, 0x50	; 80
    15b2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
    15b6:	88 87       	std	Y+8, r24	; 0x08
    15b8:	83 e7       	ldi	r24, 0x73	; 115
    15ba:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIClass::transfer(unsigned char)>
    15be:	ce 01       	movw	r24, r28
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	0c 94 d6 06 	jmp	0xdac	; 0xdac <RF24::endTransaction()>

000015c8 <RF24::setPALevel(unsigned char, bool)>:
_ZN4RF2410setPALevelEhb():
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	8c 01       	movw	r16, r24
    15d2:	c6 2f       	mov	r28, r22
    15d4:	d4 2f       	mov	r29, r20
    15d6:	66 e0       	ldi	r22, 0x06	; 6
    15d8:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    15dc:	88 7f       	andi	r24, 0xF8	; 248
_ZN4RF2419_pa_level_reg_valueEhb():
    15de:	4c 2f       	mov	r20, r28
    15e0:	c4 30       	cpi	r28, 0x04	; 4
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <RF24::setPALevel(unsigned char, bool)+0x1e>
    15e4:	43 e0       	ldi	r20, 0x03	; 3
    15e6:	44 0f       	add	r20, r20
    15e8:	4d 0f       	add	r20, r29
_ZN4RF2410setPALevelEhb():
    15ea:	48 2b       	or	r20, r24
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	66 e0       	ldi	r22, 0x06	; 6
    15f0:	c8 01       	movw	r24, r16
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	0c 94 63 07 	jmp	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>

000015fe <RF24::getPALevel()>:
_ZN4RF2410getPALevelEv():
    15fe:	66 e0       	ldi	r22, 0x06	; 6
    1600:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	95 95       	asr	r25
    1608:	87 95       	ror	r24
    160a:	83 70       	andi	r24, 0x03	; 3
    160c:	08 95       	ret

0000160e <RF24::setDataRate(rf24_datarate_e)>:
_ZN4RF2411setDataRateE15rf24_datarate_e():
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	ec 01       	movw	r28, r24
    1618:	8b 01       	movw	r16, r22
    161a:	66 e0       	ldi	r22, 0x06	; 6
    161c:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    1620:	87 7d       	andi	r24, 0xD7	; 215
_ZN4RF2420_data_rate_reg_valueE15rf24_datarate_e():
    1622:	02 30       	cpi	r16, 0x02	; 2
    1624:	11 05       	cpc	r17, r1
    1626:	e9 f4       	brne	.+58     	; 0x1662 <RF24::setDataRate(rf24_datarate_e)+0x54>
    1628:	4b e9       	ldi	r20, 0x9B	; 155
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	4e 8b       	std	Y+22, r20	; 0x16
    1632:	5f 8b       	std	Y+23, r21	; 0x17
    1634:	68 8f       	std	Y+24, r22	; 0x18
    1636:	79 8f       	std	Y+25, r23	; 0x19
    1638:	10 e2       	ldi	r17, 0x20	; 32
_ZN4RF2411setDataRateE15rf24_datarate_e():
    163a:	18 2b       	or	r17, r24
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	41 2f       	mov	r20, r17
    1640:	66 e0       	ldi	r22, 0x06	; 6
    1642:	ce 01       	movw	r24, r28
    1644:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
    1648:	66 e0       	ldi	r22, 0x06	; 6
    164a:	ce 01       	movw	r24, r28
    164c:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	81 13       	cpse	r24, r17
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	89 2f       	mov	r24, r25
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret
_ZN4RF2420_data_rate_reg_valueE15rf24_datarate_e():
    1662:	01 30       	cpi	r16, 0x01	; 1
    1664:	11 05       	cpc	r17, r1
    1666:	51 f0       	breq	.+20     	; 0x167c <RF24::setDataRate(rf24_datarate_e)+0x6e>
    1668:	45 e5       	ldi	r20, 0x55	; 85
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	4e 8b       	std	Y+22, r20	; 0x16
    1672:	5f 8b       	std	Y+23, r21	; 0x17
    1674:	68 8f       	std	Y+24, r22	; 0x18
    1676:	79 8f       	std	Y+25, r23	; 0x19
    1678:	10 e0       	ldi	r17, 0x00	; 0
    167a:	df cf       	rjmp	.-66     	; 0x163a <RF24::setDataRate(rf24_datarate_e)+0x2c>
    167c:	41 e4       	ldi	r20, 0x41	; 65
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	4e 8b       	std	Y+22, r20	; 0x16
    1686:	5f 8b       	std	Y+23, r21	; 0x17
    1688:	68 8f       	std	Y+24, r22	; 0x18
    168a:	79 8f       	std	Y+25, r23	; 0x19
    168c:	18 e0       	ldi	r17, 0x08	; 8
    168e:	d5 cf       	rjmp	.-86     	; 0x163a <RF24::setDataRate(rf24_datarate_e)+0x2c>

00001690 <RF24::getDataRate()>:
_ZN4RF2411getDataRateEv():
    1690:	66 e0       	ldi	r22, 0x06	; 6
    1692:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    1696:	28 2f       	mov	r18, r24
    1698:	28 72       	andi	r18, 0x28	; 40
    169a:	20 32       	cpi	r18, 0x20	; 32
    169c:	31 f0       	breq	.+12     	; 0x16aa <RF24::getDataRate()+0x1a>
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	28 30       	cpi	r18, 0x08	; 8
    16a4:	21 f0       	breq	.+8      	; 0x16ae <RF24::getDataRate()+0x1e>
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	08 95       	ret
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	08 95       	ret

000016b0 <RF24::getCRCLength()>:
_ZN4RF2412getCRCLengthEv():
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	ec 01       	movw	r28, r24
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    16be:	18 2f       	mov	r17, r24
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	ce 01       	movw	r24, r28
    16c4:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    16c8:	8f 87       	std	Y+15, r24	; 0x0f
    16ca:	83 fd       	sbrc	r24, 3
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <RF24::getCRCLength()+0x22>
    16ce:	11 23       	and	r17, r17
    16d0:	41 f0       	breq	.+16     	; 0x16e2 <RF24::getCRCLength()+0x32>
    16d2:	82 fd       	sbrc	r24, 2
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <RF24::getCRCLength()+0x38>
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	08 95       	ret
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	f9 cf       	rjmp	.-14     	; 0x16da <RF24::getCRCLength()+0x2a>
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	f6 cf       	rjmp	.-20     	; 0x16da <RF24::getCRCLength()+0x2a>

000016ee <RF24::printPrettyDetails()>:
_ZN4RF2418printPrettyDetailsEv():
    16ee:	bf 92       	push	r11
    16f0:	cf 92       	push	r12
    16f2:	df 92       	push	r13
    16f4:	ef 92       	push	r14
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	ec 01       	movw	r28, r24
    1702:	6c 81       	ldd	r22, Y+4	; 0x04
    1704:	7d 81       	ldd	r23, Y+5	; 0x05
    1706:	8e 81       	ldd	r24, Y+6	; 0x06
    1708:	9f 81       	ldd	r25, Y+7	; 0x07
    170a:	20 e4       	ldi	r18, 0x40	; 64
    170c:	32 e4       	ldi	r19, 0x42	; 66
    170e:	4f e0       	ldi	r20, 0x0F	; 15
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    1716:	1f 92       	push	r1
    1718:	2f 93       	push	r18
    171a:	8c e3       	ldi	r24, 0x3C	; 60
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	9f 93       	push	r25
    1720:	8f 93       	push	r24
    1722:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1726:	ce 01       	movw	r24, r28
    1728:	0e 94 08 09 	call	0x1210	; 0x1210 <RF24::getChannel()>
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	20 5a       	subi	r18, 0xA0	; 160
    1732:	36 4f       	sbci	r19, 0xF6	; 246
    1734:	3f 93       	push	r19
    1736:	2f 93       	push	r18
    1738:	1f 92       	push	r1
    173a:	8f 93       	push	r24
    173c:	80 e2       	ldi	r24, 0x20	; 32
    173e:	93 e0       	ldi	r25, 0x03	; 3
    1740:	9f 93       	push	r25
    1742:	8f 93       	push	r24
    1744:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1748:	e8 89       	ldd	r30, Y+16	; 0x10
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	ee 52       	subi	r30, 0x2E	; 46
    1752:	fc 4f       	sbci	r31, 0xFC	; 252
    1754:	85 91       	lpm	r24, Z+
    1756:	94 91       	lpm	r25, Z
    1758:	9f 93       	push	r25
    175a:	8f 93       	push	r24
    175c:	81 e1       	ldi	r24, 0x11	; 17
    175e:	93 e0       	ldi	r25, 0x03	; 3
    1760:	9f 93       	push	r25
    1762:	8f 93       	push	r24
    1764:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1768:	ce 01       	movw	r24, r28
    176a:	0e 94 48 0b 	call	0x1690	; 0x1690 <RF24::getDataRate()>
    176e:	fc 01       	movw	r30, r24
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	e7 51       	subi	r30, 0x17	; 23
    1776:	fc 4f       	sbci	r31, 0xFC	; 252
    1778:	85 91       	lpm	r24, Z+
    177a:	94 91       	lpm	r25, Z
    177c:	9f 93       	push	r25
    177e:	8f 93       	push	r24
    1780:	8e ef       	ldi	r24, 0xFE	; 254
    1782:	92 e0       	ldi	r25, 0x02	; 2
    1784:	9f 93       	push	r25
    1786:	8f 93       	push	r24
    1788:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    178c:	ce 01       	movw	r24, r28
    178e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <RF24::getPALevel()>
    1792:	e8 2f       	mov	r30, r24
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	ee 0f       	add	r30, r30
    1798:	ff 1f       	adc	r31, r31
    179a:	ef 57       	subi	r30, 0x7F	; 127
    179c:	fc 4f       	sbci	r31, 0xFC	; 252
    179e:	85 91       	lpm	r24, Z+
    17a0:	94 91       	lpm	r25, Z
    17a2:	9f 93       	push	r25
    17a4:	8f 93       	push	r24
    17a6:	86 ee       	ldi	r24, 0xE6	; 230
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	9f 93       	push	r25
    17ac:	8f 93       	push	r24
    17ae:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    17b2:	66 e0       	ldi	r22, 0x06	; 6
    17b4:	ce 01       	movw	r24, r28
    17b6:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    17ba:	08 2f       	mov	r16, r24
    17bc:	01 70       	andi	r16, 0x01	; 1
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	f8 01       	movw	r30, r16
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	eb 5a       	subi	r30, 0xAB	; 171
    17c8:	fc 4f       	sbci	r31, 0xFC	; 252
    17ca:	85 91       	lpm	r24, Z+
    17cc:	94 91       	lpm	r25, Z
    17ce:	9f 93       	push	r25
    17d0:	8f 93       	push	r24
    17d2:	8a ec       	ldi	r24, 0xCA	; 202
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	9f 93       	push	r25
    17d8:	8f 93       	push	r24
    17da:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    17de:	ce 01       	movw	r24, r28
    17e0:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <RF24::getCRCLength()>
    17e4:	fc 01       	movw	r30, r24
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	e2 55       	subi	r30, 0x52	; 82
    17ec:	fc 4f       	sbci	r31, 0xFC	; 252
    17ee:	85 91       	lpm	r24, Z+
    17f0:	94 91       	lpm	r25, Z
    17f2:	9f 93       	push	r25
    17f4:	8f 93       	push	r24
    17f6:	89 eb       	ldi	r24, 0xB9	; 185
    17f8:	92 e0       	ldi	r25, 0x02	; 2
    17fa:	9f 93       	push	r25
    17fc:	8f 93       	push	r24
    17fe:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1802:	63 e0       	ldi	r22, 0x03	; 3
    1804:	ce 01       	movw	r24, r28
    1806:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    180a:	83 70       	andi	r24, 0x03	; 3
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 96       	adiw	r24, 0x02	; 2
    1810:	9f 93       	push	r25
    1812:	8f 93       	push	r24
    1814:	8c e9       	ldi	r24, 0x9C	; 156
    1816:	92 e0       	ldi	r25, 0x02	; 2
    1818:	9f 93       	push	r25
    181a:	8f 93       	push	r24
    181c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1820:	2d b7       	in	r18, 0x3d	; 61
    1822:	3e b7       	in	r19, 0x3e	; 62
    1824:	2e 5d       	subi	r18, 0xDE	; 222
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	3e bf       	out	0x3e, r19	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	2d bf       	out	0x3d, r18	; 61
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	1f 92       	push	r1
    1836:	8f 93       	push	r24
    1838:	89 e7       	ldi	r24, 0x79	; 121
    183a:	92 e0       	ldi	r25, 0x02	; 2
    183c:	9f 93       	push	r25
    183e:	8f 93       	push	r24
    1840:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1844:	64 e0       	ldi	r22, 0x04	; 4
    1846:	ce 01       	movw	r24, r28
    1848:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    184c:	18 2f       	mov	r17, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	b4 e0       	ldi	r27, 0x04	; 4
    1852:	95 95       	asr	r25
    1854:	87 95       	ror	r24
    1856:	ba 95       	dec	r27
    1858:	e1 f7       	brne	.-8      	; 0x1852 <RF24::printPrettyDetails()+0x164>
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	4a ef       	ldi	r20, 0xFA	; 250
    185e:	48 9f       	mul	r20, r24
    1860:	90 01       	movw	r18, r0
    1862:	49 9f       	mul	r20, r25
    1864:	30 0d       	add	r19, r0
    1866:	11 24       	eor	r1, r1
    1868:	3f 93       	push	r19
    186a:	2f 93       	push	r18
    186c:	84 e5       	ldi	r24, 0x54	; 84
    186e:	92 e0       	ldi	r25, 0x02	; 2
    1870:	9f 93       	push	r25
    1872:	8f 93       	push	r24
    1874:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1878:	1f 70       	andi	r17, 0x0F	; 15
    187a:	1f 92       	push	r1
    187c:	1f 93       	push	r17
    187e:	81 e3       	ldi	r24, 0x31	; 49
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	9f 93       	push	r25
    1884:	8f 93       	push	r24
    1886:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    188a:	68 e0       	ldi	r22, 0x08	; 8
    188c:	ce 01       	movw	r24, r28
    188e:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    1892:	18 2f       	mov	r17, r24
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	04 e0       	ldi	r16, 0x04	; 4
    1898:	95 95       	asr	r25
    189a:	87 95       	ror	r24
    189c:	0a 95       	dec	r16
    189e:	e1 f7       	brne	.-8      	; 0x1898 <RF24::printPrettyDetails()+0x1aa>
    18a0:	9f 93       	push	r25
    18a2:	8f 93       	push	r24
    18a4:	86 e0       	ldi	r24, 0x06	; 6
    18a6:	92 e0       	ldi	r25, 0x02	; 2
    18a8:	9f 93       	push	r25
    18aa:	8f 93       	push	r24
    18ac:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    18b0:	1f 70       	andi	r17, 0x0F	; 15
    18b2:	1f 92       	push	r1
    18b4:	1f 93       	push	r17
    18b6:	81 ed       	ldi	r24, 0xD1	; 209
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	9f 93       	push	r25
    18bc:	8f 93       	push	r24
    18be:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    18c2:	6d e1       	ldi	r22, 0x1D	; 29
    18c4:	ce 01       	movw	r24, r28
    18c6:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    18ca:	18 2f       	mov	r17, r24
    18cc:	34 e0       	ldi	r19, 0x04	; 4
    18ce:	83 9f       	mul	r24, r19
    18d0:	f0 01       	movw	r30, r0
    18d2:	11 24       	eor	r1, r1
    18d4:	e4 70       	andi	r30, 0x04	; 4
    18d6:	ff 27       	eor	r31, r31
    18d8:	eb 5a       	subi	r30, 0xAB	; 171
    18da:	fc 4f       	sbci	r31, 0xFC	; 252
    18dc:	85 91       	lpm	r24, Z+
    18de:	94 91       	lpm	r25, Z
    18e0:	9f 93       	push	r25
    18e2:	8f 93       	push	r24
    18e4:	81 ec       	ldi	r24, 0xC1	; 193
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	9f 93       	push	r25
    18ea:	8f 93       	push	r24
    18ec:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    18f0:	11 fb       	bst	r17, 1
    18f2:	ee 24       	eor	r14, r14
    18f4:	e0 f8       	bld	r14, 0
    18f6:	f1 2c       	mov	r15, r1
    18f8:	f7 01       	movw	r30, r14
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	eb 5a       	subi	r30, 0xAB	; 171
    1900:	fc 4f       	sbci	r31, 0xFC	; 252
    1902:	85 91       	lpm	r24, Z+
    1904:	94 91       	lpm	r25, Z
    1906:	9f 93       	push	r25
    1908:	8f 93       	push	r24
    190a:	89 ea       	ldi	r24, 0xA9	; 169
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	9f 93       	push	r25
    1910:	8f 93       	push	r24
    1912:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1916:	6c e1       	ldi	r22, 0x1C	; 28
    1918:	ce 01       	movw	r24, r28
    191a:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    191e:	2d b7       	in	r18, 0x3d	; 61
    1920:	3e b7       	in	r19, 0x3e	; 62
    1922:	24 5e       	subi	r18, 0xE4	; 228
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	3e bf       	out	0x3e, r19	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	2d bf       	out	0x3d, r18	; 61
    1930:	12 fb       	bst	r17, 2
    1932:	ee 27       	eor	r30, r30
    1934:	e0 f9       	bld	r30, 0
    1936:	81 11       	cpse	r24, r1
    1938:	01 c0       	rjmp	.+2      	; 0x193c <RF24::printPrettyDetails()+0x24e>
    193a:	e0 e0       	ldi	r30, 0x00	; 0
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	ee 0f       	add	r30, r30
    1940:	ff 1f       	adc	r31, r31
    1942:	eb 5a       	subi	r30, 0xAB	; 171
    1944:	fc 4f       	sbci	r31, 0xFC	; 252
    1946:	85 91       	lpm	r24, Z+
    1948:	94 91       	lpm	r25, Z
    194a:	9f 93       	push	r25
    194c:	8f 93       	push	r24
    194e:	83 e9       	ldi	r24, 0x93	; 147
    1950:	91 e0       	ldi	r25, 0x01	; 1
    1952:	9f 93       	push	r25
    1954:	8f 93       	push	r24
    1956:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	ce 01       	movw	r24, r28
    195e:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	8f 33       	cpi	r24, 0x3F	; 63
    196c:	11 f0       	breq	.+4      	; 0x1972 <RF24::printPrettyDetails()+0x284>
    196e:	81 11       	cpse	r24, r1
    1970:	77 c0       	rjmp	.+238    	; 0x1a60 <RF24::printPrettyDetails()+0x372>
    1972:	e1 e0       	ldi	r30, 0x01	; 1
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	81 11       	cpse	r24, r1
    1978:	02 c0       	rjmp	.+4      	; 0x197e <RF24::printPrettyDetails()+0x290>
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	e0 e0       	ldi	r30, 0x00	; 0
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	eb 5a       	subi	r30, 0xAB	; 171
    1984:	fc 4f       	sbci	r31, 0xFC	; 252
    1986:	85 91       	lpm	r24, Z+
    1988:	94 91       	lpm	r25, Z
    198a:	9f 93       	push	r25
    198c:	8f 93       	push	r24
    198e:	8a e7       	ldi	r24, 0x7A	; 122
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	9f 93       	push	r25
    1994:	8f 93       	push	r24
    1996:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	ce 01       	movw	r24, r28
    19a6:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    19aa:	8f 87       	std	Y+15, r24	; 0x0f
    19ac:	80 ff       	sbrs	r24, 0
    19ae:	87 c0       	rjmp	.+270    	; 0x1abe <RF24::printPrettyDetails()+0x3d0>
    19b0:	82 e5       	ldi	r24, 0x52	; 82
    19b2:	1f 92       	push	r1
    19b4:	8f 93       	push	r24
    19b6:	8d e3       	ldi	r24, 0x3D	; 61
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	9f 93       	push	r25
    19bc:	8f 93       	push	r24
    19be:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    19c2:	21 e0       	ldi	r18, 0x01	; 1
    19c4:	40 e1       	ldi	r20, 0x10	; 16
    19c6:	61 e3       	ldi	r22, 0x31	; 49
    19c8:	71 e0       	ldi	r23, 0x01	; 1
    19ca:	ce 01       	movw	r24, r28
    19cc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RF24::print_address_register(char const*, unsigned char, unsigned char)>
    19d0:	62 e0       	ldi	r22, 0x02	; 2
    19d2:	ce 01       	movw	r24, r28
    19d4:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	10 e0       	ldi	r17, 0x00	; 0
    19e2:	00 e0       	ldi	r16, 0x00	; 0
    19e4:	e8 2e       	mov	r14, r24
    19e6:	f1 2c       	mov	r15, r1
    19e8:	9e e1       	ldi	r25, 0x1E	; 30
    19ea:	c9 2e       	mov	r12, r25
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	d9 2e       	mov	r13, r25
    19f0:	f7 01       	movw	r30, r14
    19f2:	00 2e       	mov	r0, r16
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <RF24::printPrettyDetails()+0x30c>
    19f6:	f5 95       	asr	r31
    19f8:	e7 95       	ror	r30
    19fa:	0a 94       	dec	r0
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <RF24::printPrettyDetails()+0x308>
    19fe:	e1 70       	andi	r30, 0x01	; 1
    1a00:	ff 27       	eor	r31, r31
    1a02:	33 96       	adiw	r30, 0x03	; 3
    1a04:	ee 0f       	add	r30, r30
    1a06:	ff 1f       	adc	r31, r31
    1a08:	eb 5a       	subi	r30, 0xAB	; 171
    1a0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a0c:	85 91       	lpm	r24, Z+
    1a0e:	94 91       	lpm	r25, Z
    1a10:	9f 93       	push	r25
    1a12:	8f 93       	push	r24
    1a14:	1f 93       	push	r17
    1a16:	0f 93       	push	r16
    1a18:	df 92       	push	r13
    1a1a:	cf 92       	push	r12
    1a1c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1a20:	4a e0       	ldi	r20, 0x0A	; 10
    1a22:	40 0f       	add	r20, r16
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	21 e0       	ldi	r18, 0x01	; 1
    1a32:	02 30       	cpi	r16, 0x02	; 2
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <RF24::printPrettyDetails()+0x34a>
    1a36:	45 c0       	rjmp	.+138    	; 0x1ac2 <RF24::printPrettyDetails()+0x3d4>
    1a38:	6d e1       	ldi	r22, 0x1D	; 29
    1a3a:	71 e0       	ldi	r23, 0x01	; 1
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <RF24::print_address_register(char const*, unsigned char, unsigned char)>
    1a42:	0f 5f       	subi	r16, 0xFF	; 255
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	06 30       	cpi	r16, 0x06	; 6
    1a48:	11 05       	cpc	r17, r1
    1a4a:	91 f6       	brne	.-92     	; 0x19f0 <RF24::printPrettyDetails()+0x302>
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	ff 90       	pop	r15
    1a56:	ef 90       	pop	r14
    1a58:	df 90       	pop	r13
    1a5a:	cf 90       	pop	r12
    1a5c:	bf 90       	pop	r11
    1a5e:	08 95       	ret
    1a60:	51 e3       	ldi	r21, 0x31	; 49
    1a62:	80 ff       	sbrs	r24, 0
    1a64:	50 e3       	ldi	r21, 0x30	; 48
    1a66:	41 e3       	ldi	r20, 0x31	; 49
    1a68:	81 ff       	sbrs	r24, 1
    1a6a:	40 e3       	ldi	r20, 0x30	; 48
    1a6c:	31 e3       	ldi	r19, 0x31	; 49
    1a6e:	82 ff       	sbrs	r24, 2
    1a70:	30 e3       	ldi	r19, 0x30	; 48
    1a72:	21 e3       	ldi	r18, 0x31	; 49
    1a74:	83 ff       	sbrs	r24, 3
    1a76:	20 e3       	ldi	r18, 0x30	; 48
    1a78:	91 e3       	ldi	r25, 0x31	; 49
    1a7a:	84 ff       	sbrs	r24, 4
    1a7c:	90 e3       	ldi	r25, 0x30	; 48
    1a7e:	85 ff       	sbrs	r24, 5
    1a80:	1c c0       	rjmp	.+56     	; 0x1aba <RF24::printPrettyDetails()+0x3cc>
    1a82:	81 e3       	ldi	r24, 0x31	; 49
    1a84:	1f 92       	push	r1
    1a86:	5f 93       	push	r21
    1a88:	1f 92       	push	r1
    1a8a:	4f 93       	push	r20
    1a8c:	1f 92       	push	r1
    1a8e:	3f 93       	push	r19
    1a90:	1f 92       	push	r1
    1a92:	2f 93       	push	r18
    1a94:	1f 92       	push	r1
    1a96:	9f 93       	push	r25
    1a98:	1f 92       	push	r1
    1a9a:	8f 93       	push	r24
    1a9c:	83 e5       	ldi	r24, 0x53	; 83
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	9f 93       	push	r25
    1aa2:	8f 93       	push	r24
    1aa4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf_P>
    1aa8:	8d b7       	in	r24, 0x3d	; 61
    1aaa:	9e b7       	in	r25, 0x3e	; 62
    1aac:	0e 96       	adiw	r24, 0x0e	; 14
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	9e bf       	out	0x3e, r25	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	8d bf       	out	0x3d, r24	; 61
    1ab8:	74 cf       	rjmp	.-280    	; 0x19a2 <RF24::printPrettyDetails()+0x2b4>
    1aba:	80 e3       	ldi	r24, 0x30	; 48
    1abc:	e3 cf       	rjmp	.-58     	; 0x1a84 <RF24::printPrettyDetails()+0x396>
    1abe:	84 e5       	ldi	r24, 0x54	; 84
    1ac0:	78 cf       	rjmp	.-272    	; 0x19b2 <RF24::printPrettyDetails()+0x2c4>
    1ac2:	6c e1       	ldi	r22, 0x1C	; 28
    1ac4:	71 e0       	ldi	r23, 0x01	; 1
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	0e 94 1d 08 	call	0x103a	; 0x103a <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
    1acc:	ba cf       	rjmp	.-140    	; 0x1a42 <RF24::printPrettyDetails()+0x354>

00001ace <RF24::setRetries(unsigned char, unsigned char)>:
_ZN4RF2410setRetriesEhh():
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1970
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
    write_register(SETUP_RETR, static_cast<uint8_t>(rf24_min(15, delay) << ARD | rf24_min(15, count)));
    1ace:	60 31       	cpi	r22, 0x10	; 16
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <RF24::setRetries(unsigned char, unsigned char)+0x6>
    1ad2:	6f e0       	ldi	r22, 0x0F	; 15
    1ad4:	20 e1       	ldi	r18, 0x10	; 16
    1ad6:	62 9f       	mul	r22, r18
    1ad8:	b0 01       	movw	r22, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	40 31       	cpi	r20, 0x10	; 16
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <RF24::setRetries(unsigned char, unsigned char)+0x14>
    1ae0:	4f e0       	ldi	r20, 0x0F	; 15
    1ae2:	46 2b       	or	r20, r22
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	64 e0       	ldi	r22, 0x04	; 4
    1ae8:	0c 94 63 07 	jmp	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>

00001aec <RF24::_init_radio()>:
_ZN4RF2411_init_radioEv():
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1076
}

/****************************************************************************/

bool RF24::_init_radio()
{
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1083
    // This is actually only required following power up but some settling time also appears to
    // be required after resets too. For full coverage, we'll always assume the worst.
    // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
    // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
    // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
    delay(5);
    1af4:	65 e0       	ldi	r22, 0x05	; 5
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 99 11 	call	0x2332	; 0x2332 <delay>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1088

    // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
    // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
    // sizes must never be used. See datasheet for a more complete explanation.
    setRetries(5, 15);
    1b00:	4f e0       	ldi	r20, 0x0F	; 15
    1b02:	65 e0       	ldi	r22, 0x05	; 5
    1b04:	ce 01       	movw	r24, r28
    1b06:	0e 94 67 0d 	call	0x1ace	; 0x1ace <RF24::setRetries(unsigned char, unsigned char)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1091

    // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
    setDataRate(RF24_1MBPS);
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	ce 01       	movw	r24, r28
    1b10:	0e 94 07 0b 	call	0x160e	; 0x160e <RF24::setDataRate(rf24_datarate_e)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1094

    // detect if is a plus variant & use old toggle features command accordingly
    uint8_t before_toggle = read_register(FEATURE);
    1b14:	6d e1       	ldi	r22, 0x1D	; 29
    1b16:	ce 01       	movw	r24, r28
    1b18:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    1b1c:	18 2f       	mov	r17, r24
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1095
    toggle_features();
    1b1e:	ce 01       	movw	r24, r28
    1b20:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <RF24::toggle_features()>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1096
    uint8_t after_toggle = read_register(FEATURE);
    1b24:	6d e1       	ldi	r22, 0x1D	; 29
    1b26:	ce 01       	movw	r24, r28
    1b28:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1097
    _is_p_variant = before_toggle == after_toggle;
    1b2c:	91 e0       	ldi	r25, 0x01	; 1
    1b2e:	18 13       	cpse	r17, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	98 8b       	std	Y+16, r25	; 0x10
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1098
    if (after_toggle) {
    1b34:	88 23       	and	r24, r24
    1b36:	59 f0       	breq	.+22     	; 0x1b4e <RF24::_init_radio()+0x62>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1099
        if (_is_p_variant) {
    1b38:	18 13       	cpse	r17, r24
    1b3a:	03 c0       	rjmp	.+6      	; 0x1b42 <RF24::_init_radio()+0x56>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1101
            // module did not experience power-on-reset (#401)
            toggle_features();
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <RF24::toggle_features()>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1104
        }
        // allow use of multicast parameter and dynamic payloads by default
        write_register(FEATURE, 0);
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	6d e1       	ldi	r22, 0x1D	; 29
    1b48:	ce 01       	movw	r24, r28
    1b4a:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1106
    }
    ack_payloads_enabled = false; // ack payloads disabled by default
    1b4e:	1a 8a       	std	Y+18, r1	; 0x12
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1107
    write_register(DYNPD, 0);     // disable dynamic payloads by default (for all pipes)
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	6c e1       	ldi	r22, 0x1C	; 28
    1b56:	ce 01       	movw	r24, r28
    1b58:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1108
    dynamic_payloads_enabled = false;
    1b5c:	1c 8a       	std	Y+20, r1	; 0x14
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1109
    write_register(EN_AA, 0x3F);  // enable auto-ack on all pipes
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	4f e3       	ldi	r20, 0x3F	; 63
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	ce 01       	movw	r24, r28
    1b66:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1110
    write_register(EN_RXADDR, 3); // only open RX pipes 0 & 1
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	43 e0       	ldi	r20, 0x03	; 3
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	ce 01       	movw	r24, r28
    1b72:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1111
    setPayloadSize(32);           // set static payload size to 32 (max) bytes by default
    1b76:	60 e2       	ldi	r22, 0x20	; 32
    1b78:	ce 01       	movw	r24, r28
    1b7a:	0e 94 0b 09 	call	0x1216	; 0x1216 <RF24::setPayloadSize(unsigned char)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1112
    setAddressWidth(5);           // set default address length to (max) 5 bytes
    1b7e:	65 e0       	ldi	r22, 0x05	; 5
    1b80:	ce 01       	movw	r24, r28
    1b82:	0e 94 20 0a 	call	0x1440	; 0x1440 <RF24::setAddressWidth(unsigned char)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1117

    // Set up default configuration.  Callers can always change it later.
    // This channel should be universally safe and not bleed over into adjacent
    // spectrum.
    setChannel(76);
    1b86:	6c e4       	ldi	r22, 0x4C	; 76
    1b88:	ce 01       	movw	r24, r28
    1b8a:	0e 94 00 09 	call	0x1200	; 0x1200 <RF24::setChannel(unsigned char)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1121

    // Reset current status
    // Notice reset and flush is the last thing we do
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	40 e7       	ldi	r20, 0x70	; 112
    1b92:	67 e0       	ldi	r22, 0x07	; 7
    1b94:	ce 01       	movw	r24, r28
    1b96:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1124

    // Flush buffers
    flush_rx();
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0e 94 ff 07 	call	0xffe	; 0xffe <RF24::flush_rx()>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1125
    flush_tx();
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	0e 94 09 08 	call	0x1012	; 0x1012 <RF24::flush_tx()>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1134
    //      Enable PTX
    //      Power Up
    //      16-bit CRC (CRC required by auto-ack)
    // Do not write CE high so radio will remain in standby I mode
    // PTX should use only 22uA of power
    write_register(NRF_CONFIG, (_BV(EN_CRC) | _BV(CRCO)));
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	4c e0       	ldi	r20, 0x0C	; 12
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	ce 01       	movw	r24, r28
    1bae:	0e 94 63 07 	call	0xec6	; 0xec6 <RF24::write_register(unsigned char, unsigned char, bool)>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1135
    config_reg = read_register(NRF_CONFIG);
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	0e 94 24 07 	call	0xe48	; 0xe48 <RF24::read_register(unsigned char)>
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1137

    powerUp();
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	0e 94 82 09 	call	0x1304	; 0x1304 <RF24::powerUp()>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1140

    // if config is not set correctly then there was a bad response from module
    return config_reg == (_BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP)) ? true : false;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bc6:	9e 30       	cpi	r25, 0x0E	; 14
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <RF24::_init_radio()+0xe0>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1141
}
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	08 95       	ret

00001bd4 <RF24::begin()>:
_ZN4RF245beginEv():
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:984
}

/****************************************************************************/

bool RF24::begin(void)
{
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	ec 01       	movw	r28, r24
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1012
    _spi->begin(PICO_DEFAULT_SPI ? spi1 : spi0);

#else // using an Arduino platform || defined (LITTLEWIRE)

    #if defined(RF24_SPI_PTR)
    _spi->begin();
    1bda:	0e 94 49 06 	call	0xc92	; 0xc92 <SPIClass::begin()>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1019
    _SPI.begin();
    #endif // !defined(RF24_SPI_PTR)

#endif // !defined(XMEGA_D3) && !defined(RF24_LINUX)

    return _init_pins() && _init_radio();
    1bde:	ce 01       	movw	r24, r28
    1be0:	0e 94 34 09 	call	0x1268	; 0x1268 <RF24::_init_pins()>
    1be4:	88 23       	and	r24, r24
    1be6:	29 f0       	breq	.+10     	; 0x1bf2 <RF24::begin()+0x1e>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:958
// does not apply to RF24_LINUX

bool RF24::begin(_SPI* spiBus)
{
    _spi = spiBus;
    return _init_pins() && _init_radio();
    1be8:	ce 01       	movw	r24, r28
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1020
    #endif // !defined(RF24_SPI_PTR)

#endif // !defined(XMEGA_D3) && !defined(RF24_LINUX)

    return _init_pins() && _init_radio();
}
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:958
// does not apply to RF24_LINUX

bool RF24::begin(_SPI* spiBus)
{
    _spi = spiBus;
    return _init_pins() && _init_radio();
    1bee:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <RF24::_init_radio()>
c:\Users\bcrepeau\Documents\Arduino\libraries\RF24/RF24.cpp:1020
    #endif // !defined(RF24_SPI_PTR)

#endif // !defined(XMEGA_D3) && !defined(RF24_LINUX)

    return _init_pins() && _init_radio();
}
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1bfa:	fc 01       	movw	r30, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1bfc:	91 8d       	ldd	r25, Z+25	; 0x19
    1bfe:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c00:	89 2f       	mov	r24, r25
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	80 5c       	subi	r24, 0xC0	; 192
    1c06:	9f 4f       	sbci	r25, 0xFF	; 255
    1c08:	82 1b       	sub	r24, r18
    1c0a:	91 09       	sbc	r25, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
    1c0c:	8f 73       	andi	r24, 0x3F	; 63
    1c0e:	99 27       	eor	r25, r25
    1c10:	08 95       	ret

00001c12 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    1c12:	fc 01       	movw	r30, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c14:	91 8d       	ldd	r25, Z+25	; 0x19
    1c16:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c18:	98 17       	cp	r25, r24
    1c1a:	31 f0       	breq	.+12     	; 0x1c28 <HardwareSerial::peek()+0x16>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1c1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c1e:	e8 0f       	add	r30, r24
    1c20:	f1 1d       	adc	r31, r1
    1c22:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c28:	8f ef       	ldi	r24, 0xFF	; 255
    1c2a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1c2c:	08 95       	ret

00001c2e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    1c2e:	fc 01       	movw	r30, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1c30:	91 8d       	ldd	r25, Z+25	; 0x19
    1c32:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c34:	98 17       	cp	r25, r24
    1c36:	61 f0       	breq	.+24     	; 0x1c50 <HardwareSerial::read()+0x22>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1c38:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c3a:	ae 0f       	add	r26, r30
    1c3c:	bf 2f       	mov	r27, r31
    1c3e:	b1 1d       	adc	r27, r1
    1c40:	5d 96       	adiw	r26, 0x1d	; 29
    1c42:	8c 91       	ld	r24, X
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1c44:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c46:	9f 5f       	subi	r25, 0xFF	; 255
    1c48:	9f 73       	andi	r25, 0x3F	; 63
    1c4a:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1c54:	08 95       	ret

00001c56 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1c56:	fc 01       	movw	r30, r24
    1c58:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    1c5a:	44 8d       	ldd	r20, Z+28	; 0x1c
    1c5c:	25 2f       	mov	r18, r21
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	84 2f       	mov	r24, r20
    1c62:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1c64:	82 1b       	sub	r24, r18
    1c66:	93 0b       	sbc	r25, r19
    1c68:	54 17       	cp	r21, r20
    1c6a:	10 f0       	brcs	.+4      	; 0x1c70 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    1c6c:	cf 96       	adiw	r24, 0x3f	; 63
    1c6e:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    1c70:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
    1c72:	08 95       	ret

00001c74 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1c74:	84 e9       	ldi	r24, 0x94	; 148
    1c76:	9f e0       	ldi	r25, 0x0F	; 15
    1c78:	89 2b       	or	r24, r25
    1c7a:	49 f0       	breq	.+18     	; 0x1c8e <serialEventRun()+0x1a>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	89 2b       	or	r24, r25
    1c82:	29 f0       	breq	.+10     	; 0x1c8e <serialEventRun()+0x1a>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    1c84:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <Serial0_available()>
    1c88:	81 11       	cpse	r24, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    1c8a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	89 2b       	or	r24, r25
    1c94:	49 f0       	breq	.+18     	; 0x1ca8 <serialEventRun()+0x34>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	89 2b       	or	r24, r25
    1c9c:	29 f0       	breq	.+10     	; 0x1ca8 <serialEventRun()+0x34>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    1c9e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1ca2:	81 11       	cpse	r24, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:70
    1ca4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    1ca8:	08 95       	ret

00001caa <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1caa:	fc 01       	movw	r30, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1cac:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1cae:	a8 0f       	add	r26, r24
    1cb0:	b9 2f       	mov	r27, r25
    1cb2:	b1 1d       	adc	r27, r1
    1cb4:	a3 5a       	subi	r26, 0xA3	; 163
    1cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb8:	2c 91       	ld	r18, X
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1cba:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	8f 73       	andi	r24, 0x3F	; 63
    1cc2:	99 27       	eor	r25, r25
    1cc4:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1cc6:	a6 89       	ldd	r26, Z+22	; 0x16
    1cc8:	b7 89       	ldd	r27, Z+23	; 0x17
    1cca:	2c 93       	st	X, r18
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1ccc:	a0 89       	ldd	r26, Z+16	; 0x10
    1cce:	b1 89       	ldd	r27, Z+17	; 0x11
    1cd0:	8c 91       	ld	r24, X
    1cd2:	83 70       	andi	r24, 0x03	; 3
    1cd4:	80 64       	ori	r24, 0x40	; 64
    1cd6:	8c 93       	st	X, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1cd8:	93 8d       	ldd	r25, Z+27	; 0x1b
    1cda:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cdc:	98 13       	cpse	r25, r24
    1cde:	06 c0       	rjmp	.+12     	; 0x1cec <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1ce0:	02 88       	ldd	r0, Z+18	; 0x12
    1ce2:	f3 89       	ldd	r31, Z+19	; 0x13
    1ce4:	e0 2d       	mov	r30, r0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8f 7d       	andi	r24, 0xDF	; 223
    1cea:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    1cec:	08 95       	ret

00001cee <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	ec 01       	movw	r28, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1cf4:	88 8d       	ldd	r24, Y+24	; 0x18
    1cf6:	88 23       	and	r24, r24
    1cf8:	b9 f0       	breq	.+46     	; 0x1d28 <HardwareSerial::flush()+0x3a>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1cfa:	aa 89       	ldd	r26, Y+18	; 0x12
    1cfc:	bb 89       	ldd	r27, Y+19	; 0x13
    1cfe:	e8 89       	ldd	r30, Y+16	; 0x10
    1d00:	f9 89       	ldd	r31, Y+17	; 0x11
    1d02:	8c 91       	ld	r24, X
    1d04:	85 fd       	sbrc	r24, 5
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <HardwareSerial::flush()+0x20>
    1d08:	80 81       	ld	r24, Z
    1d0a:	86 fd       	sbrc	r24, 6
    1d0c:	0d c0       	rjmp	.+26     	; 0x1d28 <HardwareSerial::flush()+0x3a>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	07 fc       	sbrc	r0, 7
    1d12:	f7 cf       	rjmp	.-18     	; 0x1d02 <HardwareSerial::flush()+0x14>
    1d14:	8c 91       	ld	r24, X
    1d16:	85 ff       	sbrs	r24, 5
    1d18:	f2 cf       	rjmp	.-28     	; 0x1cfe <HardwareSerial::flush()+0x10>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    1d1a:	80 81       	ld	r24, Z
    1d1c:	85 ff       	sbrs	r24, 5
    1d1e:	ed cf       	rjmp	.-38     	; 0x1cfa <HardwareSerial::flush()+0xc>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    1d20:	ce 01       	movw	r24, r28
    1d22:	0e 94 55 0e 	call	0x1caa	; 0x1caa <HardwareSerial::_tx_udr_empty_irq()>
    1d26:	e9 cf       	rjmp	.-46     	; 0x1cfa <HardwareSerial::flush()+0xc>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret

00001d2e <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	ec 01       	movw	r28, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1d40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d44:	98 13       	cpse	r25, r24
    1d46:	1a c0       	rjmp	.+52     	; 0x1d7c <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    1d48:	e8 89       	ldd	r30, Y+16	; 0x10
    1d4a:	f9 89       	ldd	r31, Y+17	; 0x11
    1d4c:	80 81       	ld	r24, Z
    1d4e:	85 ff       	sbrs	r24, 5
    1d50:	15 c0       	rjmp	.+42     	; 0x1d7c <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1d52:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\bcrepeau\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d54:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    1d56:	ee 89       	ldd	r30, Y+22	; 0x16
    1d58:	ff 89       	ldd	r31, Y+23	; 0x17
    1d5a:	60 83       	st	Z, r22
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1d5c:	e8 89       	ldd	r30, Y+16	; 0x10
    1d5e:	f9 89       	ldd	r31, Y+17	; 0x11
    1d60:	80 81       	ld	r24, Z
    1d62:	83 70       	andi	r24, 0x03	; 3
    1d64:	80 64       	ori	r24, 0x40	; 64
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    1d66:	80 83       	st	Z, r24
__iRestore():
c:\users\bcrepeau\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d68:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	ff 90       	pop	r15
    1d78:	ef 90       	pop	r14
    1d7a:	08 95       	ret
    1d7c:	f6 2e       	mov	r15, r22
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1d7e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d80:	10 e0       	ldi	r17, 0x00	; 0
    1d82:	0f 5f       	subi	r16, 0xFF	; 255
    1d84:	1f 4f       	sbci	r17, 0xFF	; 255
    1d86:	0f 73       	andi	r16, 0x3F	; 63
    1d88:	11 27       	eor	r17, r17
    1d8a:	e0 2e       	mov	r14, r16
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1d8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d8e:	8e 11       	cpse	r24, r14
    1d90:	0c c0       	rjmp	.+24     	; 0x1daa <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	07 fc       	sbrc	r0, 7
    1d96:	fa cf       	rjmp	.-12     	; 0x1d8c <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1d98:	e8 89       	ldd	r30, Y+16	; 0x10
    1d9a:	f9 89       	ldd	r31, Y+17	; 0x11
    1d9c:	80 81       	ld	r24, Z
    1d9e:	85 ff       	sbrs	r24, 5
    1da0:	f5 cf       	rjmp	.-22     	; 0x1d8c <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    1da2:	ce 01       	movw	r24, r28
    1da4:	0e 94 55 0e 	call	0x1caa	; 0x1caa <HardwareSerial::_tx_udr_empty_irq()>
    1da8:	f1 cf       	rjmp	.-30     	; 0x1d8c <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1daa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1dac:	ec 0f       	add	r30, r28
    1dae:	fd 2f       	mov	r31, r29
    1db0:	f1 1d       	adc	r31, r1
    1db2:	e3 5a       	subi	r30, 0xA3	; 163
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	f0 82       	st	Z, r15
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1db8:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\bcrepeau\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1dba:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    1dbc:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    1dbe:	ea 89       	ldd	r30, Y+18	; 0x12
    1dc0:	fb 89       	ldd	r31, Y+19	; 0x13
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 62       	ori	r24, 0x20	; 32
    1dc6:	cf cf       	rjmp	.-98     	; 0x1d66 <HardwareSerial::write(unsigned char)+0x38>

00001dc8 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1dc8:	cf 92       	push	r12
    1dca:	df 92       	push	r13
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	ec 01       	movw	r28, r24
    1dd8:	6a 01       	movw	r12, r20
    1dda:	7b 01       	movw	r14, r22
    1ddc:	12 2f       	mov	r17, r18
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1dde:	e8 89       	ldd	r30, Y+16	; 0x10
    1de0:	f9 89       	ldd	r31, Y+17	; 0x11
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1de6:	c1 14       	cp	r12, r1
    1de8:	81 ee       	ldi	r24, 0xE1	; 225
    1dea:	d8 06       	cpc	r13, r24
    1dec:	e1 04       	cpc	r14, r1
    1dee:	f1 04       	cpc	r15, r1
    1df0:	a1 f0       	breq	.+40     	; 0x1e1a <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:120 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	79 e0       	ldi	r23, 0x09	; 9
    1df6:	8d e3       	ldi	r24, 0x3D	; 61
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a7 01       	movw	r20, r14
    1dfc:	96 01       	movw	r18, r12
    1dfe:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    1e02:	21 50       	subi	r18, 0x01	; 1
    1e04:	31 09       	sbc	r19, r1
    1e06:	41 09       	sbc	r20, r1
    1e08:	51 09       	sbc	r21, r1
    1e0a:	56 95       	lsr	r21
    1e0c:	47 95       	ror	r20
    1e0e:	37 95       	ror	r19
    1e10:	27 95       	ror	r18
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:128 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1e12:	21 15       	cp	r18, r1
    1e14:	80 e1       	ldi	r24, 0x10	; 16
    1e16:	38 07       	cpc	r19, r24
    1e18:	98 f0       	brcs	.+38     	; 0x1e40 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    1e1a:	e8 89       	ldd	r30, Y+16	; 0x10
    1e1c:	f9 89       	ldd	r31, Y+17	; 0x11
    1e1e:	10 82       	st	Z, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1e20:	60 e8       	ldi	r22, 0x80	; 128
    1e22:	74 e8       	ldi	r23, 0x84	; 132
    1e24:	8e e1       	ldi	r24, 0x1E	; 30
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a7 01       	movw	r20, r14
    1e2a:	96 01       	movw	r18, r12
    1e2c:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
    1e30:	21 50       	subi	r18, 0x01	; 1
    1e32:	31 09       	sbc	r19, r1
    1e34:	41 09       	sbc	r20, r1
    1e36:	51 09       	sbc	r21, r1
    1e38:	56 95       	lsr	r21
    1e3a:	47 95       	ror	r20
    1e3c:	37 95       	ror	r19
    1e3e:	27 95       	ror	r18
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1e40:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e42:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e44:	30 83       	st	Z, r19
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    1e46:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e48:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e4a:	20 83       	st	Z, r18
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    1e4c:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1e4e:	ec 89       	ldd	r30, Y+20	; 0x14
    1e50:	fd 89       	ldd	r31, Y+21	; 0x15
    1e52:	10 83       	st	Z, r17
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1e54:	ea 89       	ldd	r30, Y+18	; 0x12
    1e56:	fb 89       	ldd	r31, Y+19	; 0x13
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 69       	ori	r24, 0x98	; 152
    1e5c:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    1e5e:	ea 89       	ldd	r30, Y+18	; 0x12
    1e60:	fb 89       	ldd	r31, Y+19	; 0x13
    1e62:	80 81       	ld	r24, Z
    1e64:	8f 7d       	andi	r24, 0xDF	; 223
    1e66:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	ff 90       	pop	r15
    1e70:	ef 90       	pop	r14
    1e72:	df 90       	pop	r13
    1e74:	cf 90       	pop	r12
    1e76:	08 95       	ret

00001e78 <__vector_18>:
__vector_18():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1e78:	1f 92       	push	r1
    1e7a:	0f 92       	push	r0
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	0f 92       	push	r0
    1e80:	11 24       	eor	r1, r1
    1e82:	2f 93       	push	r18
    1e84:	8f 93       	push	r24
    1e86:	9f 93       	push	r25
    1e88:	ef 93       	push	r30
    1e8a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1e8c:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <Serial+0x10>
    1e90:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <Serial+0x11>
    1e94:	80 81       	ld	r24, Z
    1e96:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <Serial+0x16>
    1e9a:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <Serial+0x17>
    1e9e:	82 fd       	sbrc	r24, 2
    1ea0:	1b c0       	rjmp	.+54     	; 0x1ed8 <__vector_18+0x60>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1ea2:	90 81       	ld	r25, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1ea4:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <Serial+0x19>
    1ea8:	8f 5f       	subi	r24, 0xFF	; 255
    1eaa:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1eac:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <Serial+0x1a>
    1eb0:	82 17       	cp	r24, r18
    1eb2:	41 f0       	breq	.+16     	; 0x1ec4 <__vector_18+0x4c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1eb4:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <Serial+0x19>
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	e9 5d       	subi	r30, 0xD9	; 217
    1ebc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ebe:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1ec0:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <Serial+0x19>
__vector_18():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1ec4:	ff 91       	pop	r31
    1ec6:	ef 91       	pop	r30
    1ec8:	9f 91       	pop	r25
    1eca:	8f 91       	pop	r24
    1ecc:	2f 91       	pop	r18
    1ece:	0f 90       	pop	r0
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	0f 90       	pop	r0
    1ed4:	1f 90       	pop	r1
    1ed6:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1ed8:	80 81       	ld	r24, Z
__vector_18():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    1eda:	f4 cf       	rjmp	.-24     	; 0x1ec4 <__vector_18+0x4c>

00001edc <__vector_19>:
__vector_19():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1edc:	1f 92       	push	r1
    1ede:	0f 92       	push	r0
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	0f 92       	push	r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	2f 93       	push	r18
    1ee8:	3f 93       	push	r19
    1eea:	4f 93       	push	r20
    1eec:	5f 93       	push	r21
    1eee:	6f 93       	push	r22
    1ef0:	7f 93       	push	r23
    1ef2:	8f 93       	push	r24
    1ef4:	9f 93       	push	r25
    1ef6:	af 93       	push	r26
    1ef8:	bf 93       	push	r27
    1efa:	ef 93       	push	r30
    1efc:	ff 93       	push	r31
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1efe:	87 e2       	ldi	r24, 0x27	; 39
    1f00:	92 e0       	ldi	r25, 0x02	; 2
    1f02:	0e 94 55 0e 	call	0x1caa	; 0x1caa <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    1f06:	ff 91       	pop	r31
    1f08:	ef 91       	pop	r30
    1f0a:	bf 91       	pop	r27
    1f0c:	af 91       	pop	r26
    1f0e:	9f 91       	pop	r25
    1f10:	8f 91       	pop	r24
    1f12:	7f 91       	pop	r23
    1f14:	6f 91       	pop	r22
    1f16:	5f 91       	pop	r21
    1f18:	4f 91       	pop	r20
    1f1a:	3f 91       	pop	r19
    1f1c:	2f 91       	pop	r18
    1f1e:	0f 90       	pop	r0
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	0f 90       	pop	r0
    1f24:	1f 90       	pop	r1
    1f26:	18 95       	reti

00001f28 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1f28:	87 e2       	ldi	r24, 0x27	; 39
    1f2a:	92 e0       	ldi	r25, 0x02	; 2
    1f2c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <HardwareSerial::available()>
    1f30:	21 e0       	ldi	r18, 0x01	; 1
    1f32:	89 2b       	or	r24, r25
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <Serial0_available()+0x10>
    1f36:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1f38:	82 2f       	mov	r24, r18
    1f3a:	08 95       	ret

00001f3c <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1f3c:	e7 e2       	ldi	r30, 0x27	; 39
    1f3e:	f2 e0       	ldi	r31, 0x02	; 2
    1f40:	13 82       	std	Z+3, r1	; 0x03
    1f42:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1f44:	88 ee       	ldi	r24, 0xE8	; 232
    1f46:	93 e0       	ldi	r25, 0x03	; 3
    1f48:	a0 e0       	ldi	r26, 0x00	; 0
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	84 83       	std	Z+4, r24	; 0x04
    1f4e:	95 83       	std	Z+5, r25	; 0x05
    1f50:	a6 83       	std	Z+6, r26	; 0x06
    1f52:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1f54:	8f e5       	ldi	r24, 0x5F	; 95
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	80 83       	st	Z, r24
    1f5c:	85 ec       	ldi	r24, 0xC5	; 197
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	95 87       	std	Z+13, r25	; 0x0d
    1f62:	84 87       	std	Z+12, r24	; 0x0c
    1f64:	84 ec       	ldi	r24, 0xC4	; 196
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	97 87       	std	Z+15, r25	; 0x0f
    1f6a:	86 87       	std	Z+14, r24	; 0x0e
    1f6c:	80 ec       	ldi	r24, 0xC0	; 192
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	91 8b       	std	Z+17, r25	; 0x11
    1f72:	80 8b       	std	Z+16, r24	; 0x10
    1f74:	81 ec       	ldi	r24, 0xC1	; 193
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	93 8b       	std	Z+19, r25	; 0x13
    1f7a:	82 8b       	std	Z+18, r24	; 0x12
    1f7c:	82 ec       	ldi	r24, 0xC2	; 194
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	95 8b       	std	Z+21, r25	; 0x15
    1f82:	84 8b       	std	Z+20, r24	; 0x14
    1f84:	86 ec       	ldi	r24, 0xC6	; 198
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	97 8b       	std	Z+23, r25	; 0x17
    1f8a:	86 8b       	std	Z+22, r24	; 0x16
    1f8c:	11 8e       	std	Z+25, r1	; 0x19
    1f8e:	12 8e       	std	Z+26, r1	; 0x1a
    1f90:	13 8e       	std	Z+27, r1	; 0x1b
    1f92:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    1f94:	08 95       	ret

00001f96 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:228

  fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
  fdev_set_udata(&f, this);
  va_start(ap, format);
  return vfprintf_P(&f, (const char *)format, ap);
}
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	6c 01       	movw	r12, r24
    1fac:	7b 01       	movw	r14, r22
    1fae:	8b 01       	movw	r16, r22
    1fb0:	04 0f       	add	r16, r20
    1fb2:	15 1f       	adc	r17, r21
    1fb4:	eb 01       	movw	r28, r22
    1fb6:	5e 01       	movw	r10, r28
    1fb8:	ae 18       	sub	r10, r14
    1fba:	bf 08       	sbc	r11, r15
    1fbc:	c0 17       	cp	r28, r16
    1fbe:	d1 07       	cpc	r29, r17
    1fc0:	59 f0       	breq	.+22     	; 0x1fd8 <Print::write(unsigned char const*, unsigned int)+0x42>
    1fc2:	69 91       	ld	r22, Y+
    1fc4:	d6 01       	movw	r26, r12
    1fc6:	ed 91       	ld	r30, X+
    1fc8:	fc 91       	ld	r31, X
    1fca:	01 90       	ld	r0, Z+
    1fcc:	f0 81       	ld	r31, Z
    1fce:	e0 2d       	mov	r30, r0
    1fd0:	c6 01       	movw	r24, r12
    1fd2:	09 95       	icall
    1fd4:	89 2b       	or	r24, r25
    1fd6:	79 f7       	brne	.-34     	; 0x1fb6 <Print::write(unsigned char const*, unsigned int)+0x20>
    1fd8:	c5 01       	movw	r24, r10
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	1f 91       	pop	r17
    1fe0:	0f 91       	pop	r16
    1fe2:	ff 90       	pop	r15
    1fe4:	ef 90       	pop	r14
    1fe6:	df 90       	pop	r13
    1fe8:	cf 90       	pop	r12
    1fea:	bf 90       	pop	r11
    1fec:	af 90       	pop	r10
    1fee:	08 95       	ret

00001ff0 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1ff0:	fb 01       	movw	r30, r22
    1ff2:	01 90       	ld	r0, Z+
    1ff4:	00 20       	and	r0, r0
    1ff6:	e9 f7       	brne	.-6      	; 0x1ff2 <Print::write(char const*) [clone .part.2]+0x2>
    1ff8:	31 97       	sbiw	r30, 0x01	; 1
    1ffa:	af 01       	movw	r20, r30
    1ffc:	46 1b       	sub	r20, r22
    1ffe:	57 0b       	sbc	r21, r23
    2000:	dc 01       	movw	r26, r24
    2002:	ed 91       	ld	r30, X+
    2004:	fc 91       	ld	r31, X
    2006:	02 80       	ldd	r0, Z+2	; 0x02
    2008:	f3 81       	ldd	r31, Z+3	; 0x03
    200a:	e0 2d       	mov	r30, r0
    200c:	09 94       	ijmp

0000200e <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	8c 01       	movw	r16, r24
    201c:	7b 01       	movw	r14, r22
    201e:	d0 e0       	ldi	r29, 0x00	; 0
    2020:	c0 e0       	ldi	r28, 0x00	; 0
    2022:	f7 01       	movw	r30, r14
    2024:	ec 0f       	add	r30, r28
    2026:	fd 1f       	adc	r31, r29
    2028:	64 91       	lpm	r22, Z
    202a:	66 23       	and	r22, r22
    202c:	61 f0       	breq	.+24     	; 0x2046 <Print::print(__FlashStringHelper const*)+0x38>
    202e:	d8 01       	movw	r26, r16
    2030:	ed 91       	ld	r30, X+
    2032:	fc 91       	ld	r31, X
    2034:	01 90       	ld	r0, Z+
    2036:	f0 81       	ld	r31, Z
    2038:	e0 2d       	mov	r30, r0
    203a:	c8 01       	movw	r24, r16
    203c:	09 95       	icall
    203e:	89 2b       	or	r24, r25
    2040:	11 f0       	breq	.+4      	; 0x2046 <Print::print(__FlashStringHelper const*)+0x38>
    2042:	21 96       	adiw	r28, 0x01	; 1
    2044:	ee cf       	rjmp	.-36     	; 0x2022 <Print::print(__FlashStringHelper const*)+0x14>
    2046:	ce 01       	movw	r24, r28
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	08 95       	ret

00002056 <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    2056:	61 15       	cp	r22, r1
    2058:	71 05       	cpc	r23, r1
    205a:	11 f0       	breq	.+4      	; 0x2060 <Print::print(char const*)+0xa>
    205c:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	08 95       	ret

00002066 <Print::print(char)>:
_ZN5Print5printEc():
    2066:	dc 01       	movw	r26, r24
    2068:	ed 91       	ld	r30, X+
    206a:	fc 91       	ld	r31, X
    206c:	01 90       	ld	r0, Z+
    206e:	f0 81       	ld	r31, Z
    2070:	e0 2d       	mov	r30, r0
    2072:	09 94       	ijmp

00002074 <Print::println()>:
_ZN5Print5writeEPKc():
    2074:	6d e6       	ldi	r22, 0x6D	; 109
    2076:	71 e0       	ldi	r23, 0x01	; 1
    2078:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <Print::write(char const*) [clone .part.2]>

0000207c <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	ec 01       	movw	r28, r24
    2086:	0e 94 07 10 	call	0x200e	; 0x200e <Print::print(__FlashStringHelper const*)>
    208a:	8c 01       	movw	r16, r24
    208c:	ce 01       	movw	r24, r28
    208e:	0e 94 3a 10 	call	0x2074	; 0x2074 <Print::println()>
    2092:	80 0f       	add	r24, r16
    2094:	91 1f       	adc	r25, r17
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	08 95       	ret

000020a0 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    20aa:	d0 e0       	ldi	r29, 0x00	; 0
    20ac:	c0 e0       	ldi	r28, 0x00	; 0
    20ae:	61 15       	cp	r22, r1
    20b0:	71 05       	cpc	r23, r1
    20b2:	19 f0       	breq	.+6      	; 0x20ba <Print::println(char const*)+0x1a>
    20b4:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <Print::write(char const*) [clone .part.2]>
    20b8:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    20ba:	c8 01       	movw	r24, r16
    20bc:	0e 94 3a 10 	call	0x2074	; 0x2074 <Print::println()>
    20c0:	8c 0f       	add	r24, r28
    20c2:	9d 1f       	adc	r25, r29
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	08 95       	ret

000020ce <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:233

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    20ce:	8f 92       	push	r8
    20d0:	9f 92       	push	r9
    20d2:	af 92       	push	r10
    20d4:	bf 92       	push	r11
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	a1 97       	sbiw	r28, 0x21	; 33
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	7c 01       	movw	r14, r24
    20f4:	fa 01       	movw	r30, r20
    20f6:	cb 01       	movw	r24, r22
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    20f8:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    20fa:	22 30       	cpi	r18, 0x02	; 2
    20fc:	08 f4       	brcc	.+2      	; 0x2100 <Print::printNumber(unsigned long, unsigned char)+0x32>
    20fe:	2a e0       	ldi	r18, 0x0A	; 10
    2100:	8e 01       	movw	r16, r28
    2102:	0f 5d       	subi	r16, 0xDF	; 223
    2104:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    2106:	82 2e       	mov	r8, r18
    2108:	91 2c       	mov	r9, r1
    210a:	b1 2c       	mov	r11, r1
    210c:	a1 2c       	mov	r10, r1
    210e:	bf 01       	movw	r22, r30
    2110:	a5 01       	movw	r20, r10
    2112:	94 01       	movw	r18, r8
    2114:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    2118:	f9 01       	movw	r30, r18
    211a:	ca 01       	movw	r24, r20
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    211c:	6a 30       	cpi	r22, 0x0A	; 10
    211e:	0c f5       	brge	.+66     	; 0x2162 <Print::printNumber(unsigned long, unsigned char)+0x94>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:246 (discriminator 1)
    2120:	60 5d       	subi	r22, 0xD0	; 208
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:246 (discriminator 4)
    2122:	d8 01       	movw	r26, r16
    2124:	6e 93       	st	-X, r22
    2126:	8d 01       	movw	r16, r26
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:247 (discriminator 4)
  } while(n);
    2128:	23 2b       	or	r18, r19
    212a:	24 2b       	or	r18, r20
    212c:	25 2b       	or	r18, r21
    212e:	79 f7       	brne	.-34     	; 0x210e <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	10 97       	sbiw	r26, 0x00	; 0
    2136:	21 f0       	breq	.+8      	; 0x2140 <Print::printNumber(unsigned long, unsigned char)+0x72>
    2138:	bd 01       	movw	r22, r26
    213a:	c7 01       	movw	r24, r14
    213c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    2140:	a1 96       	adiw	r28, 0x21	; 33
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	bf 90       	pop	r11
    215a:	af 90       	pop	r10
    215c:	9f 90       	pop	r9
    215e:	8f 90       	pop	r8
    2160:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:246 (discriminator 2)

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2162:	69 5c       	subi	r22, 0xC9	; 201
    2164:	de cf       	rjmp	.-68     	; 0x2122 <Print::printNumber(unsigned long, unsigned char)+0x54>

00002166 <Print::print(long, int)>:
_ZN5Print5printEli():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:88
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2166:	cf 92       	push	r12
    2168:	df 92       	push	r13
    216a:	ef 92       	push	r14
    216c:	ff 92       	push	r15
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:89
  if (base == 0) {
    2176:	21 15       	cp	r18, r1
    2178:	31 05       	cpc	r19, r1
    217a:	81 f4       	brne	.+32     	; 0x219c <Print::print(long, int)+0x36>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:90
    return write(n);
    217c:	dc 01       	movw	r26, r24
    217e:	ed 91       	ld	r30, X+
    2180:	fc 91       	ld	r31, X
    2182:	01 90       	ld	r0, Z+
    2184:	f0 81       	ld	r31, Z
    2186:	e0 2d       	mov	r30, r0
    2188:	64 2f       	mov	r22, r20
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:101
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	ff 90       	pop	r15
    2194:	ef 90       	pop	r14
    2196:	df 90       	pop	r13
    2198:	cf 90       	pop	r12
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:90
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    219a:	09 94       	ijmp
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:91
  } else if (base == 10) {
    219c:	2a 30       	cpi	r18, 0x0A	; 10
    219e:	31 05       	cpc	r19, r1
    21a0:	01 f5       	brne	.+64     	; 0x21e2 <Print::print(long, int)+0x7c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    21a2:	2a e0       	ldi	r18, 0x0A	; 10
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    21a4:	77 ff       	sbrs	r23, 7
    21a6:	1d c0       	rjmp	.+58     	; 0x21e2 <Print::print(long, int)+0x7c>
    21a8:	6a 01       	movw	r12, r20
    21aa:	7b 01       	movw	r14, r22
    21ac:	ec 01       	movw	r28, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:93
      int t = print('-');
    21ae:	6d e2       	ldi	r22, 0x2D	; 45
    21b0:	0e 94 33 10 	call	0x2066	; 0x2066 <Print::print(char)>
    21b4:	8c 01       	movw	r16, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:94
      n = -n;
    21b6:	44 27       	eor	r20, r20
    21b8:	55 27       	eor	r21, r21
    21ba:	ba 01       	movw	r22, r20
    21bc:	4c 19       	sub	r20, r12
    21be:	5d 09       	sbc	r21, r13
    21c0:	6e 09       	sbc	r22, r14
    21c2:	7f 09       	sbc	r23, r15
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    21c4:	2a e0       	ldi	r18, 0x0A	; 10
    21c6:	ce 01       	movw	r24, r28
    21c8:	0e 94 67 10 	call	0x20ce	; 0x20ce <Print::printNumber(unsigned long, unsigned char)>
    21cc:	80 0f       	add	r24, r16
    21ce:	91 1f       	adc	r25, r17
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:101
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	1f 91       	pop	r17
    21d6:	0f 91       	pop	r16
    21d8:	ff 90       	pop	r15
    21da:	ef 90       	pop	r14
    21dc:	df 90       	pop	r13
    21de:	cf 90       	pop	r12
    21e0:	08 95       	ret
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	df 90       	pop	r13
    21f0:	cf 90       	pop	r12
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:99
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    21f2:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <Print::printNumber(unsigned long, unsigned char)>

000021f6 <Print::print(int, int)>:
_ZN5Print5printEii():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:78
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    21f6:	9a 01       	movw	r18, r20
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/Print.cpp:79
  return print((long) n, base);
    21f8:	ab 01       	movw	r20, r22
    21fa:	77 0f       	add	r23, r23
    21fc:	66 0b       	sbc	r22, r22
    21fe:	77 0b       	sbc	r23, r23
    2200:	0c 94 b3 10 	jmp	0x2166	; 0x2166 <Print::print(long, int)>

00002204 <initVariant>:
initVariant():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2204:	08 95       	ret

00002206 <main>:
main():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    2206:	0e 94 dd 11 	call	0x23ba	; 0x23ba <init>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    220a:	0e 94 02 11 	call	0x2204	; 0x2204 <initVariant>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    220e:	0e 94 23 03 	call	0x646	; 0x646 <setup>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2212:	ca e3       	ldi	r28, 0x3A	; 58
    2214:	de e0       	ldi	r29, 0x0E	; 14
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    2216:	0e 94 47 05 	call	0xa8e	; 0xa8e <loop>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    221a:	20 97       	sbiw	r28, 0x00	; 0
    221c:	e1 f3       	breq	.-8      	; 0x2216 <main+0x10>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    221e:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <serialEventRun()>
    2222:	f9 cf       	rjmp	.-14     	; 0x2216 <main+0x10>

00002224 <operator new(unsigned int)>:
_Znwj():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/new.cpp:82

void * operator new(std::size_t size, void *place) noexcept {
  // Nothing to do
  (void)size; // unused
  return place;
}
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	11 f4       	brne	.+4      	; 0x222c <operator new(unsigned int)+0x8>
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0c 94 43 13 	jmp	0x2686	; 0x2686 <malloc>

00002230 <operator new[](unsigned int)>:
_Znaj():
    2230:	0c 94 12 11 	jmp	0x2224	; 0x2224 <operator new(unsigned int)>

00002234 <operator delete(void*)>:
_ZdlPv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

[[gnu::weak]] void operator delete(void * ptr) noexcept {
  free(ptr);
    2234:	0c 94 df 13 	jmp	0x27be	; 0x27be <free>

00002238 <operator delete[](void*)>:
_ZdaPv():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/new.cpp:91
}
[[gnu::weak]] void operator delete[](void * ptr) noexcept {
  operator delete(ptr);
    2238:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <operator delete(void*)>

0000223c <__vector_16>:
__vector_16():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    223c:	1f 92       	push	r1
    223e:	0f 92       	push	r0
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	0f 92       	push	r0
    2244:	11 24       	eor	r1, r1
    2246:	2f 93       	push	r18
    2248:	3f 93       	push	r19
    224a:	8f 93       	push	r24
    224c:	9f 93       	push	r25
    224e:	af 93       	push	r26
    2250:	bf 93       	push	r27
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    2252:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <timer0_millis>
    2256:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <timer0_millis+0x1>
    225a:	a0 91 cb 02 	lds	r26, 0x02CB	; 0x8002cb <timer0_millis+0x2>
    225e:	b0 91 cc 02 	lds	r27, 0x02CC	; 0x8002cc <timer0_millis+0x3>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    2262:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <timer0_fract>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    2266:	23 e0       	ldi	r18, 0x03	; 3
    2268:	23 0f       	add	r18, r19
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    226a:	2d 37       	cpi	r18, 0x7D	; 125
    226c:	68 f1       	brcs	.+90     	; 0x22c8 <__vector_16+0x8c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    226e:	26 e8       	ldi	r18, 0x86	; 134
    2270:	23 0f       	add	r18, r19
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    2272:	02 96       	adiw	r24, 0x02	; 2
    2274:	a1 1d       	adc	r26, r1
    2276:	b1 1d       	adc	r27, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    2278:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <timer0_fract>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    227c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <timer0_millis>
    2280:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <timer0_millis+0x1>
    2284:	a0 93 cb 02 	sts	0x02CB, r26	; 0x8002cb <timer0_millis+0x2>
    2288:	b0 93 cc 02 	sts	0x02CC, r27	; 0x8002cc <timer0_millis+0x3>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    228c:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <timer0_overflow_count>
    2290:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <timer0_overflow_count+0x1>
    2294:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <timer0_overflow_count+0x2>
    2298:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <timer0_overflow_count+0x3>
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	a1 1d       	adc	r26, r1
    22a0:	b1 1d       	adc	r27, r1
    22a2:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <timer0_overflow_count>
    22a6:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <timer0_overflow_count+0x1>
    22aa:	a0 93 c6 02 	sts	0x02C6, r26	; 0x8002c6 <timer0_overflow_count+0x2>
    22ae:	b0 93 c7 02 	sts	0x02C7, r27	; 0x8002c7 <timer0_overflow_count+0x3>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    22b2:	bf 91       	pop	r27
    22b4:	af 91       	pop	r26
    22b6:	9f 91       	pop	r25
    22b8:	8f 91       	pop	r24
    22ba:	3f 91       	pop	r19
    22bc:	2f 91       	pop	r18
    22be:	0f 90       	pop	r0
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	0f 90       	pop	r0
    22c4:	1f 90       	pop	r1
    22c6:	18 95       	reti
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    22c8:	01 96       	adiw	r24, 0x01	; 1
    22ca:	a1 1d       	adc	r26, r1
    22cc:	b1 1d       	adc	r27, r1
    22ce:	d4 cf       	rjmp	.-88     	; 0x2278 <__vector_16+0x3c>

000022d0 <millis>:
millis():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    22d0:	2f b7       	in	r18, 0x3f	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    22d2:	f8 94       	cli
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    22d4:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <timer0_millis>
    22d8:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <timer0_millis+0x1>
    22dc:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <timer0_millis+0x2>
    22e0:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <timer0_millis+0x3>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    22e4:	2f bf       	out	0x3f, r18	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    22e6:	08 95       	ret

000022e8 <micros>:
micros():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    22e8:	3f b7       	in	r19, 0x3f	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    22ea:	f8 94       	cli
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    22ec:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <timer0_overflow_count>
    22f0:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <timer0_overflow_count+0x1>
    22f4:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <timer0_overflow_count+0x2>
    22f8:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <timer0_overflow_count+0x3>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    22fc:	26 b5       	in	r18, 0x26	; 38
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    22fe:	a8 9b       	sbis	0x15, 0	; 21
    2300:	05 c0       	rjmp	.+10     	; 0x230c <micros+0x24>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    2302:	2f 3f       	cpi	r18, 0xFF	; 255
    2304:	19 f0       	breq	.+6      	; 0x230c <micros+0x24>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    2306:	01 96       	adiw	r24, 0x01	; 1
    2308:	a1 1d       	adc	r26, r1
    230a:	b1 1d       	adc	r27, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    230c:	3f bf       	out	0x3f, r19	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    230e:	ba 2f       	mov	r27, r26
    2310:	a9 2f       	mov	r26, r25
    2312:	98 2f       	mov	r25, r24
    2314:	88 27       	eor	r24, r24
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	62 0f       	add	r22, r18
    231c:	71 1d       	adc	r23, r1
    231e:	81 1d       	adc	r24, r1
    2320:	91 1d       	adc	r25, r1
    2322:	42 e0       	ldi	r20, 0x02	; 2
    2324:	66 0f       	add	r22, r22
    2326:	77 1f       	adc	r23, r23
    2328:	88 1f       	adc	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	4a 95       	dec	r20
    232e:	d1 f7       	brne	.-12     	; 0x2324 <micros+0x3c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    2330:	08 95       	ret

00002332 <delay>:
delay():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    2332:	8f 92       	push	r8
    2334:	9f 92       	push	r9
    2336:	af 92       	push	r10
    2338:	bf 92       	push	r11
    233a:	cf 92       	push	r12
    233c:	df 92       	push	r13
    233e:	ef 92       	push	r14
    2340:	ff 92       	push	r15
    2342:	6b 01       	movw	r12, r22
    2344:	7c 01       	movw	r14, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    2346:	0e 94 74 11 	call	0x22e8	; 0x22e8 <micros>
    234a:	4b 01       	movw	r8, r22
    234c:	5c 01       	movw	r10, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    234e:	c1 14       	cp	r12, r1
    2350:	d1 04       	cpc	r13, r1
    2352:	e1 04       	cpc	r14, r1
    2354:	f1 04       	cpc	r15, r1
    2356:	e9 f0       	breq	.+58     	; 0x2392 <delay+0x60>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:400
    yield();
    2358:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <yield>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    235c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <micros>
    2360:	68 19       	sub	r22, r8
    2362:	79 09       	sbc	r23, r9
    2364:	8a 09       	sbc	r24, r10
    2366:	9b 09       	sbc	r25, r11
    2368:	68 3e       	cpi	r22, 0xE8	; 232
    236a:	73 40       	sbci	r23, 0x03	; 3
    236c:	81 05       	cpc	r24, r1
    236e:	91 05       	cpc	r25, r1
    2370:	70 f3       	brcs	.-36     	; 0x234e <delay+0x1c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    2372:	21 e0       	ldi	r18, 0x01	; 1
    2374:	c2 1a       	sub	r12, r18
    2376:	d1 08       	sbc	r13, r1
    2378:	e1 08       	sbc	r14, r1
    237a:	f1 08       	sbc	r15, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    237c:	88 ee       	ldi	r24, 0xE8	; 232
    237e:	88 0e       	add	r8, r24
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	98 1e       	adc	r9, r24
    2384:	a1 1c       	adc	r10, r1
    2386:	b1 1c       	adc	r11, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2388:	c1 14       	cp	r12, r1
    238a:	d1 04       	cpc	r13, r1
    238c:	e1 04       	cpc	r14, r1
    238e:	f1 04       	cpc	r15, r1
    2390:	29 f7       	brne	.-54     	; 0x235c <delay+0x2a>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    2392:	ff 90       	pop	r15
    2394:	ef 90       	pop	r14
    2396:	df 90       	pop	r13
    2398:	cf 90       	pop	r12
    239a:	bf 90       	pop	r11
    239c:	af 90       	pop	r10
    239e:	9f 90       	pop	r9
    23a0:	8f 90       	pop	r8
    23a2:	08 95       	ret

000023a4 <delayMicroseconds>:
delayMicroseconds():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    23a4:	82 30       	cpi	r24, 0x02	; 2
    23a6:	91 05       	cpc	r25, r1
    23a8:	38 f0       	brcs	.+14     	; 0x23b8 <delayMicroseconds+0x14>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    23b2:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <delayMicroseconds+0x10>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    23b8:	08 95       	ret

000023ba <init>:
init():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    23ba:	78 94       	sei
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    23bc:	84 b5       	in	r24, 0x24	; 36
    23be:	83 60       	ori	r24, 0x03	; 3
    23c0:	84 bd       	out	0x24, r24	; 36
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    23c2:	85 b5       	in	r24, 0x25	; 37
    23c4:	83 60       	ori	r24, 0x03	; 3
    23c6:	85 bd       	out	0x25, r24	; 37
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    23c8:	ee e6       	ldi	r30, 0x6E	; 110
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	81 60       	ori	r24, 0x01	; 1
    23d0:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    23d2:	e1 e8       	ldi	r30, 0x81	; 129
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    23da:	80 81       	ld	r24, Z
    23dc:	81 60       	ori	r24, 0x01	; 1
    23de:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    23e0:	e0 e8       	ldi	r30, 0x80	; 128
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	81 60       	ori	r24, 0x01	; 1
    23e8:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    23ea:	e1 eb       	ldi	r30, 0xB1	; 177
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	84 60       	ori	r24, 0x04	; 4
    23f2:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    23f4:	e0 eb       	ldi	r30, 0xB0	; 176
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	81 60       	ori	r24, 0x01	; 1
    23fc:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    23fe:	e1 e9       	ldi	r30, 0x91	; 145
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	83 60       	ori	r24, 0x03	; 3
    2406:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    2408:	e0 e9       	ldi	r30, 0x90	; 144
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	81 60       	ori	r24, 0x01	; 1
    2410:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    2412:	e1 ea       	ldi	r30, 0xA1	; 161
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	83 60       	ori	r24, 0x03	; 3
    241a:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    241c:	e0 ea       	ldi	r30, 0xA0	; 160
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	81 60       	ori	r24, 0x01	; 1
    2424:	80 83       	st	Z, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    2426:	87 e8       	ldi	r24, 0x87	; 135
    2428:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    242c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    2430:	08 95       	ret

00002432 <turnOffPWM>:
turnOffPWM():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    2432:	82 50       	subi	r24, 0x02	; 2
    2434:	8d 30       	cpi	r24, 0x0D	; 13
    2436:	08 f0       	brcs	.+2      	; 0x243a <turnOffPWM+0x8>
    2438:	3e c0       	rjmp	.+124    	; 0x24b6 <turnOffPWM+0x84>
    243a:	e8 2f       	mov	r30, r24
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	ed 5d       	subi	r30, 0xDD	; 221
    2440:	fd 4e       	sbci	r31, 0xED	; 237
    2442:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__tablejump2__>
    2446:	58 12       	cpse	r5, r24
    2448:	5c 12       	cpse	r5, r28
    244a:	30 12       	cpse	r3, r16
    244c:	36 12       	cpse	r3, r22
    244e:	5b 12       	cpse	r5, r27
    2450:	5b 12       	cpse	r5, r27
    2452:	3a 12       	cpse	r3, r26
    2454:	40 12       	cpse	r4, r16
    2456:	44 12       	cpse	r4, r20
    2458:	4a 12       	cpse	r4, r26
    245a:	5b 12       	cpse	r5, r27
    245c:	4e 12       	cpse	r4, r30
    245e:	54 12       	cpse	r5, r20
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    2460:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2464:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2466:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    246a:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    246c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2470:	8f 7d       	andi	r24, 0xDF	; 223
    2472:	f9 cf       	rjmp	.-14     	; 0x2466 <turnOffPWM+0x34>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2474:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2478:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    247a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    247e:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2480:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2484:	8f 7d       	andi	r24, 0xDF	; 223
    2486:	f9 cf       	rjmp	.-14     	; 0x247a <turnOffPWM+0x48>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2488:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    248c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    248e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    2492:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2494:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    2498:	8f 7d       	andi	r24, 0xDF	; 223
    249a:	f9 cf       	rjmp	.-14     	; 0x248e <turnOffPWM+0x5c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    249c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    24a0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    24a2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:139
        break;
    24a6:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    24a8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    24ac:	8f 7d       	andi	r24, 0xDF	; 223
    24ae:	f9 cf       	rjmp	.-14     	; 0x24a2 <turnOffPWM+0x70>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    24b0:	84 b5       	in	r24, 0x24	; 36
    24b2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    24b4:	84 bd       	out	0x24, r24	; 36
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    24b6:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    24b8:	84 b5       	in	r24, 0x24	; 36
    24ba:	8f 7d       	andi	r24, 0xDF	; 223
    24bc:	fb cf       	rjmp	.-10     	; 0x24b4 <turnOffPWM+0x82>

000024be <pinMode>:
pinMode():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	fc 01       	movw	r30, r24
    24c6:	e8 5b       	subi	r30, 0xB8	; 184
    24c8:	fb 4f       	sbci	r31, 0xFB	; 251
    24ca:	24 91       	lpm	r18, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    24cc:	8d 59       	subi	r24, 0x9D	; 157
    24ce:	9b 4f       	sbci	r25, 0xFB	; 251
    24d0:	fc 01       	movw	r30, r24
    24d2:	84 91       	lpm	r24, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    24d4:	88 23       	and	r24, r24
    24d6:	c9 f0       	breq	.+50     	; 0x250a <pinMode+0x4c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	fc 01       	movw	r30, r24
    24e0:	ea 56       	subi	r30, 0x6A	; 106
    24e2:	fb 4f       	sbci	r31, 0xFB	; 251
    24e4:	a5 91       	lpm	r26, Z+
    24e6:	b4 91       	lpm	r27, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    24e8:	fc 01       	movw	r30, r24
    24ea:	e6 57       	subi	r30, 0x76	; 118
    24ec:	fb 4f       	sbci	r31, 0xFB	; 251
    24ee:	c5 91       	lpm	r28, Z+
    24f0:	d4 91       	lpm	r29, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    24f2:	61 11       	cpse	r22, r1
    24f4:	0d c0       	rjmp	.+26     	; 0x2510 <pinMode+0x52>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    24f6:	9f b7       	in	r25, 0x3f	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    24f8:	f8 94       	cli
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    24fa:	8c 91       	ld	r24, X
    24fc:	20 95       	com	r18
    24fe:	82 23       	and	r24, r18
    2500:	8c 93       	st	X, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    2502:	88 81       	ld	r24, Y
    2504:	28 23       	and	r18, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2506:	28 83       	st	Y, r18
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2508:	9f bf       	out	0x3f, r25	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    2510:	62 30       	cpi	r22, 0x02	; 2
    2512:	51 f4       	brne	.+20     	; 0x2528 <pinMode+0x6a>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    2514:	9f b7       	in	r25, 0x3f	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    2516:	f8 94       	cli
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2518:	3c 91       	ld	r19, X
    251a:	82 2f       	mov	r24, r18
    251c:	80 95       	com	r24
    251e:	83 23       	and	r24, r19
    2520:	8c 93       	st	X, r24
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    2522:	e8 81       	ld	r30, Y
    2524:	2e 2b       	or	r18, r30
    2526:	ef cf       	rjmp	.-34     	; 0x2506 <pinMode+0x48>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2528:	8f b7       	in	r24, 0x3f	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    252a:	f8 94       	cli
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    252c:	ec 91       	ld	r30, X
    252e:	2e 2b       	or	r18, r30
    2530:	2c 93       	st	X, r18
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    2532:	8f bf       	out	0x3f, r24	; 63
    2534:	ea cf       	rjmp	.-44     	; 0x250a <pinMode+0x4c>

00002536 <digitalWrite>:
digitalWrite():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	f9 01       	movw	r30, r18
    2542:	e3 5d       	subi	r30, 0xD3	; 211
    2544:	fb 4f       	sbci	r31, 0xFB	; 251
    2546:	84 91       	lpm	r24, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2548:	f9 01       	movw	r30, r18
    254a:	e8 5b       	subi	r30, 0xB8	; 184
    254c:	fb 4f       	sbci	r31, 0xFB	; 251
    254e:	d4 91       	lpm	r29, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    2550:	f9 01       	movw	r30, r18
    2552:	ed 59       	subi	r30, 0x9D	; 157
    2554:	fb 4f       	sbci	r31, 0xFB	; 251
    2556:	c4 91       	lpm	r28, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2558:	cc 23       	and	r28, r28
    255a:	a9 f0       	breq	.+42     	; 0x2586 <digitalWrite+0x50>
    255c:	16 2f       	mov	r17, r22
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    255e:	81 11       	cpse	r24, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2560:	0e 94 19 12 	call	0x2432	; 0x2432 <turnOffPWM>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2564:	ec 2f       	mov	r30, r28
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	e6 57       	subi	r30, 0x76	; 118
    256e:	fb 4f       	sbci	r31, 0xFB	; 251
    2570:	a5 91       	lpm	r26, Z+
    2572:	b4 91       	lpm	r27, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2574:	8f b7       	in	r24, 0x3f	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    2576:	f8 94       	cli
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2578:	ec 91       	ld	r30, X
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    257a:	11 11       	cpse	r17, r1
    257c:	08 c0       	rjmp	.+16     	; 0x258e <digitalWrite+0x58>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    257e:	d0 95       	com	r29
    2580:	de 23       	and	r29, r30
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2582:	dc 93       	st	X, r29
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2584:	8f bf       	out	0x3f, r24	; 63
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    258e:	de 2b       	or	r29, r30
    2590:	f8 cf       	rjmp	.-16     	; 0x2582 <digitalWrite+0x4c>

00002592 <digitalRead>:
digitalRead():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	f9 01       	movw	r30, r18
    259c:	e3 5d       	subi	r30, 0xD3	; 211
    259e:	fb 4f       	sbci	r31, 0xFB	; 251
    25a0:	84 91       	lpm	r24, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    25a2:	f9 01       	movw	r30, r18
    25a4:	e8 5b       	subi	r30, 0xB8	; 184
    25a6:	fb 4f       	sbci	r31, 0xFB	; 251
    25a8:	d4 91       	lpm	r29, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    25aa:	f9 01       	movw	r30, r18
    25ac:	ed 59       	subi	r30, 0x9D	; 157
    25ae:	fb 4f       	sbci	r31, 0xFB	; 251
    25b0:	c4 91       	lpm	r28, Z
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    25b2:	cc 23       	and	r28, r28
    25b4:	a1 f0       	breq	.+40     	; 0x25de <digitalRead+0x4c>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    25b6:	81 11       	cpse	r24, r1
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    25b8:	0e 94 19 12 	call	0x2432	; 0x2432 <turnOffPWM>
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    25bc:	ec 2f       	mov	r30, r28
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	ee 0f       	add	r30, r30
    25c2:	ff 1f       	adc	r31, r31
    25c4:	e2 58       	subi	r30, 0x82	; 130
    25c6:	fb 4f       	sbci	r31, 0xFB	; 251
    25c8:	a5 91       	lpm	r26, Z+
    25ca:	b4 91       	lpm	r27, Z
    25cc:	ec 91       	ld	r30, X
    25ce:	ed 23       	and	r30, r29
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <digitalRead+0x46>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	08 95       	ret
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	fa cf       	rjmp	.-12     	; 0x25d8 <digitalRead+0x46>

000025e4 <yield>:
__empty():
C:\Users\bcrepeau\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.2.2\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    25e4:	08 95       	ret

000025e6 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    25e6:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    25e8:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    25ea:	16 f4       	brtc	.+4      	; 0x25f0 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    25ec:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    25ee:	07 d0       	rcall	.+14     	; 0x25fe <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    25f0:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    25f2:	09 d0       	rcall	.+18     	; 0x2606 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    25f4:	0e 94 2f 13 	call	0x265e	; 0x265e <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    25f8:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    25fa:	05 d0       	rcall	.+10     	; 0x2606 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    25fc:	3e f4       	brtc	.+14     	; 0x260c <__divmodhi4_exit>

000025fe <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    25fe:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    2600:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    2602:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    2604:	08 95       	ret

00002606 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    2606:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    2608:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    260a:	7f 4f       	sbci	r23, 0xFF	; 255

0000260c <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    260c:	08 95       	ret

0000260e <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    260e:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2610:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2612:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2614:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2616:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2618:	0d c0       	rjmp	.+26     	; 0x2634 <__udivmodsi4_ep>

0000261a <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    261a:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    261c:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    261e:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2620:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2622:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2624:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2626:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2628:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    262a:	20 f0       	brcs	.+8      	; 0x2634 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    262c:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    262e:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2630:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2632:	f5 0b       	sbc	r31, r21

00002634 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2634:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2636:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2638:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    263a:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    263c:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    263e:	69 f7       	brne	.-38     	; 0x261a <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    2640:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2642:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2644:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2646:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    2648:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    264a:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    264c:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    264e:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    2650:	08 95       	ret

00002652 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2652:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2654:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    2656:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    2658:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    265a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    265c:	09 94       	ijmp

0000265e <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    265e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    2660:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    2662:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    2664:	07 c0       	rjmp	.+14     	; 0x2674 <__udivmodhi4_ep>

00002666 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    2666:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    2668:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    266a:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    266c:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    266e:	10 f0       	brcs	.+4      	; 0x2674 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    2670:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    2672:	b7 0b       	sbc	r27, r23

00002674 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    2674:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    2676:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    2678:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    267a:	a9 f7       	brne	.-22     	; 0x2666 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    267c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    267e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    2680:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    2682:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    2684:	08 95       	ret

00002686 <malloc>:
malloc():
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	82 30       	cpi	r24, 0x02	; 2
    2690:	91 05       	cpc	r25, r1
    2692:	10 f4       	brcc	.+4      	; 0x2698 <malloc+0x12>
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <__flp>
    269c:	f0 91 d0 02 	lds	r31, 0x02D0	; 0x8002d0 <__flp+0x1>
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	a0 e0       	ldi	r26, 0x00	; 0
    26a8:	30 97       	sbiw	r30, 0x00	; 0
    26aa:	99 f4       	brne	.+38     	; 0x26d2 <malloc+0x4c>
    26ac:	21 15       	cp	r18, r1
    26ae:	31 05       	cpc	r19, r1
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <malloc+0x2e>
    26b2:	4a c0       	rjmp	.+148    	; 0x2748 <malloc+0xc2>
    26b4:	28 1b       	sub	r18, r24
    26b6:	39 0b       	sbc	r19, r25
    26b8:	24 30       	cpi	r18, 0x04	; 4
    26ba:	31 05       	cpc	r19, r1
    26bc:	d8 f5       	brcc	.+118    	; 0x2734 <malloc+0xae>
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	9b 81       	ldd	r25, Y+3	; 0x03
    26c2:	61 15       	cp	r22, r1
    26c4:	71 05       	cpc	r23, r1
    26c6:	89 f1       	breq	.+98     	; 0x272a <malloc+0xa4>
    26c8:	fb 01       	movw	r30, r22
    26ca:	93 83       	std	Z+3, r25	; 0x03
    26cc:	82 83       	std	Z+2, r24	; 0x02
    26ce:	fe 01       	movw	r30, r28
    26d0:	11 c0       	rjmp	.+34     	; 0x26f4 <malloc+0x6e>
    26d2:	40 81       	ld	r20, Z
    26d4:	51 81       	ldd	r21, Z+1	; 0x01
    26d6:	02 81       	ldd	r16, Z+2	; 0x02
    26d8:	13 81       	ldd	r17, Z+3	; 0x03
    26da:	48 17       	cp	r20, r24
    26dc:	59 07       	cpc	r21, r25
    26de:	e0 f0       	brcs	.+56     	; 0x2718 <malloc+0x92>
    26e0:	48 17       	cp	r20, r24
    26e2:	59 07       	cpc	r21, r25
    26e4:	99 f4       	brne	.+38     	; 0x270c <malloc+0x86>
    26e6:	10 97       	sbiw	r26, 0x00	; 0
    26e8:	61 f0       	breq	.+24     	; 0x2702 <malloc+0x7c>
    26ea:	12 96       	adiw	r26, 0x02	; 2
    26ec:	0c 93       	st	X, r16
    26ee:	12 97       	sbiw	r26, 0x02	; 2
    26f0:	13 96       	adiw	r26, 0x03	; 3
    26f2:	1c 93       	st	X, r17
    26f4:	32 96       	adiw	r30, 0x02	; 2
    26f6:	cf 01       	movw	r24, r30
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	08 95       	ret
    2702:	00 93 cf 02 	sts	0x02CF, r16	; 0x8002cf <__flp>
    2706:	10 93 d0 02 	sts	0x02D0, r17	; 0x8002d0 <__flp+0x1>
    270a:	f4 cf       	rjmp	.-24     	; 0x26f4 <malloc+0x6e>
    270c:	21 15       	cp	r18, r1
    270e:	31 05       	cpc	r19, r1
    2710:	51 f0       	breq	.+20     	; 0x2726 <malloc+0xa0>
    2712:	42 17       	cp	r20, r18
    2714:	53 07       	cpc	r21, r19
    2716:	38 f0       	brcs	.+14     	; 0x2726 <malloc+0xa0>
    2718:	a9 01       	movw	r20, r18
    271a:	db 01       	movw	r26, r22
    271c:	9a 01       	movw	r18, r20
    271e:	bd 01       	movw	r22, r26
    2720:	df 01       	movw	r26, r30
    2722:	f8 01       	movw	r30, r16
    2724:	c1 cf       	rjmp	.-126    	; 0x26a8 <malloc+0x22>
    2726:	ef 01       	movw	r28, r30
    2728:	f9 cf       	rjmp	.-14     	; 0x271c <malloc+0x96>
    272a:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <__flp+0x1>
    272e:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <__flp>
    2732:	cd cf       	rjmp	.-102    	; 0x26ce <malloc+0x48>
    2734:	fe 01       	movw	r30, r28
    2736:	e2 0f       	add	r30, r18
    2738:	f3 1f       	adc	r31, r19
    273a:	81 93       	st	Z+, r24
    273c:	91 93       	st	Z+, r25
    273e:	22 50       	subi	r18, 0x02	; 2
    2740:	31 09       	sbc	r19, r1
    2742:	39 83       	std	Y+1, r19	; 0x01
    2744:	28 83       	st	Y, r18
    2746:	d7 cf       	rjmp	.-82     	; 0x26f6 <malloc+0x70>
    2748:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <__brkval>
    274c:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <__brkval+0x1>
    2750:	23 2b       	or	r18, r19
    2752:	41 f4       	brne	.+16     	; 0x2764 <malloc+0xde>
    2754:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2758:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    275c:	30 93 ce 02 	sts	0x02CE, r19	; 0x8002ce <__brkval+0x1>
    2760:	20 93 cd 02 	sts	0x02CD, r18	; 0x8002cd <__brkval>
    2764:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2768:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    276c:	21 15       	cp	r18, r1
    276e:	31 05       	cpc	r19, r1
    2770:	41 f4       	brne	.+16     	; 0x2782 <malloc+0xfc>
    2772:	2d b7       	in	r18, 0x3d	; 61
    2774:	3e b7       	in	r19, 0x3e	; 62
    2776:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    277a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    277e:	24 1b       	sub	r18, r20
    2780:	35 0b       	sbc	r19, r21
    2782:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <__brkval>
    2786:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <__brkval+0x1>
    278a:	e2 17       	cp	r30, r18
    278c:	f3 07       	cpc	r31, r19
    278e:	a0 f4       	brcc	.+40     	; 0x27b8 <malloc+0x132>
    2790:	2e 1b       	sub	r18, r30
    2792:	3f 0b       	sbc	r19, r31
    2794:	28 17       	cp	r18, r24
    2796:	39 07       	cpc	r19, r25
    2798:	78 f0       	brcs	.+30     	; 0x27b8 <malloc+0x132>
    279a:	ac 01       	movw	r20, r24
    279c:	4e 5f       	subi	r20, 0xFE	; 254
    279e:	5f 4f       	sbci	r21, 0xFF	; 255
    27a0:	24 17       	cp	r18, r20
    27a2:	35 07       	cpc	r19, r21
    27a4:	48 f0       	brcs	.+18     	; 0x27b8 <malloc+0x132>
    27a6:	4e 0f       	add	r20, r30
    27a8:	5f 1f       	adc	r21, r31
    27aa:	50 93 ce 02 	sts	0x02CE, r21	; 0x8002ce <__brkval+0x1>
    27ae:	40 93 cd 02 	sts	0x02CD, r20	; 0x8002cd <__brkval>
    27b2:	81 93       	st	Z+, r24
    27b4:	91 93       	st	Z+, r25
    27b6:	9f cf       	rjmp	.-194    	; 0x26f6 <malloc+0x70>
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	e0 e0       	ldi	r30, 0x00	; 0
    27bc:	9c cf       	rjmp	.-200    	; 0x26f6 <malloc+0x70>

000027be <free>:
free():
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	e9 f0       	breq	.+58     	; 0x2800 <free+0x42>
    27c6:	fc 01       	movw	r30, r24
    27c8:	32 97       	sbiw	r30, 0x02	; 2
    27ca:	13 82       	std	Z+3, r1	; 0x03
    27cc:	12 82       	std	Z+2, r1	; 0x02
    27ce:	a0 91 cf 02 	lds	r26, 0x02CF	; 0x8002cf <__flp>
    27d2:	b0 91 d0 02 	lds	r27, 0x02D0	; 0x8002d0 <__flp+0x1>
    27d6:	ed 01       	movw	r28, r26
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	10 97       	sbiw	r26, 0x00	; 0
    27de:	a1 f4       	brne	.+40     	; 0x2808 <free+0x4a>
    27e0:	20 81       	ld	r18, Z
    27e2:	31 81       	ldd	r19, Z+1	; 0x01
    27e4:	82 0f       	add	r24, r18
    27e6:	93 1f       	adc	r25, r19
    27e8:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <__brkval>
    27ec:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <__brkval+0x1>
    27f0:	28 17       	cp	r18, r24
    27f2:	39 07       	cpc	r19, r25
    27f4:	09 f0       	breq	.+2      	; 0x27f8 <free+0x3a>
    27f6:	61 c0       	rjmp	.+194    	; 0x28ba <free+0xfc>
    27f8:	f0 93 ce 02 	sts	0x02CE, r31	; 0x8002ce <__brkval+0x1>
    27fc:	e0 93 cd 02 	sts	0x02CD, r30	; 0x8002cd <__brkval>
    2800:	df 91       	pop	r29
    2802:	cf 91       	pop	r28
    2804:	08 95       	ret
    2806:	ea 01       	movw	r28, r20
    2808:	ce 17       	cp	r28, r30
    280a:	df 07       	cpc	r29, r31
    280c:	e8 f5       	brcc	.+122    	; 0x2888 <free+0xca>
    280e:	4a 81       	ldd	r20, Y+2	; 0x02
    2810:	5b 81       	ldd	r21, Y+3	; 0x03
    2812:	9e 01       	movw	r18, r28
    2814:	41 15       	cp	r20, r1
    2816:	51 05       	cpc	r21, r1
    2818:	b1 f7       	brne	.-20     	; 0x2806 <free+0x48>
    281a:	e9 01       	movw	r28, r18
    281c:	fb 83       	std	Y+3, r31	; 0x03
    281e:	ea 83       	std	Y+2, r30	; 0x02
    2820:	49 91       	ld	r20, Y+
    2822:	59 91       	ld	r21, Y+
    2824:	c4 0f       	add	r28, r20
    2826:	d5 1f       	adc	r29, r21
    2828:	ec 17       	cp	r30, r28
    282a:	fd 07       	cpc	r31, r29
    282c:	61 f4       	brne	.+24     	; 0x2846 <free+0x88>
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	02 96       	adiw	r24, 0x02	; 2
    2834:	84 0f       	add	r24, r20
    2836:	95 1f       	adc	r25, r21
    2838:	e9 01       	movw	r28, r18
    283a:	99 83       	std	Y+1, r25	; 0x01
    283c:	88 83       	st	Y, r24
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	9b 83       	std	Y+3, r25	; 0x03
    2844:	8a 83       	std	Y+2, r24	; 0x02
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	e0 e0       	ldi	r30, 0x00	; 0
    284a:	12 96       	adiw	r26, 0x02	; 2
    284c:	8d 91       	ld	r24, X+
    284e:	9c 91       	ld	r25, X
    2850:	13 97       	sbiw	r26, 0x03	; 3
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	b9 f5       	brne	.+110    	; 0x28c4 <free+0x106>
    2856:	2d 91       	ld	r18, X+
    2858:	3c 91       	ld	r19, X
    285a:	11 97       	sbiw	r26, 0x01	; 1
    285c:	cd 01       	movw	r24, r26
    285e:	02 96       	adiw	r24, 0x02	; 2
    2860:	82 0f       	add	r24, r18
    2862:	93 1f       	adc	r25, r19
    2864:	20 91 cd 02 	lds	r18, 0x02CD	; 0x8002cd <__brkval>
    2868:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <__brkval+0x1>
    286c:	28 17       	cp	r18, r24
    286e:	39 07       	cpc	r19, r25
    2870:	39 f6       	brne	.-114    	; 0x2800 <free+0x42>
    2872:	30 97       	sbiw	r30, 0x00	; 0
    2874:	51 f5       	brne	.+84     	; 0x28ca <free+0x10c>
    2876:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <__flp+0x1>
    287a:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <__flp>
    287e:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <__brkval+0x1>
    2882:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <__brkval>
    2886:	bc cf       	rjmp	.-136    	; 0x2800 <free+0x42>
    2888:	d3 83       	std	Z+3, r29	; 0x03
    288a:	c2 83       	std	Z+2, r28	; 0x02
    288c:	40 81       	ld	r20, Z
    288e:	51 81       	ldd	r21, Z+1	; 0x01
    2890:	84 0f       	add	r24, r20
    2892:	95 1f       	adc	r25, r21
    2894:	c8 17       	cp	r28, r24
    2896:	d9 07       	cpc	r29, r25
    2898:	61 f4       	brne	.+24     	; 0x28b2 <free+0xf4>
    289a:	4e 5f       	subi	r20, 0xFE	; 254
    289c:	5f 4f       	sbci	r21, 0xFF	; 255
    289e:	88 81       	ld	r24, Y
    28a0:	99 81       	ldd	r25, Y+1	; 0x01
    28a2:	48 0f       	add	r20, r24
    28a4:	59 1f       	adc	r21, r25
    28a6:	51 83       	std	Z+1, r21	; 0x01
    28a8:	40 83       	st	Z, r20
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	9b 81       	ldd	r25, Y+3	; 0x03
    28ae:	93 83       	std	Z+3, r25	; 0x03
    28b0:	82 83       	std	Z+2, r24	; 0x02
    28b2:	21 15       	cp	r18, r1
    28b4:	31 05       	cpc	r19, r1
    28b6:	09 f0       	breq	.+2      	; 0x28ba <free+0xfc>
    28b8:	b0 cf       	rjmp	.-160    	; 0x281a <free+0x5c>
    28ba:	f0 93 d0 02 	sts	0x02D0, r31	; 0x8002d0 <__flp+0x1>
    28be:	e0 93 cf 02 	sts	0x02CF, r30	; 0x8002cf <__flp>
    28c2:	9e cf       	rjmp	.-196    	; 0x2800 <free+0x42>
    28c4:	fd 01       	movw	r30, r26
    28c6:	dc 01       	movw	r26, r24
    28c8:	c0 cf       	rjmp	.-128    	; 0x284a <free+0x8c>
    28ca:	13 82       	std	Z+3, r1	; 0x03
    28cc:	12 82       	std	Z+2, r1	; 0x02
    28ce:	d7 cf       	rjmp	.-82     	; 0x287e <free+0xc0>

000028d0 <memcpy>:
memcpy():
    28d0:	fb 01       	movw	r30, r22
    28d2:	dc 01       	movw	r26, r24
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <memcpy+0xa>
    28d6:	01 90       	ld	r0, Z+
    28d8:	0d 92       	st	X+, r0
    28da:	41 50       	subi	r20, 0x01	; 1
    28dc:	50 40       	sbci	r21, 0x00	; 0
    28de:	d8 f7       	brcc	.-10     	; 0x28d6 <memcpy+0x6>
    28e0:	08 95       	ret

000028e2 <strcpy>:
strcpy():
    28e2:	fb 01       	movw	r30, r22
    28e4:	dc 01       	movw	r26, r24
    28e6:	01 90       	ld	r0, Z+
    28e8:	0d 92       	st	X+, r0
    28ea:	00 20       	and	r0, r0
    28ec:	e1 f7       	brne	.-8      	; 0x28e6 <strcpy+0x4>
    28ee:	08 95       	ret

000028f0 <strncmp>:
strncmp():
    28f0:	fb 01       	movw	r30, r22
    28f2:	dc 01       	movw	r26, r24
    28f4:	41 50       	subi	r20, 0x01	; 1
    28f6:	50 40       	sbci	r21, 0x00	; 0
    28f8:	30 f0       	brcs	.+12     	; 0x2906 <strncmp+0x16>
    28fa:	8d 91       	ld	r24, X+
    28fc:	01 90       	ld	r0, Z+
    28fe:	80 19       	sub	r24, r0
    2900:	19 f4       	brne	.+6      	; 0x2908 <strncmp+0x18>
    2902:	00 20       	and	r0, r0
    2904:	b9 f7       	brne	.-18     	; 0x28f4 <strncmp+0x4>
    2906:	88 1b       	sub	r24, r24
    2908:	99 0b       	sbc	r25, r25
    290a:	08 95       	ret

0000290c <fdevopen>:
fdevopen():
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	59 f4       	brne	.+22     	; 0x292e <fdevopen+0x22>
    2918:	61 15       	cp	r22, r1
    291a:	71 05       	cpc	r23, r1
    291c:	41 f4       	brne	.+16     	; 0x292e <fdevopen+0x22>
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	e0 e0       	ldi	r30, 0x00	; 0
    2922:	cf 01       	movw	r24, r30
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	08 95       	ret
    292e:	8b 01       	movw	r16, r22
    2930:	ec 01       	movw	r28, r24
    2932:	6e e0       	ldi	r22, 0x0E	; 14
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <calloc>
    293e:	fc 01       	movw	r30, r24
    2940:	89 2b       	or	r24, r25
    2942:	69 f3       	breq	.-38     	; 0x291e <fdevopen+0x12>
    2944:	80 e8       	ldi	r24, 0x80	; 128
    2946:	83 83       	std	Z+3, r24	; 0x03
    2948:	01 15       	cp	r16, r1
    294a:	11 05       	cpc	r17, r1
    294c:	71 f0       	breq	.+28     	; 0x296a <fdevopen+0x5e>
    294e:	13 87       	std	Z+11, r17	; 0x0b
    2950:	02 87       	std	Z+10, r16	; 0x0a
    2952:	81 e8       	ldi	r24, 0x81	; 129
    2954:	83 83       	std	Z+3, r24	; 0x03
    2956:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <__iob>
    295a:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <__iob+0x1>
    295e:	89 2b       	or	r24, r25
    2960:	21 f4       	brne	.+8      	; 0x296a <fdevopen+0x5e>
    2962:	f0 93 d2 02 	sts	0x02D2, r31	; 0x8002d2 <__iob+0x1>
    2966:	e0 93 d1 02 	sts	0x02D1, r30	; 0x8002d1 <__iob>
    296a:	20 97       	sbiw	r28, 0x00	; 0
    296c:	d1 f2       	breq	.-76     	; 0x2922 <fdevopen+0x16>
    296e:	d1 87       	std	Z+9, r29	; 0x09
    2970:	c0 87       	std	Z+8, r28	; 0x08
    2972:	83 81       	ldd	r24, Z+3	; 0x03
    2974:	82 60       	ori	r24, 0x02	; 2
    2976:	83 83       	std	Z+3, r24	; 0x03
    2978:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <__iob+0x2>
    297c:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <__iob+0x3>
    2980:	89 2b       	or	r24, r25
    2982:	79 f6       	brne	.-98     	; 0x2922 <fdevopen+0x16>
    2984:	f0 93 d4 02 	sts	0x02D4, r31	; 0x8002d4 <__iob+0x3>
    2988:	e0 93 d3 02 	sts	0x02D3, r30	; 0x8002d3 <__iob+0x2>
    298c:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <__iob+0x4>
    2990:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <__iob+0x5>
    2994:	89 2b       	or	r24, r25
    2996:	29 f6       	brne	.-118    	; 0x2922 <fdevopen+0x16>
    2998:	f0 93 d6 02 	sts	0x02D6, r31	; 0x8002d6 <__iob+0x5>
    299c:	e0 93 d5 02 	sts	0x02D5, r30	; 0x8002d5 <__iob+0x4>
    29a0:	c0 cf       	rjmp	.-128    	; 0x2922 <fdevopen+0x16>

000029a2 <printf_P>:
printf_P():
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	a0 e0       	ldi	r26, 0x00	; 0
    29a6:	e7 ed       	ldi	r30, 0xD7	; 215
    29a8:	f4 e1       	ldi	r31, 0x14	; 20
    29aa:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__prologue_saves__+0x1c>
    29ae:	ae 01       	movw	r20, r28
    29b0:	49 5f       	subi	r20, 0xF9	; 249
    29b2:	5f 4f       	sbci	r21, 0xFF	; 255
    29b4:	da 01       	movw	r26, r20
    29b6:	6d 91       	ld	r22, X+
    29b8:	7d 91       	ld	r23, X+
    29ba:	ad 01       	movw	r20, r26
    29bc:	01 ed       	ldi	r16, 0xD1	; 209
    29be:	12 e0       	ldi	r17, 0x02	; 2
    29c0:	f8 01       	movw	r30, r16
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	93 81       	ldd	r25, Z+3	; 0x03
    29c6:	dc 01       	movw	r26, r24
    29c8:	13 96       	adiw	r26, 0x03	; 3
    29ca:	2c 91       	ld	r18, X
    29cc:	13 97       	sbiw	r26, 0x03	; 3
    29ce:	28 60       	ori	r18, 0x08	; 8
    29d0:	13 96       	adiw	r26, 0x03	; 3
    29d2:	2c 93       	st	X, r18
    29d4:	0e 94 f6 14 	call	0x29ec	; 0x29ec <vfprintf>
    29d8:	d8 01       	movw	r26, r16
    29da:	12 96       	adiw	r26, 0x02	; 2
    29dc:	ed 91       	ld	r30, X+
    29de:	fc 91       	ld	r31, X
    29e0:	23 81       	ldd	r18, Z+3	; 0x03
    29e2:	27 7f       	andi	r18, 0xF7	; 247
    29e4:	23 83       	std	Z+3, r18	; 0x03
    29e6:	e4 e0       	ldi	r30, 0x04	; 4
    29e8:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__epilogue_restores__+0x1c>

000029ec <vfprintf>:
vfprintf():
    29ec:	ab e0       	ldi	r26, 0x0B	; 11
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	ec ef       	ldi	r30, 0xFC	; 252
    29f2:	f4 e1       	ldi	r31, 0x14	; 20
    29f4:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__>
    29f8:	7c 01       	movw	r14, r24
    29fa:	3b 01       	movw	r6, r22
    29fc:	8a 01       	movw	r16, r20
    29fe:	fc 01       	movw	r30, r24
    2a00:	17 82       	std	Z+7, r1	; 0x07
    2a02:	16 82       	std	Z+6, r1	; 0x06
    2a04:	83 81       	ldd	r24, Z+3	; 0x03
    2a06:	81 ff       	sbrs	r24, 1
    2a08:	c8 c1       	rjmp	.+912    	; 0x2d9a <vfprintf+0x3ae>
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	01 96       	adiw	r24, 0x01	; 1
    2a0e:	5c 01       	movw	r10, r24
    2a10:	f7 01       	movw	r30, r14
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	f3 01       	movw	r30, r6
    2a16:	93 fd       	sbrc	r25, 3
    2a18:	85 91       	lpm	r24, Z+
    2a1a:	93 ff       	sbrs	r25, 3
    2a1c:	81 91       	ld	r24, Z+
    2a1e:	3f 01       	movw	r6, r30
    2a20:	88 23       	and	r24, r24
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <vfprintf+0x3a>
    2a24:	53 c1       	rjmp	.+678    	; 0x2ccc <vfprintf+0x2e0>
    2a26:	85 32       	cpi	r24, 0x25	; 37
    2a28:	39 f4       	brne	.+14     	; 0x2a38 <vfprintf+0x4c>
    2a2a:	93 fd       	sbrc	r25, 3
    2a2c:	85 91       	lpm	r24, Z+
    2a2e:	93 ff       	sbrs	r25, 3
    2a30:	81 91       	ld	r24, Z+
    2a32:	3f 01       	movw	r6, r30
    2a34:	85 32       	cpi	r24, 0x25	; 37
    2a36:	29 f4       	brne	.+10     	; 0x2a42 <vfprintf+0x56>
    2a38:	b7 01       	movw	r22, r14
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2a40:	e7 cf       	rjmp	.-50     	; 0x2a10 <vfprintf+0x24>
    2a42:	91 2c       	mov	r9, r1
    2a44:	21 2c       	mov	r2, r1
    2a46:	31 2c       	mov	r3, r1
    2a48:	ff e1       	ldi	r31, 0x1F	; 31
    2a4a:	f3 15       	cp	r31, r3
    2a4c:	38 f0       	brcs	.+14     	; 0x2a5c <vfprintf+0x70>
    2a4e:	8b 32       	cpi	r24, 0x2B	; 43
    2a50:	11 f1       	breq	.+68     	; 0x2a96 <vfprintf+0xaa>
    2a52:	90 f4       	brcc	.+36     	; 0x2a78 <vfprintf+0x8c>
    2a54:	80 32       	cpi	r24, 0x20	; 32
    2a56:	09 f1       	breq	.+66     	; 0x2a9a <vfprintf+0xae>
    2a58:	83 32       	cpi	r24, 0x23	; 35
    2a5a:	29 f1       	breq	.+74     	; 0x2aa6 <vfprintf+0xba>
    2a5c:	37 fc       	sbrc	r3, 7
    2a5e:	3c c0       	rjmp	.+120    	; 0x2ad8 <vfprintf+0xec>
    2a60:	20 ed       	ldi	r18, 0xD0	; 208
    2a62:	28 0f       	add	r18, r24
    2a64:	2a 30       	cpi	r18, 0x0A	; 10
    2a66:	50 f5       	brcc	.+84     	; 0x2abc <vfprintf+0xd0>
    2a68:	36 fe       	sbrs	r3, 6
    2a6a:	20 c0       	rjmp	.+64     	; 0x2aac <vfprintf+0xc0>
    2a6c:	8a e0       	ldi	r24, 0x0A	; 10
    2a6e:	98 9e       	mul	r9, r24
    2a70:	20 0d       	add	r18, r0
    2a72:	11 24       	eor	r1, r1
    2a74:	92 2e       	mov	r9, r18
    2a76:	06 c0       	rjmp	.+12     	; 0x2a84 <vfprintf+0x98>
    2a78:	8d 32       	cpi	r24, 0x2D	; 45
    2a7a:	91 f0       	breq	.+36     	; 0x2aa0 <vfprintf+0xb4>
    2a7c:	80 33       	cpi	r24, 0x30	; 48
    2a7e:	71 f7       	brne	.-36     	; 0x2a5c <vfprintf+0x70>
    2a80:	68 94       	set
    2a82:	30 f8       	bld	r3, 0
    2a84:	f3 01       	movw	r30, r6
    2a86:	93 fd       	sbrc	r25, 3
    2a88:	85 91       	lpm	r24, Z+
    2a8a:	93 ff       	sbrs	r25, 3
    2a8c:	81 91       	ld	r24, Z+
    2a8e:	3f 01       	movw	r6, r30
    2a90:	81 11       	cpse	r24, r1
    2a92:	da cf       	rjmp	.-76     	; 0x2a48 <vfprintf+0x5c>
    2a94:	21 c0       	rjmp	.+66     	; 0x2ad8 <vfprintf+0xec>
    2a96:	68 94       	set
    2a98:	31 f8       	bld	r3, 1
    2a9a:	68 94       	set
    2a9c:	32 f8       	bld	r3, 2
    2a9e:	f2 cf       	rjmp	.-28     	; 0x2a84 <vfprintf+0x98>
    2aa0:	68 94       	set
    2aa2:	33 f8       	bld	r3, 3
    2aa4:	ef cf       	rjmp	.-34     	; 0x2a84 <vfprintf+0x98>
    2aa6:	68 94       	set
    2aa8:	34 f8       	bld	r3, 4
    2aaa:	ec cf       	rjmp	.-40     	; 0x2a84 <vfprintf+0x98>
    2aac:	ea e0       	ldi	r30, 0x0A	; 10
    2aae:	2e 9e       	mul	r2, r30
    2ab0:	20 0d       	add	r18, r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	22 2e       	mov	r2, r18
    2ab6:	68 94       	set
    2ab8:	35 f8       	bld	r3, 5
    2aba:	e4 cf       	rjmp	.-56     	; 0x2a84 <vfprintf+0x98>
    2abc:	8e 32       	cpi	r24, 0x2E	; 46
    2abe:	29 f4       	brne	.+10     	; 0x2aca <vfprintf+0xde>
    2ac0:	36 fc       	sbrc	r3, 6
    2ac2:	04 c1       	rjmp	.+520    	; 0x2ccc <vfprintf+0x2e0>
    2ac4:	68 94       	set
    2ac6:	36 f8       	bld	r3, 6
    2ac8:	dd cf       	rjmp	.-70     	; 0x2a84 <vfprintf+0x98>
    2aca:	8c 36       	cpi	r24, 0x6C	; 108
    2acc:	19 f4       	brne	.+6      	; 0x2ad4 <vfprintf+0xe8>
    2ace:	68 94       	set
    2ad0:	37 f8       	bld	r3, 7
    2ad2:	d8 cf       	rjmp	.-80     	; 0x2a84 <vfprintf+0x98>
    2ad4:	88 36       	cpi	r24, 0x68	; 104
    2ad6:	b1 f2       	breq	.-84     	; 0x2a84 <vfprintf+0x98>
    2ad8:	98 2f       	mov	r25, r24
    2ada:	9f 7d       	andi	r25, 0xDF	; 223
    2adc:	95 54       	subi	r25, 0x45	; 69
    2ade:	93 30       	cpi	r25, 0x03	; 3
    2ae0:	e0 f0       	brcs	.+56     	; 0x2b1a <vfprintf+0x12e>
    2ae2:	83 36       	cpi	r24, 0x63	; 99
    2ae4:	a1 f1       	breq	.+104    	; 0x2b4e <vfprintf+0x162>
    2ae6:	83 37       	cpi	r24, 0x73	; 115
    2ae8:	c1 f1       	breq	.+112    	; 0x2b5a <vfprintf+0x16e>
    2aea:	83 35       	cpi	r24, 0x53	; 83
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <vfprintf+0x104>
    2aee:	63 c0       	rjmp	.+198    	; 0x2bb6 <vfprintf+0x1ca>
    2af0:	28 01       	movw	r4, r16
    2af2:	f2 e0       	ldi	r31, 0x02	; 2
    2af4:	4f 0e       	add	r4, r31
    2af6:	51 1c       	adc	r5, r1
    2af8:	f8 01       	movw	r30, r16
    2afa:	c0 80       	ld	r12, Z
    2afc:	d1 80       	ldd	r13, Z+1	; 0x01
    2afe:	69 2d       	mov	r22, r9
    2b00:	70 e0       	ldi	r23, 0x00	; 0
    2b02:	36 fc       	sbrc	r3, 6
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <vfprintf+0x11e>
    2b06:	6f ef       	ldi	r22, 0xFF	; 255
    2b08:	7f ef       	ldi	r23, 0xFF	; 255
    2b0a:	c6 01       	movw	r24, r12
    2b0c:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <strnlen_P>
    2b10:	4c 01       	movw	r8, r24
    2b12:	68 94       	set
    2b14:	37 f8       	bld	r3, 7
    2b16:	82 01       	movw	r16, r4
    2b18:	0a c0       	rjmp	.+20     	; 0x2b2e <vfprintf+0x142>
    2b1a:	0c 5f       	subi	r16, 0xFC	; 252
    2b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1e:	ff e3       	ldi	r31, 0x3F	; 63
    2b20:	f9 83       	std	Y+1, r31	; 0x01
    2b22:	88 24       	eor	r8, r8
    2b24:	83 94       	inc	r8
    2b26:	91 2c       	mov	r9, r1
    2b28:	65 01       	movw	r12, r10
    2b2a:	e8 94       	clt
    2b2c:	37 f8       	bld	r3, 7
    2b2e:	33 fe       	sbrs	r3, 3
    2b30:	2d c0       	rjmp	.+90     	; 0x2b8c <vfprintf+0x1a0>
    2b32:	52 2c       	mov	r5, r2
    2b34:	81 14       	cp	r8, r1
    2b36:	91 04       	cpc	r9, r1
    2b38:	71 f5       	brne	.+92     	; 0x2b96 <vfprintf+0x1aa>
    2b3a:	55 20       	and	r5, r5
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <vfprintf+0x154>
    2b3e:	68 cf       	rjmp	.-304    	; 0x2a10 <vfprintf+0x24>
    2b40:	b7 01       	movw	r22, r14
    2b42:	80 e2       	ldi	r24, 0x20	; 32
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2b4a:	5a 94       	dec	r5
    2b4c:	f6 cf       	rjmp	.-20     	; 0x2b3a <vfprintf+0x14e>
    2b4e:	f8 01       	movw	r30, r16
    2b50:	80 81       	ld	r24, Z
    2b52:	89 83       	std	Y+1, r24	; 0x01
    2b54:	0e 5f       	subi	r16, 0xFE	; 254
    2b56:	1f 4f       	sbci	r17, 0xFF	; 255
    2b58:	e4 cf       	rjmp	.-56     	; 0x2b22 <vfprintf+0x136>
    2b5a:	28 01       	movw	r4, r16
    2b5c:	f2 e0       	ldi	r31, 0x02	; 2
    2b5e:	4f 0e       	add	r4, r31
    2b60:	51 1c       	adc	r5, r1
    2b62:	f8 01       	movw	r30, r16
    2b64:	c0 80       	ld	r12, Z
    2b66:	d1 80       	ldd	r13, Z+1	; 0x01
    2b68:	69 2d       	mov	r22, r9
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	36 fc       	sbrc	r3, 6
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <vfprintf+0x188>
    2b70:	6f ef       	ldi	r22, 0xFF	; 255
    2b72:	7f ef       	ldi	r23, 0xFF	; 255
    2b74:	c6 01       	movw	r24, r12
    2b76:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <strnlen>
    2b7a:	4c 01       	movw	r8, r24
    2b7c:	82 01       	movw	r16, r4
    2b7e:	d5 cf       	rjmp	.-86     	; 0x2b2a <vfprintf+0x13e>
    2b80:	b7 01       	movw	r22, r14
    2b82:	80 e2       	ldi	r24, 0x20	; 32
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2b8a:	2a 94       	dec	r2
    2b8c:	28 14       	cp	r2, r8
    2b8e:	19 04       	cpc	r1, r9
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <vfprintf+0x1a8>
    2b92:	b0 f7       	brcc	.-20     	; 0x2b80 <vfprintf+0x194>
    2b94:	ce cf       	rjmp	.-100    	; 0x2b32 <vfprintf+0x146>
    2b96:	f6 01       	movw	r30, r12
    2b98:	37 fc       	sbrc	r3, 7
    2b9a:	85 91       	lpm	r24, Z+
    2b9c:	37 fe       	sbrs	r3, 7
    2b9e:	81 91       	ld	r24, Z+
    2ba0:	6f 01       	movw	r12, r30
    2ba2:	b7 01       	movw	r22, r14
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2baa:	51 10       	cpse	r5, r1
    2bac:	5a 94       	dec	r5
    2bae:	f1 e0       	ldi	r31, 0x01	; 1
    2bb0:	8f 1a       	sub	r8, r31
    2bb2:	91 08       	sbc	r9, r1
    2bb4:	bf cf       	rjmp	.-130    	; 0x2b34 <vfprintf+0x148>
    2bb6:	84 36       	cpi	r24, 0x64	; 100
    2bb8:	19 f0       	breq	.+6      	; 0x2bc0 <vfprintf+0x1d4>
    2bba:	89 36       	cpi	r24, 0x69	; 105
    2bbc:	09 f0       	breq	.+2      	; 0x2bc0 <vfprintf+0x1d4>
    2bbe:	77 c0       	rjmp	.+238    	; 0x2cae <vfprintf+0x2c2>
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	37 fe       	sbrs	r3, 7
    2bc4:	6b c0       	rjmp	.+214    	; 0x2c9c <vfprintf+0x2b0>
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	0c 5f       	subi	r16, 0xFC	; 252
    2bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd2:	f3 2d       	mov	r31, r3
    2bd4:	ff 76       	andi	r31, 0x6F	; 111
    2bd6:	3f 2e       	mov	r3, r31
    2bd8:	97 ff       	sbrs	r25, 7
    2bda:	09 c0       	rjmp	.+18     	; 0x2bee <vfprintf+0x202>
    2bdc:	90 95       	com	r25
    2bde:	80 95       	com	r24
    2be0:	70 95       	com	r23
    2be2:	61 95       	neg	r22
    2be4:	7f 4f       	sbci	r23, 0xFF	; 255
    2be6:	8f 4f       	sbci	r24, 0xFF	; 255
    2be8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bea:	68 94       	set
    2bec:	37 f8       	bld	r3, 7
    2bee:	2a e0       	ldi	r18, 0x0A	; 10
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	a5 01       	movw	r20, r10
    2bf4:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__ultoa_invert>
    2bf8:	c8 2e       	mov	r12, r24
    2bfa:	ca 18       	sub	r12, r10
    2bfc:	8c 2c       	mov	r8, r12
    2bfe:	43 2c       	mov	r4, r3
    2c00:	36 fe       	sbrs	r3, 6
    2c02:	0c c0       	rjmp	.+24     	; 0x2c1c <vfprintf+0x230>
    2c04:	e8 94       	clt
    2c06:	40 f8       	bld	r4, 0
    2c08:	c9 14       	cp	r12, r9
    2c0a:	40 f4       	brcc	.+16     	; 0x2c1c <vfprintf+0x230>
    2c0c:	34 fe       	sbrs	r3, 4
    2c0e:	05 c0       	rjmp	.+10     	; 0x2c1a <vfprintf+0x22e>
    2c10:	32 fc       	sbrc	r3, 2
    2c12:	03 c0       	rjmp	.+6      	; 0x2c1a <vfprintf+0x22e>
    2c14:	f3 2d       	mov	r31, r3
    2c16:	fe 7e       	andi	r31, 0xEE	; 238
    2c18:	4f 2e       	mov	r4, r31
    2c1a:	89 2c       	mov	r8, r9
    2c1c:	44 fe       	sbrs	r4, 4
    2c1e:	95 c0       	rjmp	.+298    	; 0x2d4a <vfprintf+0x35e>
    2c20:	fe 01       	movw	r30, r28
    2c22:	ec 0d       	add	r30, r12
    2c24:	f1 1d       	adc	r31, r1
    2c26:	80 81       	ld	r24, Z
    2c28:	80 33       	cpi	r24, 0x30	; 48
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <vfprintf+0x242>
    2c2c:	87 c0       	rjmp	.+270    	; 0x2d3c <vfprintf+0x350>
    2c2e:	24 2d       	mov	r18, r4
    2c30:	29 7e       	andi	r18, 0xE9	; 233
    2c32:	42 2e       	mov	r4, r18
    2c34:	84 2d       	mov	r24, r4
    2c36:	88 70       	andi	r24, 0x08	; 8
    2c38:	58 2e       	mov	r5, r24
    2c3a:	43 fc       	sbrc	r4, 3
    2c3c:	95 c0       	rjmp	.+298    	; 0x2d68 <vfprintf+0x37c>
    2c3e:	40 fe       	sbrs	r4, 0
    2c40:	8f c0       	rjmp	.+286    	; 0x2d60 <vfprintf+0x374>
    2c42:	9c 2c       	mov	r9, r12
    2c44:	82 14       	cp	r8, r2
    2c46:	18 f4       	brcc	.+6      	; 0x2c4e <vfprintf+0x262>
    2c48:	2c 0c       	add	r2, r12
    2c4a:	92 2c       	mov	r9, r2
    2c4c:	98 18       	sub	r9, r8
    2c4e:	44 fe       	sbrs	r4, 4
    2c50:	91 c0       	rjmp	.+290    	; 0x2d74 <vfprintf+0x388>
    2c52:	b7 01       	movw	r22, r14
    2c54:	80 e3       	ldi	r24, 0x30	; 48
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2c5c:	42 fe       	sbrs	r4, 2
    2c5e:	09 c0       	rjmp	.+18     	; 0x2c72 <vfprintf+0x286>
    2c60:	88 e7       	ldi	r24, 0x78	; 120
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	41 fe       	sbrs	r4, 1
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <vfprintf+0x280>
    2c68:	88 e5       	ldi	r24, 0x58	; 88
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	b7 01       	movw	r22, r14
    2c6e:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2c72:	c9 14       	cp	r12, r9
    2c74:	08 f4       	brcc	.+2      	; 0x2c78 <vfprintf+0x28c>
    2c76:	8a c0       	rjmp	.+276    	; 0x2d8c <vfprintf+0x3a0>
    2c78:	ca 94       	dec	r12
    2c7a:	d1 2c       	mov	r13, r1
    2c7c:	9f ef       	ldi	r25, 0xFF	; 255
    2c7e:	c9 1a       	sub	r12, r25
    2c80:	d9 0a       	sbc	r13, r25
    2c82:	ca 0c       	add	r12, r10
    2c84:	db 1c       	adc	r13, r11
    2c86:	f6 01       	movw	r30, r12
    2c88:	82 91       	ld	r24, -Z
    2c8a:	6f 01       	movw	r12, r30
    2c8c:	b7 01       	movw	r22, r14
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2c94:	ac 14       	cp	r10, r12
    2c96:	bd 04       	cpc	r11, r13
    2c98:	b1 f7       	brne	.-20     	; 0x2c86 <vfprintf+0x29a>
    2c9a:	4f cf       	rjmp	.-354    	; 0x2b3a <vfprintf+0x14e>
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	07 2e       	mov	r0, r23
    2ca2:	00 0c       	add	r0, r0
    2ca4:	88 0b       	sbc	r24, r24
    2ca6:	99 0b       	sbc	r25, r25
    2ca8:	0e 5f       	subi	r16, 0xFE	; 254
    2caa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cac:	92 cf       	rjmp	.-220    	; 0x2bd2 <vfprintf+0x1e6>
    2cae:	d3 2c       	mov	r13, r3
    2cb0:	e8 94       	clt
    2cb2:	d4 f8       	bld	r13, 4
    2cb4:	2a e0       	ldi	r18, 0x0A	; 10
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	85 37       	cpi	r24, 0x75	; 117
    2cba:	39 f1       	breq	.+78     	; 0x2d0a <vfprintf+0x31e>
    2cbc:	23 2d       	mov	r18, r3
    2cbe:	29 7f       	andi	r18, 0xF9	; 249
    2cc0:	d2 2e       	mov	r13, r18
    2cc2:	8f 36       	cpi	r24, 0x6F	; 111
    2cc4:	01 f1       	breq	.+64     	; 0x2d06 <vfprintf+0x31a>
    2cc6:	48 f4       	brcc	.+18     	; 0x2cda <vfprintf+0x2ee>
    2cc8:	88 35       	cpi	r24, 0x58	; 88
    2cca:	a9 f0       	breq	.+42     	; 0x2cf6 <vfprintf+0x30a>
    2ccc:	f7 01       	movw	r30, r14
    2cce:	86 81       	ldd	r24, Z+6	; 0x06
    2cd0:	97 81       	ldd	r25, Z+7	; 0x07
    2cd2:	2b 96       	adiw	r28, 0x0b	; 11
    2cd4:	e2 e1       	ldi	r30, 0x12	; 18
    2cd6:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__>
    2cda:	80 37       	cpi	r24, 0x70	; 112
    2cdc:	49 f0       	breq	.+18     	; 0x2cf0 <vfprintf+0x304>
    2cde:	88 37       	cpi	r24, 0x78	; 120
    2ce0:	a9 f7       	brne	.-22     	; 0x2ccc <vfprintf+0x2e0>
    2ce2:	d4 fe       	sbrs	r13, 4
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <vfprintf+0x2fe>
    2ce6:	68 94       	set
    2ce8:	d2 f8       	bld	r13, 2
    2cea:	20 e1       	ldi	r18, 0x10	; 16
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	0d c0       	rjmp	.+26     	; 0x2d0a <vfprintf+0x31e>
    2cf0:	68 94       	set
    2cf2:	d4 f8       	bld	r13, 4
    2cf4:	f6 cf       	rjmp	.-20     	; 0x2ce2 <vfprintf+0x2f6>
    2cf6:	34 fe       	sbrs	r3, 4
    2cf8:	03 c0       	rjmp	.+6      	; 0x2d00 <vfprintf+0x314>
    2cfa:	82 2f       	mov	r24, r18
    2cfc:	86 60       	ori	r24, 0x06	; 6
    2cfe:	d8 2e       	mov	r13, r24
    2d00:	20 e1       	ldi	r18, 0x10	; 16
    2d02:	32 e0       	ldi	r19, 0x02	; 2
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <vfprintf+0x31e>
    2d06:	28 e0       	ldi	r18, 0x08	; 8
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	f8 01       	movw	r30, r16
    2d0c:	d7 fe       	sbrs	r13, 7
    2d0e:	0f c0       	rjmp	.+30     	; 0x2d2e <vfprintf+0x342>
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	93 81       	ldd	r25, Z+3	; 0x03
    2d18:	0c 5f       	subi	r16, 0xFC	; 252
    2d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1c:	a5 01       	movw	r20, r10
    2d1e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__ultoa_invert>
    2d22:	c8 2e       	mov	r12, r24
    2d24:	ca 18       	sub	r12, r10
    2d26:	3d 2c       	mov	r3, r13
    2d28:	e8 94       	clt
    2d2a:	37 f8       	bld	r3, 7
    2d2c:	67 cf       	rjmp	.-306    	; 0x2bfc <vfprintf+0x210>
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	0e 5f       	subi	r16, 0xFE	; 254
    2d38:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3a:	f0 cf       	rjmp	.-32     	; 0x2d1c <vfprintf+0x330>
    2d3c:	42 fc       	sbrc	r4, 2
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <vfprintf+0x358>
    2d40:	83 94       	inc	r8
    2d42:	78 cf       	rjmp	.-272    	; 0x2c34 <vfprintf+0x248>
    2d44:	83 94       	inc	r8
    2d46:	83 94       	inc	r8
    2d48:	75 cf       	rjmp	.-278    	; 0x2c34 <vfprintf+0x248>
    2d4a:	84 2d       	mov	r24, r4
    2d4c:	86 78       	andi	r24, 0x86	; 134
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <vfprintf+0x366>
    2d50:	71 cf       	rjmp	.-286    	; 0x2c34 <vfprintf+0x248>
    2d52:	f6 cf       	rjmp	.-20     	; 0x2d40 <vfprintf+0x354>
    2d54:	b7 01       	movw	r22, r14
    2d56:	80 e2       	ldi	r24, 0x20	; 32
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2d5e:	83 94       	inc	r8
    2d60:	82 14       	cp	r8, r2
    2d62:	c0 f3       	brcs	.-16     	; 0x2d54 <vfprintf+0x368>
    2d64:	51 2c       	mov	r5, r1
    2d66:	73 cf       	rjmp	.-282    	; 0x2c4e <vfprintf+0x262>
    2d68:	52 2c       	mov	r5, r2
    2d6a:	58 18       	sub	r5, r8
    2d6c:	82 14       	cp	r8, r2
    2d6e:	08 f4       	brcc	.+2      	; 0x2d72 <vfprintf+0x386>
    2d70:	6e cf       	rjmp	.-292    	; 0x2c4e <vfprintf+0x262>
    2d72:	f8 cf       	rjmp	.-16     	; 0x2d64 <vfprintf+0x378>
    2d74:	84 2d       	mov	r24, r4
    2d76:	86 78       	andi	r24, 0x86	; 134
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <vfprintf+0x390>
    2d7a:	7b cf       	rjmp	.-266    	; 0x2c72 <vfprintf+0x286>
    2d7c:	8b e2       	ldi	r24, 0x2B	; 43
    2d7e:	41 fe       	sbrs	r4, 1
    2d80:	80 e2       	ldi	r24, 0x20	; 32
    2d82:	47 fc       	sbrc	r4, 7
    2d84:	8d e2       	ldi	r24, 0x2D	; 45
    2d86:	b7 01       	movw	r22, r14
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	71 cf       	rjmp	.-286    	; 0x2c6e <vfprintf+0x282>
    2d8c:	b7 01       	movw	r22, r14
    2d8e:	80 e3       	ldi	r24, 0x30	; 48
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	0e 94 09 17 	call	0x2e12	; 0x2e12 <fputc>
    2d96:	9a 94       	dec	r9
    2d98:	6c cf       	rjmp	.-296    	; 0x2c72 <vfprintf+0x286>
    2d9a:	8f ef       	ldi	r24, 0xFF	; 255
    2d9c:	9f ef       	ldi	r25, 0xFF	; 255
    2d9e:	99 cf       	rjmp	.-206    	; 0x2cd2 <vfprintf+0x2e6>

00002da0 <calloc>:
calloc():
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	86 9f       	mul	r24, r22
    2daa:	80 01       	movw	r16, r0
    2dac:	87 9f       	mul	r24, r23
    2dae:	10 0d       	add	r17, r0
    2db0:	96 9f       	mul	r25, r22
    2db2:	10 0d       	add	r17, r0
    2db4:	11 24       	eor	r1, r1
    2db6:	c8 01       	movw	r24, r16
    2db8:	0e 94 43 13 	call	0x2686	; 0x2686 <malloc>
    2dbc:	ec 01       	movw	r28, r24
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	29 f0       	breq	.+10     	; 0x2dcc <calloc+0x2c>
    2dc2:	a8 01       	movw	r20, r16
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	0e 94 f7 16 	call	0x2dee	; 0x2dee <memset>
    2dcc:	ce 01       	movw	r24, r28
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	08 95       	ret

00002dd8 <strnlen_P>:
strnlen_P():
    2dd8:	fc 01       	movw	r30, r24
    2dda:	05 90       	lpm	r0, Z+
    2ddc:	61 50       	subi	r22, 0x01	; 1
    2dde:	70 40       	sbci	r23, 0x00	; 0
    2de0:	01 10       	cpse	r0, r1
    2de2:	d8 f7       	brcc	.-10     	; 0x2dda <strnlen_P+0x2>
    2de4:	80 95       	com	r24
    2de6:	90 95       	com	r25
    2de8:	8e 0f       	add	r24, r30
    2dea:	9f 1f       	adc	r25, r31
    2dec:	08 95       	ret

00002dee <memset>:
memset():
    2dee:	dc 01       	movw	r26, r24
    2df0:	01 c0       	rjmp	.+2      	; 0x2df4 <memset+0x6>
    2df2:	6d 93       	st	X+, r22
    2df4:	41 50       	subi	r20, 0x01	; 1
    2df6:	50 40       	sbci	r21, 0x00	; 0
    2df8:	e0 f7       	brcc	.-8      	; 0x2df2 <memset+0x4>
    2dfa:	08 95       	ret

00002dfc <strnlen>:
strnlen():
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	61 50       	subi	r22, 0x01	; 1
    2e00:	70 40       	sbci	r23, 0x00	; 0
    2e02:	01 90       	ld	r0, Z+
    2e04:	01 10       	cpse	r0, r1
    2e06:	d8 f7       	brcc	.-10     	; 0x2dfe <strnlen+0x2>
    2e08:	80 95       	com	r24
    2e0a:	90 95       	com	r25
    2e0c:	8e 0f       	add	r24, r30
    2e0e:	9f 1f       	adc	r25, r31
    2e10:	08 95       	ret

00002e12 <fputc>:
fputc():
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	18 2f       	mov	r17, r24
    2e1c:	09 2f       	mov	r16, r25
    2e1e:	eb 01       	movw	r28, r22
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	81 fd       	sbrc	r24, 1
    2e24:	09 c0       	rjmp	.+18     	; 0x2e38 <fputc+0x26>
    2e26:	1f ef       	ldi	r17, 0xFF	; 255
    2e28:	0f ef       	ldi	r16, 0xFF	; 255
    2e2a:	81 2f       	mov	r24, r17
    2e2c:	90 2f       	mov	r25, r16
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
    2e34:	0f 91       	pop	r16
    2e36:	08 95       	ret
    2e38:	82 ff       	sbrs	r24, 2
    2e3a:	14 c0       	rjmp	.+40     	; 0x2e64 <fputc+0x52>
    2e3c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e3e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e40:	8c 81       	ldd	r24, Y+4	; 0x04
    2e42:	9d 81       	ldd	r25, Y+5	; 0x05
    2e44:	28 17       	cp	r18, r24
    2e46:	39 07       	cpc	r19, r25
    2e48:	3c f4       	brge	.+14     	; 0x2e58 <fputc+0x46>
    2e4a:	e8 81       	ld	r30, Y
    2e4c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e4e:	cf 01       	movw	r24, r30
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	99 83       	std	Y+1, r25	; 0x01
    2e54:	88 83       	st	Y, r24
    2e56:	10 83       	st	Z, r17
    2e58:	8e 81       	ldd	r24, Y+6	; 0x06
    2e5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	9f 83       	std	Y+7, r25	; 0x07
    2e60:	8e 83       	std	Y+6, r24	; 0x06
    2e62:	e3 cf       	rjmp	.-58     	; 0x2e2a <fputc+0x18>
    2e64:	e8 85       	ldd	r30, Y+8	; 0x08
    2e66:	f9 85       	ldd	r31, Y+9	; 0x09
    2e68:	81 2f       	mov	r24, r17
    2e6a:	09 95       	icall
    2e6c:	89 2b       	or	r24, r25
    2e6e:	a1 f3       	breq	.-24     	; 0x2e58 <fputc+0x46>
    2e70:	da cf       	rjmp	.-76     	; 0x2e26 <fputc+0x14>

00002e72 <__ultoa_invert>:
__ultoa_invert():
    2e72:	fa 01       	movw	r30, r20
    2e74:	aa 27       	eor	r26, r26
    2e76:	28 30       	cpi	r18, 0x08	; 8
    2e78:	51 f1       	breq	.+84     	; 0x2ece <__ultoa_invert+0x5c>
    2e7a:	20 31       	cpi	r18, 0x10	; 16
    2e7c:	81 f1       	breq	.+96     	; 0x2ede <__ultoa_invert+0x6c>
    2e7e:	e8 94       	clt
    2e80:	6f 93       	push	r22
    2e82:	6e 7f       	andi	r22, 0xFE	; 254
    2e84:	6e 5f       	subi	r22, 0xFE	; 254
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255
    2e88:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8c:	af 4f       	sbci	r26, 0xFF	; 255
    2e8e:	b1 e0       	ldi	r27, 0x01	; 1
    2e90:	3e d0       	rcall	.+124    	; 0x2f0e <__ultoa_invert+0x9c>
    2e92:	b4 e0       	ldi	r27, 0x04	; 4
    2e94:	3c d0       	rcall	.+120    	; 0x2f0e <__ultoa_invert+0x9c>
    2e96:	67 0f       	add	r22, r23
    2e98:	78 1f       	adc	r23, r24
    2e9a:	89 1f       	adc	r24, r25
    2e9c:	9a 1f       	adc	r25, r26
    2e9e:	a1 1d       	adc	r26, r1
    2ea0:	68 0f       	add	r22, r24
    2ea2:	79 1f       	adc	r23, r25
    2ea4:	8a 1f       	adc	r24, r26
    2ea6:	91 1d       	adc	r25, r1
    2ea8:	a1 1d       	adc	r26, r1
    2eaa:	6a 0f       	add	r22, r26
    2eac:	71 1d       	adc	r23, r1
    2eae:	81 1d       	adc	r24, r1
    2eb0:	91 1d       	adc	r25, r1
    2eb2:	a1 1d       	adc	r26, r1
    2eb4:	20 d0       	rcall	.+64     	; 0x2ef6 <__ultoa_invert+0x84>
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <__ultoa_invert+0x48>
    2eb8:	68 94       	set
    2eba:	3f 91       	pop	r19
    2ebc:	2a e0       	ldi	r18, 0x0A	; 10
    2ebe:	26 9f       	mul	r18, r22
    2ec0:	11 24       	eor	r1, r1
    2ec2:	30 19       	sub	r19, r0
    2ec4:	30 5d       	subi	r19, 0xD0	; 208
    2ec6:	31 93       	st	Z+, r19
    2ec8:	de f6       	brtc	.-74     	; 0x2e80 <__ultoa_invert+0xe>
    2eca:	cf 01       	movw	r24, r30
    2ecc:	08 95       	ret
    2ece:	46 2f       	mov	r20, r22
    2ed0:	47 70       	andi	r20, 0x07	; 7
    2ed2:	40 5d       	subi	r20, 0xD0	; 208
    2ed4:	41 93       	st	Z+, r20
    2ed6:	b3 e0       	ldi	r27, 0x03	; 3
    2ed8:	0f d0       	rcall	.+30     	; 0x2ef8 <__ultoa_invert+0x86>
    2eda:	c9 f7       	brne	.-14     	; 0x2ece <__ultoa_invert+0x5c>
    2edc:	f6 cf       	rjmp	.-20     	; 0x2eca <__ultoa_invert+0x58>
    2ede:	46 2f       	mov	r20, r22
    2ee0:	4f 70       	andi	r20, 0x0F	; 15
    2ee2:	40 5d       	subi	r20, 0xD0	; 208
    2ee4:	4a 33       	cpi	r20, 0x3A	; 58
    2ee6:	18 f0       	brcs	.+6      	; 0x2eee <__ultoa_invert+0x7c>
    2ee8:	49 5d       	subi	r20, 0xD9	; 217
    2eea:	31 fd       	sbrc	r19, 1
    2eec:	40 52       	subi	r20, 0x20	; 32
    2eee:	41 93       	st	Z+, r20
    2ef0:	02 d0       	rcall	.+4      	; 0x2ef6 <__ultoa_invert+0x84>
    2ef2:	a9 f7       	brne	.-22     	; 0x2ede <__ultoa_invert+0x6c>
    2ef4:	ea cf       	rjmp	.-44     	; 0x2eca <__ultoa_invert+0x58>
    2ef6:	b4 e0       	ldi	r27, 0x04	; 4
    2ef8:	a6 95       	lsr	r26
    2efa:	97 95       	ror	r25
    2efc:	87 95       	ror	r24
    2efe:	77 95       	ror	r23
    2f00:	67 95       	ror	r22
    2f02:	ba 95       	dec	r27
    2f04:	c9 f7       	brne	.-14     	; 0x2ef8 <__ultoa_invert+0x86>
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	61 05       	cpc	r22, r1
    2f0a:	71 05       	cpc	r23, r1
    2f0c:	08 95       	ret
    2f0e:	9b 01       	movw	r18, r22
    2f10:	ac 01       	movw	r20, r24
    2f12:	0a 2e       	mov	r0, r26
    2f14:	06 94       	lsr	r0
    2f16:	57 95       	ror	r21
    2f18:	47 95       	ror	r20
    2f1a:	37 95       	ror	r19
    2f1c:	27 95       	ror	r18
    2f1e:	ba 95       	dec	r27
    2f20:	c9 f7       	brne	.-14     	; 0x2f14 <__ultoa_invert+0xa2>
    2f22:	62 0f       	add	r22, r18
    2f24:	73 1f       	adc	r23, r19
    2f26:	84 1f       	adc	r24, r20
    2f28:	95 1f       	adc	r25, r21
    2f2a:	a0 1d       	adc	r26, r0
    2f2c:	08 95       	ret

00002f2e <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    2f2e:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    2f30:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    2f32:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    2f34:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    2f36:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    2f38:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    2f3a:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    2f3c:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    2f3e:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    2f40:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    2f42:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    2f44:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    2f46:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    2f48:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    2f4a:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    2f4c:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    2f4e:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    2f50:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    2f52:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    2f54:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    2f56:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    2f58:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    2f5a:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    2f5c:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    2f5e:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    2f60:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    2f62:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    2f64:	09 94       	ijmp

00002f66 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    2f66:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    2f68:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    2f6a:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    2f6c:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    2f6e:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    2f70:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    2f72:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    2f74:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    2f76:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    2f78:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    2f7a:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    2f7c:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    2f7e:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    2f80:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    2f82:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    2f84:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    2f86:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    2f88:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    2f8a:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    2f8c:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    2f8e:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    2f90:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    2f92:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    2f94:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    2f96:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    2f98:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    2f9a:	08 95       	ret

00002f9c <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2f9c:	f8 94       	cli

00002f9e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2f9e:	ff cf       	rjmp	.-2      	; 0x2f9e <__stop_program>
